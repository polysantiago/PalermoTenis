<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:23:06 BST 2010 -->
<TITLE>
AbstractApplicationContext
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="AbstractApplicationContext";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../../../../org/springframework/context/support/AbstractMessageSource.html" title="class in org.springframework.context.support"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/context/support/AbstractApplicationContext.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="AbstractApplicationContext.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.context.support</FONT>
<BR>
Class AbstractApplicationContext</H2>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../../org/springframework/core/io/DefaultResourceLoader.html" title="class in org.springframework.core.io">org.springframework.core.io.DefaultResourceLoader</A>
      <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>org.springframework.context.support.AbstractApplicationContext</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A>, <A HREF="../../../../org/springframework/beans/factory/DisposableBean.html" title="interface in org.springframework.beans.factory">DisposableBean</A>, <A HREF="../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html" title="interface in org.springframework.beans.factory">HierarchicalBeanFactory</A>, <A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory">ListableBeanFactory</A>, <A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context">ApplicationContext</A>, <A HREF="../../../../org/springframework/context/ApplicationEventPublisher.html" title="interface in org.springframework.context">ApplicationEventPublisher</A>, <A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html" title="interface in org.springframework.context">ConfigurableApplicationContext</A>, <A HREF="../../../../org/springframework/context/Lifecycle.html" title="interface in org.springframework.context">Lifecycle</A>, <A HREF="../../../../org/springframework/context/MessageSource.html" title="interface in org.springframework.context">MessageSource</A>, <A HREF="../../../../org/springframework/core/io/ResourceLoader.html" title="interface in org.springframework.core.io">ResourceLoader</A>, <A HREF="../../../../org/springframework/core/io/support/ResourcePatternResolver.html" title="interface in org.springframework.core.io.support">ResourcePatternResolver</A></DD>
</DL>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../org/springframework/context/support/AbstractRefreshableApplicationContext.html" title="class in org.springframework.context.support">AbstractRefreshableApplicationContext</A>, <A HREF="../../../../org/springframework/context/support/GenericApplicationContext.html" title="class in org.springframework.context.support">GenericApplicationContext</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public abstract class <B>AbstractApplicationContext</B><DT>extends <A HREF="../../../../org/springframework/core/io/DefaultResourceLoader.html" title="class in org.springframework.core.io">DefaultResourceLoader</A><DT>implements <A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html" title="interface in org.springframework.context">ConfigurableApplicationContext</A>, <A HREF="../../../../org/springframework/beans/factory/DisposableBean.html" title="interface in org.springframework.beans.factory">DisposableBean</A></DL>
</PRE>

<P>
Abstract implementation of the <A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context"><CODE>ApplicationContext</CODE></A>
 interface. Doesn't mandate the type of storage used for configuration; simply
 implements common context functionality. Uses the Template Method design pattern,
 requiring concrete subclasses to implement abstract methods.

 <p>In contrast to a plain BeanFactory, an ApplicationContext is supposed
 to detect special beans defined in its internal bean factory:
 Therefore, this class automatically registers
 <A HREF="../../../../org/springframework/beans/factory/config/BeanFactoryPostProcessor.html" title="interface in org.springframework.beans.factory.config"><CODE>BeanFactoryPostProcessors</CODE></A>,
 <A HREF="../../../../org/springframework/beans/factory/config/BeanPostProcessor.html" title="interface in org.springframework.beans.factory.config"><CODE>BeanPostProcessors</CODE></A>
 and <A HREF="../../../../org/springframework/context/ApplicationListener.html" title="interface in org.springframework.context"><CODE>ApplicationListeners</CODE></A>
 which are defined as beans in the context.

 <p>A <A HREF="../../../../org/springframework/context/MessageSource.html" title="interface in org.springframework.context"><CODE>MessageSource</CODE></A> may also be supplied
 as a bean in the context, with the name "messageSource"; otherwise, message
 resolution is delegated to the parent context. Furthermore, a multicaster
 for application events can be supplied as "applicationEventMulticaster" bean
 of type <A HREF="../../../../org/springframework/context/event/ApplicationEventMulticaster.html" title="interface in org.springframework.context.event"><CODE>ApplicationEventMulticaster</CODE></A>
 in the context; otherwise, a default multicaster of type
 <A HREF="../../../../org/springframework/context/event/SimpleApplicationEventMulticaster.html" title="class in org.springframework.context.event"><CODE>SimpleApplicationEventMulticaster</CODE></A> will be used.

 <p>Implements resource loading through extending
 <A HREF="../../../../org/springframework/core/io/DefaultResourceLoader.html" title="class in org.springframework.core.io"><CODE>DefaultResourceLoader</CODE></A>.
 Consequently treats non-URL resource paths as class path resources
 (supporting full class path resource names that include the package path,
 e.g. "mypackage/myresource.dat"), unless the <A HREF="../../../../org/springframework/core/io/DefaultResourceLoader.html#getResourceByPath(java.lang.String)"><CODE>DefaultResourceLoader.getResourceByPath(java.lang.String)</CODE></A>
 method is overwritten in a subclass.
<P>

<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>January 21, 2001</DD>
<DT><B>Author:</B></DT>
  <DD>Rod Johnson, Juergen Hoeller, Mark Fisher</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#refreshBeanFactory()"><CODE>refreshBeanFactory()</CODE></A>, 
<A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBeanFactory()"><CODE>getBeanFactory()</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/config/BeanFactoryPostProcessor.html" title="interface in org.springframework.beans.factory.config"><CODE>BeanFactoryPostProcessor</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/config/BeanPostProcessor.html" title="interface in org.springframework.beans.factory.config"><CODE>BeanPostProcessor</CODE></A>, 
<A HREF="../../../../org/springframework/context/event/ApplicationEventMulticaster.html" title="interface in org.springframework.context.event"><CODE>ApplicationEventMulticaster</CODE></A>, 
<A HREF="../../../../org/springframework/context/ApplicationListener.html" title="interface in org.springframework.context"><CODE>ApplicationListener</CODE></A>, 
<A HREF="../../../../org/springframework/context/MessageSource.html" title="interface in org.springframework.context"><CODE>MessageSource</CODE></A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#APPLICATION_EVENT_MULTICASTER_BEAN_NAME">APPLICATION_EVENT_MULTICASTER_BEAN_NAME</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name of the ApplicationEventMulticaster bean in the factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#LIFECYCLE_PROCESSOR_BEAN_NAME">LIFECYCLE_PROCESSOR_BEAN_NAME</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name of the LifecycleProcessor bean in the factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://jakarta.apache.org/commons/logging/apidocs/org/apache/commons/logging/Log.html?is-external=true" title="class or interface in org.apache.commons.logging">Log</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#logger">logger</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger used by this class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#MESSAGE_SOURCE_BEAN_NAME">MESSAGE_SOURCE_BEAN_NAME</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name of the MessageSource bean in the factory.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.context.ConfigurableApplicationContext"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface org.springframework.context.<A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html" title="interface in org.springframework.context">ConfigurableApplicationContext</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#CONFIG_LOCATION_DELIMITERS">CONFIG_LOCATION_DELIMITERS</A>, <A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#CONVERSION_SERVICE_BEAN_NAME">CONVERSION_SERVICE_BEAN_NAME</A>, <A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#LOAD_TIME_WEAVER_BEAN_NAME">LOAD_TIME_WEAVER_BEAN_NAME</A>, <A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#SYSTEM_ENVIRONMENT_BEAN_NAME">SYSTEM_ENVIRONMENT_BEAN_NAME</A>, <A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#SYSTEM_PROPERTIES_BEAN_NAME">SYSTEM_PROPERTIES_BEAN_NAME</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.beans.factory.BeanFactory"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface org.springframework.beans.factory.<A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#FACTORY_BEAN_PREFIX">FACTORY_BEAN_PREFIX</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.core.io.support.ResourcePatternResolver"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface org.springframework.core.io.support.<A HREF="../../../../org/springframework/core/io/support/ResourcePatternResolver.html" title="interface in org.springframework.core.io.support">ResourcePatternResolver</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/springframework/core/io/support/ResourcePatternResolver.html#CLASSPATH_ALL_URL_PREFIX">CLASSPATH_ALL_URL_PREFIX</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.core.io.ResourceLoader"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface org.springframework.core.io.<A HREF="../../../../org/springframework/core/io/ResourceLoader.html" title="interface in org.springframework.core.io">ResourceLoader</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/springframework/core/io/ResourceLoader.html#CLASSPATH_URL_PREFIX">CLASSPATH_URL_PREFIX</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#AbstractApplicationContext()">AbstractApplicationContext</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new AbstractApplicationContext with no parent.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#AbstractApplicationContext(org.springframework.context.ApplicationContext)">AbstractApplicationContext</A></B>(<A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context">ApplicationContext</A>&nbsp;parent)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new AbstractApplicationContext with the given parent context.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#addApplicationListener(org.springframework.context.ApplicationListener)">addApplicationListener</A></B>(<A HREF="../../../../org/springframework/context/ApplicationListener.html" title="interface in org.springframework.context">ApplicationListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add a new ApplicationListener that will be notified on context events
 such as context refresh and context shutdown.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#addBeanFactoryPostProcessor(org.springframework.beans.factory.config.BeanFactoryPostProcessor)">addBeanFactoryPostProcessor</A></B>(<A HREF="../../../../org/springframework/beans/factory/config/BeanFactoryPostProcessor.html" title="interface in org.springframework.beans.factory.config">BeanFactoryPostProcessor</A>&nbsp;beanFactoryPostProcessor)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add a new BeanFactoryPostProcessor that will get applied to the internal
 bean factory of this application context on refresh, before any of the
 bean definitions get evaluated.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#addListener(org.springframework.context.ApplicationListener)">addListener</A></B>(<A HREF="../../../../org/springframework/context/ApplicationListener.html" title="interface in org.springframework.context">ApplicationListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>as of Spring 3.0, in favor of <A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#addApplicationListener(org.springframework.context.ApplicationListener)"><CODE>addApplicationListener(org.springframework.context.ApplicationListener)</CODE></A></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#cancelRefresh(org.springframework.beans.BeansException)">cancelRefresh</A></B>(<A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A>&nbsp;ex)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cancel this context's refresh attempt, resetting the <code>active</code> flag
 after an exception got thrown.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#close()">close</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Close this application context, destroying all beans in its bean factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#closeBeanFactory()">closeBeanFactory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subclasses must implement this method to release their internal bean factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#containsBean(java.lang.String)">containsBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Does this bean factory contain a bean with the given name? More specifically,
 is <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> able to obtain a bean instance for the given name?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#containsBeanDefinition(java.lang.String)">containsBeanDefinition</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check if this bean factory contains a bean definition with the given name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#containsLocalBean(java.lang.String)">containsLocalBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether the local bean factory contains a bean of the given name,
 ignoring beans defined in ancestor contexts.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#destroy()">destroy</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DisposableBean callback for destruction of this instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#destroyBeans()">destroyBeans</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Template method for destroying all beans that this context manages.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#doClose()">doClose</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Actually performs context closing: publishes a ContextClosedEvent and
 destroys the singletons in the bean factory of this application context.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;A extends <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/annotation/Annotation.html?is-external=true" title="class or interface in java.lang.annotation">Annotation</A>&gt; 
<BR>
A</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#findAnnotationOnBean(java.lang.String, java.lang.Class)">findAnnotationOnBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;A&gt;&nbsp;annotationType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Find a <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/annotation/Annotation.html?is-external=true" title="class or interface in java.lang.annotation"><CODE>Annotation</CODE></A> of <code>annotationType</code> on the specified
 bean, traversing its interfaces and super classes if no annotation can be
 found on the given class itself.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#finishBeanFactoryInitialization(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)">finishBeanFactoryInitialization</A></B>(<A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A>&nbsp;beanFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Finish the initialization of this context's bean factory,
 initializing all remaining singleton beans.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#finishRefresh()">finishRefresh</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Finish the refresh of this context, invoking the LifecycleProcessor's
 onRefresh() method and publishing the
 <A HREF="../../../../org/springframework/context/event/ContextRefreshedEvent.html" title="class in org.springframework.context.event"><CODE>ContextRefreshedEvent</CODE></A>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getAliases(java.lang.String)">getAliases</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the aliases for the given bean name, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Collection.html?is-external=true" title="class or interface in java.util">Collection</A>&lt;<A HREF="../../../../org/springframework/context/ApplicationListener.html" title="interface in org.springframework.context">ApplicationListener</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getApplicationListeners()">getApplicationListeners</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the list of statically specified ApplicationListeners.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/springframework/beans/factory/config/AutowireCapableBeanFactory.html" title="interface in org.springframework.beans.factory.config">AutowireCapableBeanFactory</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getAutowireCapableBeanFactory()">getAutowireCapableBeanFactory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return this context's internal bean factory as AutowireCapableBeanFactory,
 if already available.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBean(java.lang.Class)">getBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the bean instance that uniquely matches the given object type, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBean(java.lang.String)">getBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an instance, which may be shared or independent, of the specified bean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBean(java.lang.String, java.lang.Class)">getBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an instance, which may be shared or independent, of the specified bean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBean(java.lang.String, java.lang.Object...)">getBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an instance, which may be shared or independent, of the specified bean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBeanDefinitionCount()">getBeanDefinitionCount</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the number of beans defined in the factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBeanDefinitionNames()">getBeanDefinitionNames</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the names of all beans defined in this factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;<A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBeanFactory()">getBeanFactory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subclasses must return their internal bean factory here.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../org/springframework/beans/factory/config/BeanFactoryPostProcessor.html" title="interface in org.springframework.beans.factory.config">BeanFactoryPostProcessor</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBeanFactoryPostProcessors()">getBeanFactoryPostProcessors</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the list of BeanFactoryPostProcessors that will get applied
 to the internal BeanFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBeanNamesForType(java.lang.Class)">getBeanNamesForType</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;type)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the names of beans matching the given type (including subclasses),
 judging from either bean definitions or the value of <code>getObjectType</code>
 in the case of FactoryBeans.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBeanNamesForType(java.lang.Class, boolean, boolean)">getBeanNamesForType</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;type,
                    boolean&nbsp;includeNonSingletons,
                    boolean&nbsp;allowEagerInit)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the names of beans matching the given type (including subclasses),
 judging from either bean definitions or the value of <code>getObjectType</code>
 in the case of FactoryBeans.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBeansOfType(java.lang.Class)">getBeansOfType</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;type)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the bean instances that match the given object type (including
 subclasses), judging from either bean definitions or the value of
 <code>getObjectType</code> in the case of FactoryBeans.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBeansOfType(java.lang.Class, boolean, boolean)">getBeansOfType</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;type,
               boolean&nbsp;includeNonSingletons,
               boolean&nbsp;allowEagerInit)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the bean instances that match the given object type (including
 subclasses), judging from either bean definitions or the value of
 <code>getObjectType</code> in the case of FactoryBeans.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBeansWithAnnotation(java.lang.Class)">getBeansWithAnnotation</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;? extends <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/annotation/Annotation.html?is-external=true" title="class or interface in java.lang.annotation">Annotation</A>&gt;&nbsp;annotationType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Find all beans whose <code>Class</code> has the supplied <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/annotation/Annotation.html?is-external=true" title="class or interface in java.lang.annotation"><CODE>Annotation</CODE></A> type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getDisplayName()">getDisplayName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a friendly name for this context.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getId()">getId</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the unique id of this application context.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getInternalParentBeanFactory()">getInternalParentBeanFactory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the internal bean factory of the parent context if it implements
 ConfigurableApplicationContext; else, return the parent context itself.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../org/springframework/context/MessageSource.html" title="interface in org.springframework.context">MessageSource</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getInternalParentMessageSource()">getInternalParentMessageSource</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the internal message source of the parent context if it is an
 AbstractApplicationContext too; else, return the parent context itself.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale)">getMessage</A></B>(<A HREF="../../../../org/springframework/context/MessageSourceResolvable.html" title="interface in org.springframework.context">MessageSourceResolvable</A>&nbsp;resolvable,
           <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Locale.html?is-external=true" title="class or interface in java.util">Locale</A>&nbsp;locale)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Try to resolve the message using all the attributes contained within the
 <code>MessageSourceResolvable</code> argument that was passed in.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getMessage(java.lang.String, java.lang.Object[], java.util.Locale)">getMessage</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;code,
           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
           <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Locale.html?is-external=true" title="class or interface in java.util">Locale</A>&nbsp;locale)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Try to resolve the message.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)">getMessage</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;code,
           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;defaultMessage,
           <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Locale.html?is-external=true" title="class or interface in java.util">Locale</A>&nbsp;locale)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Try to resolve the message.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context">ApplicationContext</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getParent()">getParent</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the parent context, or <code>null</code> if there is no parent
 (that is, this context is the root of the context hierarchy).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getParentBeanFactory()">getParentBeanFactory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the parent bean factory, or <code>null</code> if there is none.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../org/springframework/core/io/support/ResourcePatternResolver.html" title="interface in org.springframework.core.io.support">ResourcePatternResolver</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getResourcePatternResolver()">getResourcePatternResolver</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the ResourcePatternResolver to use for resolving location patterns
 into Resource instances.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getResources(java.lang.String)">getResources</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;locationPattern)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resolve the given location pattern into Resource objects.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getStartupDate()">getStartupDate</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the timestamp (ms) when this context was first loaded.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;?&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getType(java.lang.String)">getType</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine the type of the bean with the given name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#initApplicationEventMulticaster()">initApplicationEventMulticaster</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize the ApplicationEventMulticaster.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#initLifecycleProcessor()">initLifecycleProcessor</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize the LifecycleProcessor.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#initMessageSource()">initMessageSource</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize the MessageSource.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)">invokeBeanFactoryPostProcessors</A></B>(<A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A>&nbsp;beanFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Instantiate and invoke all registered BeanFactoryPostProcessor beans,
 respecting explicit order if given.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#isActive()">isActive</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether this application context is active, that is,
 whether it has been refreshed at least once and has not been closed yet.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#isPrototype(java.lang.String)">isPrototype</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Is this bean a prototype? That is, will <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> always return
 independent instances?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#isRunning()">isRunning</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check whether this component is currently running.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#isSingleton(java.lang.String)">isSingleton</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Is this bean a shared singleton? That is, will <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> always
 return the same instance?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#isTypeMatch(java.lang.String, java.lang.Class)">isTypeMatch</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;targetType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check whether the bean with the given name matches the specified type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#obtainFreshBeanFactory()">obtainFreshBeanFactory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tell the subclass to refresh the internal bean factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#onClose()">onClose</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Template method which can be overridden to add context-specific shutdown work.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#onRefresh()">onRefresh</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Template method which can be overridden to add context-specific refresh work.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)">postProcessBeanFactory</A></B>(<A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A>&nbsp;beanFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Modify the application context's internal bean factory after its standard
 initialization.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#prepareBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)">prepareBeanFactory</A></B>(<A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A>&nbsp;beanFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Configure the factory's standard context characteristics,
 such as the context's ClassLoader and post-processors.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#prepareRefresh()">prepareRefresh</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prepare this context for refreshing, setting its startup date and
 active flag.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#publishEvent(org.springframework.context.ApplicationEvent)">publishEvent</A></B>(<A HREF="../../../../org/springframework/context/ApplicationEvent.html" title="class in org.springframework.context">ApplicationEvent</A>&nbsp;event)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Publish the given event to all listeners.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#refresh()">refresh</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Load or refresh the persistent representation of the configuration,
 which might an XML file, properties file, or relational database schema.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#refreshBeanFactory()">refreshBeanFactory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subclasses must implement this method to perform the actual configuration load.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)">registerBeanPostProcessors</A></B>(<A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A>&nbsp;beanFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Instantiate and invoke all registered BeanPostProcessor beans,
 respecting explicit order if given.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#registerListeners()">registerListeners</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add beans that implement ApplicationListener as listeners.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#registerShutdownHook()">registerShutdownHook</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register a shutdown hook with the JVM runtime, closing this context
 on JVM shutdown unless it has already been closed at that time.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#setDisplayName(java.lang.String)">setDisplayName</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;displayName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set a friendly name for this context.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#setId(java.lang.String)">setId</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the unique id of this application context.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#setParent(org.springframework.context.ApplicationContext)">setParent</A></B>(<A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context">ApplicationContext</A>&nbsp;parent)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the parent of this application context.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#start()">start</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Start this component.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#stop()">stop</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stop this component.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#toString()">toString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return information about this context.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.core.io.DefaultResourceLoader"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class org.springframework.core.io.<A HREF="../../../../org/springframework/core/io/DefaultResourceLoader.html" title="class in org.springframework.core.io">DefaultResourceLoader</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/springframework/core/io/DefaultResourceLoader.html#getClassLoader()">getClassLoader</A>, <A HREF="../../../../org/springframework/core/io/DefaultResourceLoader.html#getResource(java.lang.String)">getResource</A>, <A HREF="../../../../org/springframework/core/io/DefaultResourceLoader.html#getResourceByPath(java.lang.String)">getResourceByPath</A>, <A HREF="../../../../org/springframework/core/io/DefaultResourceLoader.html#setClassLoader(java.lang.ClassLoader)">setClassLoader</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.core.io.ResourceLoader"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from interface org.springframework.core.io.<A HREF="../../../../org/springframework/core/io/ResourceLoader.html" title="interface in org.springframework.core.io">ResourceLoader</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/springframework/core/io/ResourceLoader.html#getClassLoader()">getClassLoader</A>, <A HREF="../../../../org/springframework/core/io/ResourceLoader.html#getResource(java.lang.String)">getResource</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="MESSAGE_SOURCE_BEAN_NAME"><!-- --></A><H3>
MESSAGE_SOURCE_BEAN_NAME</H3>
<PRE>
public static final <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>MESSAGE_SOURCE_BEAN_NAME</B></PRE>
<DL>
<DD>Name of the MessageSource bean in the factory.
 If none is supplied, message resolution is delegated to the parent.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/MessageSource.html" title="interface in org.springframework.context"><CODE>MessageSource</CODE></A>, 
<A HREF="../../../../constant-values.html#org.springframework.context.support.AbstractApplicationContext.MESSAGE_SOURCE_BEAN_NAME">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="LIFECYCLE_PROCESSOR_BEAN_NAME"><!-- --></A><H3>
LIFECYCLE_PROCESSOR_BEAN_NAME</H3>
<PRE>
public static final <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>LIFECYCLE_PROCESSOR_BEAN_NAME</B></PRE>
<DL>
<DD>Name of the LifecycleProcessor bean in the factory.
 If none is supplied, a DefaultLifecycleProcessor is used.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/LifecycleProcessor.html" title="interface in org.springframework.context"><CODE>LifecycleProcessor</CODE></A>, 
<A HREF="../../../../org/springframework/context/support/DefaultLifecycleProcessor.html" title="class in org.springframework.context.support"><CODE>DefaultLifecycleProcessor</CODE></A>, 
<A HREF="../../../../constant-values.html#org.springframework.context.support.AbstractApplicationContext.LIFECYCLE_PROCESSOR_BEAN_NAME">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="APPLICATION_EVENT_MULTICASTER_BEAN_NAME"><!-- --></A><H3>
APPLICATION_EVENT_MULTICASTER_BEAN_NAME</H3>
<PRE>
public static final <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>APPLICATION_EVENT_MULTICASTER_BEAN_NAME</B></PRE>
<DL>
<DD>Name of the ApplicationEventMulticaster bean in the factory.
 If none is supplied, a default SimpleApplicationEventMulticaster is used.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/event/ApplicationEventMulticaster.html" title="interface in org.springframework.context.event"><CODE>ApplicationEventMulticaster</CODE></A>, 
<A HREF="../../../../org/springframework/context/event/SimpleApplicationEventMulticaster.html" title="class in org.springframework.context.event"><CODE>SimpleApplicationEventMulticaster</CODE></A>, 
<A HREF="../../../../constant-values.html#org.springframework.context.support.AbstractApplicationContext.APPLICATION_EVENT_MULTICASTER_BEAN_NAME">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="logger"><!-- --></A><H3>
logger</H3>
<PRE>
protected final <A HREF="http://jakarta.apache.org/commons/logging/apidocs/org/apache/commons/logging/Log.html?is-external=true" title="class or interface in org.apache.commons.logging">Log</A> <B>logger</B></PRE>
<DL>
<DD>Logger used by this class. Available to subclasses.
<P>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="AbstractApplicationContext()"><!-- --></A><H3>
AbstractApplicationContext</H3>
<PRE>
public <B>AbstractApplicationContext</B>()</PRE>
<DL>
<DD>Create a new AbstractApplicationContext with no parent.
<P>
</DL>
<HR>

<A NAME="AbstractApplicationContext(org.springframework.context.ApplicationContext)"><!-- --></A><H3>
AbstractApplicationContext</H3>
<PRE>
public <B>AbstractApplicationContext</B>(<A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context">ApplicationContext</A>&nbsp;parent)</PRE>
<DL>
<DD>Create a new AbstractApplicationContext with the given parent context.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>parent</CODE> - the parent context</DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="setId(java.lang.String)"><!-- --></A><H3>
setId</H3>
<PRE>
public void <B>setId</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;id)</PRE>
<DL>
<DD>Set the unique id of this application context.
 <p>Default is the object id of the context instance, or the name
 of the context bean if the context is itself defined as a bean.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#setId(java.lang.String)">setId</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html" title="interface in org.springframework.context">ConfigurableApplicationContext</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>id</CODE> - the unique id of the context</DL>
</DD>
</DL>
<HR>

<A NAME="getId()"><!-- --></A><H3>
getId</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>getId</B>()</PRE>
<DL>
<DD>Return the unique id of this application context.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ApplicationContext.html#getId()">getId</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context">ApplicationContext</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the unique id of the context, or <code>null</code> if none</DL>
</DD>
</DL>
<HR>

<A NAME="setDisplayName(java.lang.String)"><!-- --></A><H3>
setDisplayName</H3>
<PRE>
public void <B>setDisplayName</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;displayName)</PRE>
<DL>
<DD>Set a friendly name for this context.
 Typically done during initialization of concrete context implementations.
 <p>Default is the object id of the context instance.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getDisplayName()"><!-- --></A><H3>
getDisplayName</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>getDisplayName</B>()</PRE>
<DL>
<DD>Return a friendly name for this context.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ApplicationContext.html#getDisplayName()">getDisplayName</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context">ApplicationContext</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>a display name for this context (never <code>null</code>)</DL>
</DD>
</DL>
<HR>

<A NAME="getParent()"><!-- --></A><H3>
getParent</H3>
<PRE>
public <A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context">ApplicationContext</A> <B>getParent</B>()</PRE>
<DL>
<DD>Return the parent context, or <code>null</code> if there is no parent
 (that is, this context is the root of the context hierarchy).
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ApplicationContext.html#getParent()">getParent</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context">ApplicationContext</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the parent context, or <code>null</code> if there is no parent</DL>
</DD>
</DL>
<HR>

<A NAME="getAutowireCapableBeanFactory()"><!-- --></A><H3>
getAutowireCapableBeanFactory</H3>
<PRE>
public <A HREF="../../../../org/springframework/beans/factory/config/AutowireCapableBeanFactory.html" title="interface in org.springframework.beans.factory.config">AutowireCapableBeanFactory</A> <B>getAutowireCapableBeanFactory</B>()
                                                         throws <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></PRE>
<DL>
<DD>Return this context's internal bean factory as AutowireCapableBeanFactory,
 if already available.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ApplicationContext.html#getAutowireCapableBeanFactory()">getAutowireCapableBeanFactory</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context">ApplicationContext</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the AutowireCapableBeanFactory for this context
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></CODE> - if the context does not support
 the AutowireCapableBeanFactory interface or does not hold an autowire-capable
 bean factory yet (usually if <code>refresh()</code> has never been called)<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBeanFactory()"><CODE>getBeanFactory()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getStartupDate()"><!-- --></A><H3>
getStartupDate</H3>
<PRE>
public long <B>getStartupDate</B>()</PRE>
<DL>
<DD>Return the timestamp (ms) when this context was first loaded.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ApplicationContext.html#getStartupDate()">getStartupDate</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context">ApplicationContext</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the timestamp (ms) when this context was first loaded</DL>
</DD>
</DL>
<HR>

<A NAME="publishEvent(org.springframework.context.ApplicationEvent)"><!-- --></A><H3>
publishEvent</H3>
<PRE>
public void <B>publishEvent</B>(<A HREF="../../../../org/springframework/context/ApplicationEvent.html" title="class in org.springframework.context">ApplicationEvent</A>&nbsp;event)</PRE>
<DL>
<DD>Publish the given event to all listeners.
 <p>Note: Listeners get initialized after the MessageSource, to be able
 to access it within listener implementations. Thus, MessageSource
 implementations cannot publish events.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ApplicationEventPublisher.html#publishEvent(org.springframework.context.ApplicationEvent)">publishEvent</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ApplicationEventPublisher.html" title="interface in org.springframework.context">ApplicationEventPublisher</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>event</CODE> - the event to publish (may be application-specific or a
 standard framework event)<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/web/context/support/RequestHandledEvent.html" title="class in org.springframework.web.context.support"><CODE>RequestHandledEvent</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getResourcePatternResolver()"><!-- --></A><H3>
getResourcePatternResolver</H3>
<PRE>
protected <A HREF="../../../../org/springframework/core/io/support/ResourcePatternResolver.html" title="interface in org.springframework.core.io.support">ResourcePatternResolver</A> <B>getResourcePatternResolver</B>()</PRE>
<DL>
<DD>Return the ResourcePatternResolver to use for resolving location patterns
 into Resource instances. Default is a
 <A HREF="../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html" title="class in org.springframework.core.io.support"><CODE>PathMatchingResourcePatternResolver</CODE></A>,
 supporting Ant-style location patterns.
 <p>Can be overridden in subclasses, for extended resolution strategies,
 for example in a web environment.
 <p><b>Do not call this when needing to resolve a location pattern.</b>
 Call the context's <code>getResources</code> method instead, which
 will delegate to the ResourcePatternResolver.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the ResourcePatternResolver for this context<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getResources(java.lang.String)"><CODE>getResources(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html" title="class in org.springframework.core.io.support"><CODE>PathMatchingResourcePatternResolver</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setParent(org.springframework.context.ApplicationContext)"><!-- --></A><H3>
setParent</H3>
<PRE>
public void <B>setParent</B>(<A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context">ApplicationContext</A>&nbsp;parent)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#setParent(org.springframework.context.ApplicationContext)">ConfigurableApplicationContext</A></CODE></B></DD>
<DD>Set the parent of this application context.
 <p>Note that the parent shouldn't be changed: It should only be set outside
 a constructor if it isn't available when an object of this class is created,
 for example in case of WebApplicationContext setup.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#setParent(org.springframework.context.ApplicationContext)">setParent</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html" title="interface in org.springframework.context">ConfigurableApplicationContext</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>parent</CODE> - the parent context<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/web/context/ConfigurableWebApplicationContext.html" title="interface in org.springframework.web.context"><CODE>ConfigurableWebApplicationContext</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="addBeanFactoryPostProcessor(org.springframework.beans.factory.config.BeanFactoryPostProcessor)"><!-- --></A><H3>
addBeanFactoryPostProcessor</H3>
<PRE>
public void <B>addBeanFactoryPostProcessor</B>(<A HREF="../../../../org/springframework/beans/factory/config/BeanFactoryPostProcessor.html" title="interface in org.springframework.beans.factory.config">BeanFactoryPostProcessor</A>&nbsp;beanFactoryPostProcessor)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#addBeanFactoryPostProcessor(org.springframework.beans.factory.config.BeanFactoryPostProcessor)">ConfigurableApplicationContext</A></CODE></B></DD>
<DD>Add a new BeanFactoryPostProcessor that will get applied to the internal
 bean factory of this application context on refresh, before any of the
 bean definitions get evaluated. To be invoked during context configuration.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#addBeanFactoryPostProcessor(org.springframework.beans.factory.config.BeanFactoryPostProcessor)">addBeanFactoryPostProcessor</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html" title="interface in org.springframework.context">ConfigurableApplicationContext</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanFactoryPostProcessor</CODE> - the factory processor to register</DL>
</DD>
</DL>
<HR>

<A NAME="getBeanFactoryPostProcessors()"><!-- --></A><H3>
getBeanFactoryPostProcessors</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../org/springframework/beans/factory/config/BeanFactoryPostProcessor.html" title="interface in org.springframework.beans.factory.config">BeanFactoryPostProcessor</A>&gt; <B>getBeanFactoryPostProcessors</B>()</PRE>
<DL>
<DD>Return the list of BeanFactoryPostProcessors that will get applied
 to the internal BeanFactory.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="addApplicationListener(org.springframework.context.ApplicationListener)"><!-- --></A><H3>
addApplicationListener</H3>
<PRE>
public void <B>addApplicationListener</B>(<A HREF="../../../../org/springframework/context/ApplicationListener.html" title="interface in org.springframework.context">ApplicationListener</A>&nbsp;listener)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#addApplicationListener(org.springframework.context.ApplicationListener)">ConfigurableApplicationContext</A></CODE></B></DD>
<DD>Add a new ApplicationListener that will be notified on context events
 such as context refresh and context shutdown.
 <p>Note that any ApplicationListener registered here will be applied
 on refresh if the context is not active yet, or on the fly with the
 current event multicaster in case of a context that is already active.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#addApplicationListener(org.springframework.context.ApplicationListener)">addApplicationListener</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html" title="interface in org.springframework.context">ConfigurableApplicationContext</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>listener</CODE> - the ApplicationListener to register<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/event/ContextRefreshedEvent.html" title="class in org.springframework.context.event"><CODE>ContextRefreshedEvent</CODE></A>, 
<A HREF="../../../../org/springframework/context/event/ContextClosedEvent.html" title="class in org.springframework.context.event"><CODE>ContextClosedEvent</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getApplicationListeners()"><!-- --></A><H3>
getApplicationListeners</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Collection.html?is-external=true" title="class or interface in java.util">Collection</A>&lt;<A HREF="../../../../org/springframework/context/ApplicationListener.html" title="interface in org.springframework.context">ApplicationListener</A>&gt; <B>getApplicationListeners</B>()</PRE>
<DL>
<DD>Return the list of statically specified ApplicationListeners.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="refresh()"><!-- --></A><H3>
refresh</H3>
<PRE>
public void <B>refresh</B>()
             throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A>,
                    <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#refresh()">ConfigurableApplicationContext</A></CODE></B></DD>
<DD>Load or refresh the persistent representation of the configuration,
 which might an XML file, properties file, or relational database schema.
 <p>As this is a startup method, it should destroy already created singletons
 if it fails, to avoid dangling resources. In other words, after invocation
 of that method, either all or no singletons at all should be instantiated.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#refresh()">refresh</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html" title="interface in org.springframework.context">ConfigurableApplicationContext</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if the bean factory could not be initialized
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></CODE> - if already initialized and multiple refresh
 attempts are not supported</DL>
</DD>
</DL>
<HR>

<A NAME="prepareRefresh()"><!-- --></A><H3>
prepareRefresh</H3>
<PRE>
protected void <B>prepareRefresh</B>()</PRE>
<DL>
<DD>Prepare this context for refreshing, setting its startup date and
 active flag.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="obtainFreshBeanFactory()"><!-- --></A><H3>
obtainFreshBeanFactory</H3>
<PRE>
protected <A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A> <B>obtainFreshBeanFactory</B>()</PRE>
<DL>
<DD>Tell the subclass to refresh the internal bean factory.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the fresh BeanFactory instance<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#refreshBeanFactory()"><CODE>refreshBeanFactory()</CODE></A>, 
<A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBeanFactory()"><CODE>getBeanFactory()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="prepareBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"><!-- --></A><H3>
prepareBeanFactory</H3>
<PRE>
protected void <B>prepareBeanFactory</B>(<A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A>&nbsp;beanFactory)</PRE>
<DL>
<DD>Configure the factory's standard context characteristics,
 such as the context's ClassLoader and post-processors.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanFactory</CODE> - the BeanFactory to configure</DL>
</DD>
</DL>
<HR>

<A NAME="postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"><!-- --></A><H3>
postProcessBeanFactory</H3>
<PRE>
protected void <B>postProcessBeanFactory</B>(<A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A>&nbsp;beanFactory)</PRE>
<DL>
<DD>Modify the application context's internal bean factory after its standard
 initialization. All bean definitions will have been loaded, but no beans
 will have been instantiated yet. This allows for registering special
 BeanPostProcessors etc in certain ApplicationContext implementations.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanFactory</CODE> - the bean factory used by the application context</DL>
</DD>
</DL>
<HR>

<A NAME="invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"><!-- --></A><H3>
invokeBeanFactoryPostProcessors</H3>
<PRE>
protected void <B>invokeBeanFactoryPostProcessors</B>(<A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A>&nbsp;beanFactory)</PRE>
<DL>
<DD>Instantiate and invoke all registered BeanFactoryPostProcessor beans,
 respecting explicit order if given.
 <p>Must be called before singleton instantiation.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"><!-- --></A><H3>
registerBeanPostProcessors</H3>
<PRE>
protected void <B>registerBeanPostProcessors</B>(<A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A>&nbsp;beanFactory)</PRE>
<DL>
<DD>Instantiate and invoke all registered BeanPostProcessor beans,
 respecting explicit order if given.
 <p>Must be called before any instantiation of application beans.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="initMessageSource()"><!-- --></A><H3>
initMessageSource</H3>
<PRE>
protected void <B>initMessageSource</B>()</PRE>
<DL>
<DD>Initialize the MessageSource.
 Use parent's if none defined in this context.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="initApplicationEventMulticaster()"><!-- --></A><H3>
initApplicationEventMulticaster</H3>
<PRE>
protected void <B>initApplicationEventMulticaster</B>()</PRE>
<DL>
<DD>Initialize the ApplicationEventMulticaster.
 Uses SimpleApplicationEventMulticaster if none defined in the context.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/event/SimpleApplicationEventMulticaster.html" title="class in org.springframework.context.event"><CODE>SimpleApplicationEventMulticaster</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="initLifecycleProcessor()"><!-- --></A><H3>
initLifecycleProcessor</H3>
<PRE>
protected void <B>initLifecycleProcessor</B>()</PRE>
<DL>
<DD>Initialize the LifecycleProcessor.
 Uses DefaultLifecycleProcessor if none defined in the context.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/support/DefaultLifecycleProcessor.html" title="class in org.springframework.context.support"><CODE>DefaultLifecycleProcessor</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="onRefresh()"><!-- --></A><H3>
onRefresh</H3>
<PRE>
protected void <B>onRefresh</B>()
                  throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD>Template method which can be overridden to add context-specific refresh work.
 Called on initialization of special beans, before instantiation of singletons.
 <p>This implementation is empty.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - in case of errors<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#refresh()"><CODE>refresh()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="registerListeners()"><!-- --></A><H3>
registerListeners</H3>
<PRE>
protected void <B>registerListeners</B>()</PRE>
<DL>
<DD>Add beans that implement ApplicationListener as listeners.
 Doesn't affect other listeners, which can be added without being beans.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="addListener(org.springframework.context.ApplicationListener)"><!-- --></A><H3>
addListener</H3>
<PRE>
<FONT SIZE="-1"><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Deprecated.html?is-external=true" title="class or interface in java.lang">@Deprecated</A>
</FONT>protected void <B>addListener</B>(<A HREF="../../../../org/springframework/context/ApplicationListener.html" title="interface in org.springframework.context">ApplicationListener</A>&nbsp;listener)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>as of Spring 3.0, in favor of <A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#addApplicationListener(org.springframework.context.ApplicationListener)"><CODE>addApplicationListener(org.springframework.context.ApplicationListener)</CODE></A></I>
<P>
<DD>Subclasses can invoke this method to register a listener.
 Any beans in the context that are listeners are automatically added.
 <p>Note: This method only works within an active application context,
 i.e. when an ApplicationEventMulticaster is already available. Generally
 prefer the use of <A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#addApplicationListener(org.springframework.context.ApplicationListener)"><CODE>addApplicationListener(org.springframework.context.ApplicationListener)</CODE></A> which is more flexible.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>listener</CODE> - the listener to register</DL>
</DD>
</DL>
<HR>

<A NAME="finishBeanFactoryInitialization(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"><!-- --></A><H3>
finishBeanFactoryInitialization</H3>
<PRE>
protected void <B>finishBeanFactoryInitialization</B>(<A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A>&nbsp;beanFactory)</PRE>
<DL>
<DD>Finish the initialization of this context's bean factory,
 initializing all remaining singleton beans.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="finishRefresh()"><!-- --></A><H3>
finishRefresh</H3>
<PRE>
protected void <B>finishRefresh</B>()</PRE>
<DL>
<DD>Finish the refresh of this context, invoking the LifecycleProcessor's
 onRefresh() method and publishing the
 <A HREF="../../../../org/springframework/context/event/ContextRefreshedEvent.html" title="class in org.springframework.context.event"><CODE>ContextRefreshedEvent</CODE></A>.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="cancelRefresh(org.springframework.beans.BeansException)"><!-- --></A><H3>
cancelRefresh</H3>
<PRE>
protected void <B>cancelRefresh</B>(<A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A>&nbsp;ex)</PRE>
<DL>
<DD>Cancel this context's refresh attempt, resetting the <code>active</code> flag
 after an exception got thrown.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>ex</CODE> - the exception that led to the cancellation</DL>
</DD>
</DL>
<HR>

<A NAME="registerShutdownHook()"><!-- --></A><H3>
registerShutdownHook</H3>
<PRE>
public void <B>registerShutdownHook</B>()</PRE>
<DL>
<DD>Register a shutdown hook with the JVM runtime, closing this context
 on JVM shutdown unless it has already been closed at that time.
 <p>Delegates to <code>doClose()</code> for the actual closing procedure.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#registerShutdownHook()">registerShutdownHook</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html" title="interface in org.springframework.context">ConfigurableApplicationContext</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Runtime.html?is-external=true#addShutdownHook(java.lang.Thread)" title="class or interface in java.lang"><CODE>Runtime.addShutdownHook(java.lang.Thread)</CODE></A>, 
<A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#close()"><CODE>close()</CODE></A>, 
<A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#doClose()"><CODE>doClose()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="destroy()"><!-- --></A><H3>
destroy</H3>
<PRE>
public void <B>destroy</B>()</PRE>
<DL>
<DD>DisposableBean callback for destruction of this instance.
 Only called when the ApplicationContext itself is running
 as a bean in another BeanFactory or ApplicationContext,
 which is rather unusual.
 <p>The <code>close</code> method is the native way to
 shut down an ApplicationContext.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/DisposableBean.html#destroy()">destroy</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/DisposableBean.html" title="interface in org.springframework.beans.factory">DisposableBean</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#close()"><CODE>close()</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/access/SingletonBeanFactoryLocator.html" title="class in org.springframework.beans.factory.access"><CODE>SingletonBeanFactoryLocator</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="close()"><!-- --></A><H3>
close</H3>
<PRE>
public void <B>close</B>()</PRE>
<DL>
<DD>Close this application context, destroying all beans in its bean factory.
 <p>Delegates to <code>doClose()</code> for the actual closing procedure.
 Also removes a JVM shutdown hook, if registered, as it's not needed anymore.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#close()">close</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html" title="interface in org.springframework.context">ConfigurableApplicationContext</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#doClose()"><CODE>doClose()</CODE></A>, 
<A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#registerShutdownHook()"><CODE>registerShutdownHook()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="doClose()"><!-- --></A><H3>
doClose</H3>
<PRE>
protected void <B>doClose</B>()</PRE>
<DL>
<DD>Actually performs context closing: publishes a ContextClosedEvent and
 destroys the singletons in the bean factory of this application context.
 <p>Called by both <code>close()</code> and a JVM shutdown hook, if any.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/event/ContextClosedEvent.html" title="class in org.springframework.context.event"><CODE>ContextClosedEvent</CODE></A>, 
<A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#destroyBeans()"><CODE>destroyBeans()</CODE></A>, 
<A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#close()"><CODE>close()</CODE></A>, 
<A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#registerShutdownHook()"><CODE>registerShutdownHook()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="destroyBeans()"><!-- --></A><H3>
destroyBeans</H3>
<PRE>
protected void <B>destroyBeans</B>()</PRE>
<DL>
<DD>Template method for destroying all beans that this context manages.
 The default implementation destroy all cached singletons in this context,
 invoking <code>DisposableBean.destroy()</code> and/or the specified
 "destroy-method".
 <p>Can be overridden to add context-specific bean destruction steps
 right before or right after standard singleton destruction,
 while the context's BeanFactory is still active.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#getBeanFactory()"><CODE>getBeanFactory()</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#destroySingletons()"><CODE>ConfigurableBeanFactory.destroySingletons()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="onClose()"><!-- --></A><H3>
onClose</H3>
<PRE>
protected void <B>onClose</B>()</PRE>
<DL>
<DD>Template method which can be overridden to add context-specific shutdown work.
 The default implementation is empty.
 <p>Called at the end of <A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#doClose()"><CODE>doClose()</CODE></A>'s shutdown procedure, after
 this context's BeanFactory has been closed. If custom shutdown logic
 needs to execute while the BeanFactory is still active, override
 the <A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#destroyBeans()"><CODE>destroyBeans()</CODE></A> method instead.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isActive()"><!-- --></A><H3>
isActive</H3>
<PRE>
public boolean <B>isActive</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#isActive()">ConfigurableApplicationContext</A></CODE></B></DD>
<DD>Determine whether this application context is active, that is,
 whether it has been refreshed at least once and has not been closed yet.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#isActive()">isActive</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html" title="interface in org.springframework.context">ConfigurableApplicationContext</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>whether the context is still active<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#refresh()"><CODE>ConfigurableApplicationContext.refresh()</CODE></A>, 
<A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#close()"><CODE>ConfigurableApplicationContext.close()</CODE></A>, 
<A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#getBeanFactory()"><CODE>ConfigurableApplicationContext.getBeanFactory()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getBean(java.lang.String)"><!-- --></A><H3>
getBean</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>getBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
               throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)">BeanFactory</A></CODE></B></DD>
<DD>Return an instance, which may be shared or independent, of the specified bean.
 <p>This method allows a Spring BeanFactory to be used as a replacement for the
 Singleton or Prototype design pattern. Callers may retain references to
 returned objects in the case of Singleton beans.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)">getBean</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to retrieve
<DT><B>Returns:</B><DD>an instance of the bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean definition
 with the specified name
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if the bean could not be obtained</DL>
</DD>
</DL>
<HR>

<A NAME="getBean(java.lang.String, java.lang.Class)"><!-- --></A><H3>
getBean</H3>
<PRE>
public &lt;T&gt; T <B>getBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
                     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)
          throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String, java.lang.Class)">BeanFactory</A></CODE></B></DD>
<DD>Return an instance, which may be shared or independent, of the specified bean.
 <p>Behaves the same as <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(String)</CODE></A>, but provides a measure of type
 safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the
 required type. This means that ClassCastException can't be thrown on casting
 the result correctly, as can happen with <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(String)</CODE></A>.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String, java.lang.Class)">getBean</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to retrieve<DD><CODE>requiredType</CODE> - type the bean must match. Can be an interface or superclass
 of the actual class, or <code>null</code> for any match. For example, if the value
 is <code>Object.class</code>, this method will succeed whatever the class of the
 returned instance.
<DT><B>Returns:</B><DD>an instance of the bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there's no such bean definition
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanNotOfRequiredTypeException.html" title="class in org.springframework.beans.factory">BeanNotOfRequiredTypeException</A></CODE> - if the bean is not of the required type
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if the bean could not be created</DL>
</DD>
</DL>
<HR>

<A NAME="getBean(java.lang.Class)"><!-- --></A><H3>
getBean</H3>
<PRE>
public &lt;T&gt; T <B>getBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)
          throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.Class)">BeanFactory</A></CODE></B></DD>
<DD>Return the bean instance that uniquely matches the given object type, if any.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.Class)">getBean</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>requiredType</CODE> - type the bean must match; can be an interface or superclass.
 null is disallowed.
 <p>This method goes into <A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>ListableBeanFactory</CODE></A> by-type lookup territory
 but may also be translated into a conventional by-name lookup based on the name
 of the given type. For more extensive retrieval operations across sets of beans,
 use <A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>ListableBeanFactory</CODE></A> and/or <A HREF="../../../../org/springframework/beans/factory/BeanFactoryUtils.html" title="class in org.springframework.beans.factory"><CODE>BeanFactoryUtils</CODE></A>.
<DT><B>Returns:</B><DD>an instance of the single bean matching the required type
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is not exactly one matching bean found
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE><DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>ListableBeanFactory</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getBean(java.lang.String, java.lang.Object...)"><!-- --></A><H3>
getBean</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>getBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
                      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
               throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String, java.lang.Object...)">BeanFactory</A></CODE></B></DD>
<DD>Return an instance, which may be shared or independent, of the specified bean.
 <p>Allows for specifying explicit constructor arguments / factory method arguments,
 overriding the specified default arguments (if any) in the bean definition.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String, java.lang.Object...)">getBean</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to retrieve<DD><CODE>args</CODE> - arguments to use if creating a prototype using explicit arguments to a
 static factory method. It is invalid to use a non-null args value in any other case.
<DT><B>Returns:</B><DD>an instance of the bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there's no such bean definition
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanDefinitionStoreException.html" title="class in org.springframework.beans.factory">BeanDefinitionStoreException</A></CODE> - if arguments have been given but
 the affected bean isn't a prototype
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if the bean could not be created</DL>
</DD>
</DL>
<HR>

<A NAME="containsBean(java.lang.String)"><!-- --></A><H3>
containsBean</H3>
<PRE>
public boolean <B>containsBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#containsBean(java.lang.String)">BeanFactory</A></CODE></B></DD>
<DD>Does this bean factory contain a bean with the given name? More specifically,
 is <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> able to obtain a bean instance for the given name?
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#containsBean(java.lang.String)">containsBean</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>whether a bean with the given name is defined</DL>
</DD>
</DL>
<HR>

<A NAME="isSingleton(java.lang.String)"><!-- --></A><H3>
isSingleton</H3>
<PRE>
public boolean <B>isSingleton</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
                    throws <A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isSingleton(java.lang.String)">BeanFactory</A></CODE></B></DD>
<DD>Is this bean a shared singleton? That is, will <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> always
 return the same instance?
 <p>Note: This method returning <code>false</code> does not clearly indicate
 independent instances. It indicates non-singleton instances, which may correspond
 to a scoped bean as well. Use the <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isPrototype(java.lang.String)"><CODE>BeanFactory.isPrototype(java.lang.String)</CODE></A> operation to explicitly
 check for independent instances.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isSingleton(java.lang.String)">isSingleton</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>whether this bean corresponds to a singleton instance
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isPrototype(java.lang.String)"><CODE>BeanFactory.isPrototype(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isPrototype(java.lang.String)"><!-- --></A><H3>
isPrototype</H3>
<PRE>
public boolean <B>isPrototype</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
                    throws <A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isPrototype(java.lang.String)">BeanFactory</A></CODE></B></DD>
<DD>Is this bean a prototype? That is, will <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> always return
 independent instances?
 <p>Note: This method returning <code>false</code> does not clearly indicate
 a singleton object. It indicates non-independent instances, which may correspond
 to a scoped bean as well. Use the <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isSingleton(java.lang.String)"><CODE>BeanFactory.isSingleton(java.lang.String)</CODE></A> operation to explicitly
 check for a shared singleton instance.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isPrototype(java.lang.String)">isPrototype</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>whether this bean will always deliver independent instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isSingleton(java.lang.String)"><CODE>BeanFactory.isSingleton(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isTypeMatch(java.lang.String, java.lang.Class)"><!-- --></A><H3>
isTypeMatch</H3>
<PRE>
public boolean <B>isTypeMatch</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
                           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;targetType)
                    throws <A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isTypeMatch(java.lang.String, java.lang.Class)">BeanFactory</A></CODE></B></DD>
<DD>Check whether the bean with the given name matches the specified type.
 More specifically, check whether a <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> call for the given name
 would return an object that is assignable to the specified target type.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isTypeMatch(java.lang.String, java.lang.Class)">isTypeMatch</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query<DD><CODE>targetType</CODE> - the type to match against
<DT><B>Returns:</B><DD><code>true</code> if the bean type matches,
 <code>false</code> if it doesn't match or cannot be determined yet
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getType(java.lang.String)"><CODE>BeanFactory.getType(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getType(java.lang.String)"><!-- --></A><H3>
getType</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;?&gt; <B>getType</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
                 throws <A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getType(java.lang.String)">BeanFactory</A></CODE></B></DD>
<DD>Determine the type of the bean with the given name. More specifically,
 determine the type of object that <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> would return for the given name.
 <p>For a <A HREF="../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory"><CODE>FactoryBean</CODE></A>, return the type of object that the FactoryBean creates,
 as exposed by <A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#getObjectType()"><CODE>FactoryBean.getObjectType()</CODE></A>.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getType(java.lang.String)">getType</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>the type of the bean, or <code>null</code> if not determinable
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isTypeMatch(java.lang.String, java.lang.Class)"><CODE>BeanFactory.isTypeMatch(java.lang.String, java.lang.Class)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getAliases(java.lang.String)"><!-- --></A><H3>
getAliases</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getAliases</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getAliases(java.lang.String)">BeanFactory</A></CODE></B></DD>
<DD>Return the aliases for the given bean name, if any.
 All of those aliases point to the same bean when used in a <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> call.
 <p>If the given name is an alias, the corresponding original bean name
 and other aliases (if any) will be returned, with the original bean name
 being the first element in the array.
 <p>Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getAliases(java.lang.String)">getAliases</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the bean name to check for aliases
<DT><B>Returns:</B><DD>the aliases, or an empty array if none<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="containsBeanDefinition(java.lang.String)"><!-- --></A><H3>
containsBeanDefinition</H3>
<PRE>
public boolean <B>containsBeanDefinition</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#containsBeanDefinition(java.lang.String)">ListableBeanFactory</A></CODE></B></DD>
<DD>Check if this bean factory contains a bean definition with the given name.
 <p>Does not consider any hierarchy this factory may participate in,
 and ignores any singleton beans that have been registered by
 other means than bean definitions.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#containsBeanDefinition(java.lang.String)">containsBeanDefinition</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory">ListableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean to look for
<DT><B>Returns:</B><DD>if this bean factory contains a bean definition with the given name<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#containsBean(java.lang.String)"><CODE>BeanFactory.containsBean(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getBeanDefinitionCount()"><!-- --></A><H3>
getBeanDefinitionCount</H3>
<PRE>
public int <B>getBeanDefinitionCount</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeanDefinitionCount()">ListableBeanFactory</A></CODE></B></DD>
<DD>Return the number of beans defined in the factory.
 <p>Does not consider any hierarchy this factory may participate in,
 and ignores any singleton beans that have been registered by
 other means than bean definitions.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeanDefinitionCount()">getBeanDefinitionCount</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory">ListableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the number of beans defined in the factory</DL>
</DD>
</DL>
<HR>

<A NAME="getBeanDefinitionNames()"><!-- --></A><H3>
getBeanDefinitionNames</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getBeanDefinitionNames</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeanDefinitionNames()">ListableBeanFactory</A></CODE></B></DD>
<DD>Return the names of all beans defined in this factory.
 <p>Does not consider any hierarchy this factory may participate in,
 and ignores any singleton beans that have been registered by
 other means than bean definitions.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeanDefinitionNames()">getBeanDefinitionNames</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory">ListableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the names of all beans defined in this factory,
 or an empty array if none defined</DL>
</DD>
</DL>
<HR>

<A NAME="getBeanNamesForType(java.lang.Class)"><!-- --></A><H3>
getBeanNamesForType</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getBeanNamesForType</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;type)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeanNamesForType(java.lang.Class)">ListableBeanFactory</A></CODE></B></DD>
<DD>Return the names of beans matching the given type (including subclasses),
 judging from either bean definitions or the value of <code>getObjectType</code>
 in the case of FactoryBeans.
 <p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>
 check nested beans which might match the specified type as well.
 <p>Does consider objects created by FactoryBeans, which means that FactoryBeans
 will get initialized. If the object created by the FactoryBean doesn't match,
 the raw FactoryBean itself will be matched against the type.
 <p>Does not consider any hierarchy this factory may participate in.
 Use BeanFactoryUtils' <code>beanNamesForTypeIncludingAncestors</code>
 to include beans in ancestor factories too.
 <p>Note: Does <i>not</i> ignore singleton beans that have been registered
 by other means than bean definitions.
 <p>This version of <code>getBeanNamesForType</code> matches all kinds of beans,
 be it singletons, prototypes, or FactoryBeans. In most implementations, the
 result will be the same as for <code>getBeanNamesOfType(type, true, true)</code>.
 <p>Bean names returned by this method should always return bean names <i>in the
 order of definition</i> in the backend configuration, as far as possible.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeanNamesForType(java.lang.Class)">getBeanNamesForType</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory">ListableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>type</CODE> - the class or interface to match, or <code>null</code> for all bean names
<DT><B>Returns:</B><DD>the names of beans (or objects created by FactoryBeans) matching
 the given object type (including subclasses), or an empty array if none<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#getObjectType()"><CODE>FactoryBean.getObjectType()</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanFactoryUtils.html#beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class)"><CODE>BeanFactoryUtils.beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getBeanNamesForType(java.lang.Class, boolean, boolean)"><!-- --></A><H3>
getBeanNamesForType</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getBeanNamesForType</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;type,
                                    boolean&nbsp;includeNonSingletons,
                                    boolean&nbsp;allowEagerInit)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeanNamesForType(java.lang.Class, boolean, boolean)">ListableBeanFactory</A></CODE></B></DD>
<DD>Return the names of beans matching the given type (including subclasses),
 judging from either bean definitions or the value of <code>getObjectType</code>
 in the case of FactoryBeans.
 <p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>
 check nested beans which might match the specified type as well.
 <p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,
 which means that FactoryBeans will get initialized. If the object created by the
 FactoryBean doesn't match, the raw FactoryBean itself will be matched against the
 type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked
 (which doesn't require initialization of each FactoryBean).
$        * <p>Does not consider any hierarchy this factory may participate in.
 Use BeanFactoryUtils' <code>beanNamesForTypeIncludingAncestors</code>
 to include beans in ancestor factories too.
 <p>Note: Does <i>not</i> ignore singleton beans that have been registered
 by other means than bean definitions.
 <p>Bean names returned by this method should always return bean names <i>in the
 order of definition</i> in the backend configuration, as far as possible.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeanNamesForType(java.lang.Class, boolean, boolean)">getBeanNamesForType</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory">ListableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>type</CODE> - the class or interface to match, or <code>null</code> for all bean names<DD><CODE>includeNonSingletons</CODE> - whether to include prototype or scoped beans too
 or just singletons (also applies to FactoryBeans)<DD><CODE>allowEagerInit</CODE> - whether to initialize <i>lazy-init singletons</i> and
 <i>objects created by FactoryBeans</i> (or by factory methods with a
 "factory-bean" reference) for the type check. Note that FactoryBeans need to be
 eagerly initialized to determine their type: So be aware that passing in "true"
 for this flag will initialize FactoryBeans and "factory-bean" references.
<DT><B>Returns:</B><DD>the names of beans (or objects created by FactoryBeans) matching
 the given object type (including subclasses), or an empty array if none<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#getObjectType()"><CODE>FactoryBean.getObjectType()</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanFactoryUtils.html#beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class, boolean, boolean)"><CODE>BeanFactoryUtils.beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getBeansOfType(java.lang.Class)"><!-- --></A><H3>
getBeansOfType</H3>
<PRE>
public &lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,T&gt; <B>getBeansOfType</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;type)
                             throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeansOfType(java.lang.Class)">ListableBeanFactory</A></CODE></B></DD>
<DD>Return the bean instances that match the given object type (including
 subclasses), judging from either bean definitions or the value of
 <code>getObjectType</code> in the case of FactoryBeans.
 <p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>
 check nested beans which might match the specified type as well.
 <p>Does consider objects created by FactoryBeans, which means that FactoryBeans
 will get initialized. If the object created by the FactoryBean doesn't match,
 the raw FactoryBean itself will be matched against the type.
 <p>Does not consider any hierarchy this factory may participate in.
 Use BeanFactoryUtils' <code>beansOfTypeIncludingAncestors</code>
 to include beans in ancestor factories too.
 <p>Note: Does <i>not</i> ignore singleton beans that have been registered
 by other means than bean definitions.
 <p>This version of getBeansOfType matches all kinds of beans, be it
 singletons, prototypes, or FactoryBeans. In most implementations, the
 result will be the same as for <code>getBeansOfType(type, true, true)</code>.
 <p>The Map returned by this method should always return bean names and
 corresponding bean instances <i>in the order of definition</i> in the
 backend configuration, as far as possible.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeansOfType(java.lang.Class)">getBeansOfType</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory">ListableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>type</CODE> - the class or interface to match, or <code>null</code> for all concrete beans
<DT><B>Returns:</B><DD>a Map with the matching beans, containing the bean names as
 keys and the corresponding bean instances as values
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if a bean could not be created<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#getObjectType()"><CODE>FactoryBean.getObjectType()</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanFactoryUtils.html#beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class)"><CODE>BeanFactoryUtils.beansOfTypeIncludingAncestors(ListableBeanFactory, Class)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getBeansOfType(java.lang.Class, boolean, boolean)"><!-- --></A><H3>
getBeansOfType</H3>
<PRE>
public &lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,T&gt; <B>getBeansOfType</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;type,
                                        boolean&nbsp;includeNonSingletons,
                                        boolean&nbsp;allowEagerInit)
                             throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeansOfType(java.lang.Class, boolean, boolean)">ListableBeanFactory</A></CODE></B></DD>
<DD>Return the bean instances that match the given object type (including
 subclasses), judging from either bean definitions or the value of
 <code>getObjectType</code> in the case of FactoryBeans.
 <p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>
 check nested beans which might match the specified type as well.
 <p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,
 which means that FactoryBeans will get initialized. If the object created by the
 FactoryBean doesn't match, the raw FactoryBean itself will be matched against the
 type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked
 (which doesn't require initialization of each FactoryBean).
 <p>Does not consider any hierarchy this factory may participate in.
 Use BeanFactoryUtils' <code>beansOfTypeIncludingAncestors</code>
 to include beans in ancestor factories too.
 <p>Note: Does <i>not</i> ignore singleton beans that have been registered
 by other means than bean definitions.
 <p>The Map returned by this method should always return bean names and
 corresponding bean instances <i>in the order of definition</i> in the
 backend configuration, as far as possible.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeansOfType(java.lang.Class, boolean, boolean)">getBeansOfType</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory">ListableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>type</CODE> - the class or interface to match, or <code>null</code> for all concrete beans<DD><CODE>includeNonSingletons</CODE> - whether to include prototype or scoped beans too
 or just singletons (also applies to FactoryBeans)<DD><CODE>allowEagerInit</CODE> - whether to initialize <i>lazy-init singletons</i> and
 <i>objects created by FactoryBeans</i> (or by factory methods with a
 "factory-bean" reference) for the type check. Note that FactoryBeans need to be
 eagerly initialized to determine their type: So be aware that passing in "true"
 for this flag will initialize FactoryBeans and "factory-bean" references.
<DT><B>Returns:</B><DD>a Map with the matching beans, containing the bean names as
 keys and the corresponding bean instances as values
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if a bean could not be created<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#getObjectType()"><CODE>FactoryBean.getObjectType()</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanFactoryUtils.html#beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class, boolean, boolean)"><CODE>BeanFactoryUtils.beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getBeansWithAnnotation(java.lang.Class)"><!-- --></A><H3>
getBeansWithAnnotation</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt; <B>getBeansWithAnnotation</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;? extends <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/annotation/Annotation.html?is-external=true" title="class or interface in java.lang.annotation">Annotation</A>&gt;&nbsp;annotationType)
                                          throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeansWithAnnotation(java.lang.Class)">ListableBeanFactory</A></CODE></B></DD>
<DD>Find all beans whose <code>Class</code> has the supplied <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/annotation/Annotation.html?is-external=true" title="class or interface in java.lang.annotation"><CODE>Annotation</CODE></A> type.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeansWithAnnotation(java.lang.Class)">getBeansWithAnnotation</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory">ListableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>annotationType</CODE> - the type of annotation to look for
<DT><B>Returns:</B><DD>a Map with the matching beans, containing the bean names as
 keys and the corresponding bean instances as values
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if a bean could not be created</DL>
</DD>
</DL>
<HR>

<A NAME="findAnnotationOnBean(java.lang.String, java.lang.Class)"><!-- --></A><H3>
findAnnotationOnBean</H3>
<PRE>
public &lt;A extends <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/annotation/Annotation.html?is-external=true" title="class or interface in java.lang.annotation">Annotation</A>&gt; A <B>findAnnotationOnBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                                                     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;A&gt;&nbsp;annotationType)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#findAnnotationOnBean(java.lang.String, java.lang.Class)">ListableBeanFactory</A></CODE></B></DD>
<DD>Find a <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/annotation/Annotation.html?is-external=true" title="class or interface in java.lang.annotation"><CODE>Annotation</CODE></A> of <code>annotationType</code> on the specified
 bean, traversing its interfaces and super classes if no annotation can be
 found on the given class itself.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#findAnnotationOnBean(java.lang.String, java.lang.Class)">findAnnotationOnBean</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory">ListableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean to look for annotations on<DD><CODE>annotationType</CODE> - the annotation class to look for
<DT><B>Returns:</B><DD>the annotation of the given type found, or <code>null</code></DL>
</DD>
</DL>
<HR>

<A NAME="getParentBeanFactory()"><!-- --></A><H3>
getParentBeanFactory</H3>
<PRE>
public <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A> <B>getParentBeanFactory</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html#getParentBeanFactory()">HierarchicalBeanFactory</A></CODE></B></DD>
<DD>Return the parent bean factory, or <code>null</code> if there is none.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html#getParentBeanFactory()">getParentBeanFactory</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html" title="interface in org.springframework.beans.factory">HierarchicalBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="containsLocalBean(java.lang.String)"><!-- --></A><H3>
containsLocalBean</H3>
<PRE>
public boolean <B>containsLocalBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html#containsLocalBean(java.lang.String)">HierarchicalBeanFactory</A></CODE></B></DD>
<DD>Return whether the local bean factory contains a bean of the given name,
 ignoring beans defined in ancestor contexts.
 <p>This is an alternative to <code>containsBean</code>, ignoring a bean
 of the given name from an ancestor bean factory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html#containsLocalBean(java.lang.String)">containsLocalBean</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html" title="interface in org.springframework.beans.factory">HierarchicalBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>whether a bean with the given name is defined in the local factory<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#containsBean(java.lang.String)"><CODE>BeanFactory.containsBean(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getInternalParentBeanFactory()"><!-- --></A><H3>
getInternalParentBeanFactory</H3>
<PRE>
protected <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A> <B>getInternalParentBeanFactory</B>()</PRE>
<DL>
<DD>Return the internal bean factory of the parent context if it implements
 ConfigurableApplicationContext; else, return the parent context itself.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#getBeanFactory()"><CODE>ConfigurableApplicationContext.getBeanFactory()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)"><!-- --></A><H3>
getMessage</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>getMessage</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;code,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;defaultMessage,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Locale.html?is-external=true" title="class or interface in java.util">Locale</A>&nbsp;locale)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/context/MessageSource.html#getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)">MessageSource</A></CODE></B></DD>
<DD>Try to resolve the message. Return default message if no message was found.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/MessageSource.html#getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)">getMessage</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/MessageSource.html" title="interface in org.springframework.context">MessageSource</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>code</CODE> - the code to lookup up, such as 'calculator.noRateSet'. Users of
 this class are encouraged to base message names on the relevant fully
 qualified class name, thus avoiding conflict and ensuring maximum clarity.<DD><CODE>args</CODE> - array of arguments that will be filled in for params within
 the message (params look like "{0}", "{1,date}", "{2,time}" within a message),
 or <code>null</code> if none.<DD><CODE>defaultMessage</CODE> - String to return if the lookup fails<DD><CODE>locale</CODE> - the Locale in which to do the lookup
<DT><B>Returns:</B><DD>the resolved message if the lookup was successful;
 otherwise the default message passed as a parameter<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/text/MessageFormat.html?is-external=true" title="class or interface in java.text"><CODE>MessageFormat</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getMessage(java.lang.String, java.lang.Object[], java.util.Locale)"><!-- --></A><H3>
getMessage</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>getMessage</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;code,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Locale.html?is-external=true" title="class or interface in java.util">Locale</A>&nbsp;locale)
                  throws <A HREF="../../../../org/springframework/context/NoSuchMessageException.html" title="class in org.springframework.context">NoSuchMessageException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/context/MessageSource.html#getMessage(java.lang.String, java.lang.Object[], java.util.Locale)">MessageSource</A></CODE></B></DD>
<DD>Try to resolve the message. Treat as an error if the message can't be found.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/MessageSource.html#getMessage(java.lang.String, java.lang.Object[], java.util.Locale)">getMessage</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/MessageSource.html" title="interface in org.springframework.context">MessageSource</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>code</CODE> - the code to lookup up, such as 'calculator.noRateSet'<DD><CODE>args</CODE> - Array of arguments that will be filled in for params within
 the message (params look like "{0}", "{1,date}", "{2,time}" within a message),
 or <code>null</code> if none.<DD><CODE>locale</CODE> - the Locale in which to do the lookup
<DT><B>Returns:</B><DD>the resolved message
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/context/NoSuchMessageException.html" title="class in org.springframework.context">NoSuchMessageException</A></CODE> - if the message wasn't found<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/text/MessageFormat.html?is-external=true" title="class or interface in java.text"><CODE>MessageFormat</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale)"><!-- --></A><H3>
getMessage</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>getMessage</B>(<A HREF="../../../../org/springframework/context/MessageSourceResolvable.html" title="interface in org.springframework.context">MessageSourceResolvable</A>&nbsp;resolvable,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Locale.html?is-external=true" title="class or interface in java.util">Locale</A>&nbsp;locale)
                  throws <A HREF="../../../../org/springframework/context/NoSuchMessageException.html" title="class in org.springframework.context">NoSuchMessageException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/context/MessageSource.html#getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale)">MessageSource</A></CODE></B></DD>
<DD>Try to resolve the message using all the attributes contained within the
 <code>MessageSourceResolvable</code> argument that was passed in.
 <p>NOTE: We must throw a <code>NoSuchMessageException</code> on this method
 since at the time of calling this method we aren't able to determine if the
 <code>defaultMessage</code> property of the resolvable is null or not.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/MessageSource.html#getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale)">getMessage</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/MessageSource.html" title="interface in org.springframework.context">MessageSource</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>resolvable</CODE> - value object storing attributes required to properly resolve a message<DD><CODE>locale</CODE> - the Locale in which to do the lookup
<DT><B>Returns:</B><DD>the resolved message
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/context/NoSuchMessageException.html" title="class in org.springframework.context">NoSuchMessageException</A></CODE> - if the message wasn't found<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/text/MessageFormat.html?is-external=true" title="class or interface in java.text"><CODE>MessageFormat</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getInternalParentMessageSource()"><!-- --></A><H3>
getInternalParentMessageSource</H3>
<PRE>
protected <A HREF="../../../../org/springframework/context/MessageSource.html" title="interface in org.springframework.context">MessageSource</A> <B>getInternalParentMessageSource</B>()</PRE>
<DL>
<DD>Return the internal message source of the parent context if it is an
 AbstractApplicationContext too; else, return the parent context itself.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getResources(java.lang.String)"><!-- --></A><H3>
getResources</H3>
<PRE>
public <A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[] <B>getResources</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;locationPattern)
                        throws <A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/core/io/support/ResourcePatternResolver.html#getResources(java.lang.String)">ResourcePatternResolver</A></CODE></B></DD>
<DD>Resolve the given location pattern into Resource objects.
 <p>Overlapping resource entries that point to the same physical
 resource should be avoided, as far as possible. The result should
 have set semantics.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/core/io/support/ResourcePatternResolver.html#getResources(java.lang.String)">getResources</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/core/io/support/ResourcePatternResolver.html" title="interface in org.springframework.core.io.support">ResourcePatternResolver</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>locationPattern</CODE> - the location pattern to resolve
<DT><B>Returns:</B><DD>the corresponding Resource objects
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></CODE> - in case of I/O errors</DL>
</DD>
</DL>
<HR>

<A NAME="start()"><!-- --></A><H3>
start</H3>
<PRE>
public void <B>start</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/context/Lifecycle.html#start()">Lifecycle</A></CODE></B></DD>
<DD>Start this component.
 Should not throw an exception if the component is already running.
 <p>In the case of a container, this will propagate the start signal
 to all components that apply.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/Lifecycle.html#start()">start</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/Lifecycle.html" title="interface in org.springframework.context">Lifecycle</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="stop()"><!-- --></A><H3>
stop</H3>
<PRE>
public void <B>stop</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/context/Lifecycle.html#stop()">Lifecycle</A></CODE></B></DD>
<DD>Stop this component.
 Should not throw an exception if the component isn't started yet.
 <p>In the case of a container, this will propagate the stop signal
 to all components that apply.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/Lifecycle.html#stop()">stop</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/Lifecycle.html" title="interface in org.springframework.context">Lifecycle</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isRunning()"><!-- --></A><H3>
isRunning</H3>
<PRE>
public boolean <B>isRunning</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/context/Lifecycle.html#isRunning()">Lifecycle</A></CODE></B></DD>
<DD>Check whether this component is currently running.
 <p>In the case of a container, this will return <code>true</code>
 only if <i>all</i> components that apply are currently running.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/Lifecycle.html#isRunning()">isRunning</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/Lifecycle.html" title="interface in org.springframework.context">Lifecycle</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>whether the component is currently running</DL>
</DD>
</DL>
<HR>

<A NAME="refreshBeanFactory()"><!-- --></A><H3>
refreshBeanFactory</H3>
<PRE>
protected abstract void <B>refreshBeanFactory</B>()
                                    throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A>,
                                           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></PRE>
<DL>
<DD>Subclasses must implement this method to perform the actual configuration load.
 The method is invoked by <A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#refresh()"><CODE>refresh()</CODE></A> before any other initialization work.
 <p>A subclass will either create a new bean factory and hold a reference to it,
 or return a single BeanFactory instance that it holds. In the latter case, it will
 usually throw an IllegalStateException if refreshing the context more than once.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if initialization of the bean factory failed
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></CODE> - if already initialized and multiple refresh
 attempts are not supported</DL>
</DD>
</DL>
<HR>

<A NAME="closeBeanFactory()"><!-- --></A><H3>
closeBeanFactory</H3>
<PRE>
protected abstract void <B>closeBeanFactory</B>()</PRE>
<DL>
<DD>Subclasses must implement this method to release their internal bean factory.
 This method gets invoked by <A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#close()"><CODE>close()</CODE></A> after all other shutdown work.
 <p>Should never throw an exception but rather log shutdown failures.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getBeanFactory()"><!-- --></A><H3>
getBeanFactory</H3>
<PRE>
public abstract <A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A> <B>getBeanFactory</B>()
                                                        throws <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></PRE>
<DL>
<DD>Subclasses must return their internal bean factory here. They should implement the
 lookup efficiently, so that it can be called repeatedly without a performance penalty.
 <p>Note: Subclasses should check whether the context is still active before
 returning the internal bean factory. The internal factory should generally be
 considered unavailable once the context has been closed.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html#getBeanFactory()">getBeanFactory</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html" title="interface in org.springframework.context">ConfigurableApplicationContext</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>this application context's internal bean factory (never <code>null</code>)
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></CODE> - if the context does not hold an internal bean factory yet
 (usually if <A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#refresh()"><CODE>refresh()</CODE></A> has never been called) or if the context has been
 closed already<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#refreshBeanFactory()"><CODE>refreshBeanFactory()</CODE></A>, 
<A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html#closeBeanFactory()"><CODE>closeBeanFactory()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="toString()"><!-- --></A><H3>
toString</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>toString</B>()</PRE>
<DL>
<DD>Return information about this context.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A></CODE> in class <CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../../../../org/springframework/context/support/AbstractMessageSource.html" title="class in org.springframework.context.support"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/context/support/AbstractApplicationContext.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="AbstractApplicationContext.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
