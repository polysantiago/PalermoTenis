<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:24:09 BST 2010 -->
<TITLE>
SqlMapClientFactoryBean
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="SqlMapClientFactoryBean";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientCallback.html" title="interface in org.springframework.orm.ibatis"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientOperations.html" title="interface in org.springframework.orm.ibatis"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/orm/ibatis/SqlMapClientFactoryBean.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="SqlMapClientFactoryBean.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.orm.ibatis</FONT>
<BR>
Class SqlMapClientFactoryBean</H2>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>org.springframework.orm.ibatis.SqlMapClientFactoryBean</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory">FactoryBean</A>&lt;com.ibatis.sqlmap.client.SqlMapClient&gt;, <A HREF="../../../../org/springframework/beans/factory/InitializingBean.html" title="interface in org.springframework.beans.factory">InitializingBean</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>SqlMapClientFactoryBean</B><DT>extends <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A><DT>implements <A HREF="../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory">FactoryBean</A>&lt;com.ibatis.sqlmap.client.SqlMapClient&gt;, <A HREF="../../../../org/springframework/beans/factory/InitializingBean.html" title="interface in org.springframework.beans.factory">InitializingBean</A></DL>
</PRE>

<P>
<A HREF="../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory"><CODE>FactoryBean</CODE></A> that creates an
 iBATIS <CODE>SqlMapClient</CODE>. This is the usual
 way to set up a shared iBATIS SqlMapClient in a Spring application context;
 the SqlMapClient can then be passed to iBATIS-based DAOs via dependency
 injection.

 <p>Either <A HREF="../../../../org/springframework/jdbc/datasource/DataSourceTransactionManager.html" title="class in org.springframework.jdbc.datasource"><CODE>DataSourceTransactionManager</CODE></A>
 or <A HREF="../../../../org/springframework/transaction/jta/JtaTransactionManager.html" title="class in org.springframework.transaction.jta"><CODE>JtaTransactionManager</CODE></A> can be
 used for transaction demarcation in combination with a SqlMapClient,
 with JTA only necessary for transactions which span multiple databases.

 <p>Allows for specifying a DataSource at the SqlMapClient level. This
 is preferable to per-DAO DataSource references, as it allows for lazy
 loading and avoids repeated DataSource references in every DAO.

 <p><b>Note:</b> As of Spring 2.5.5, this class (finally) requires iBATIS 2.3
 or higher. The new "mappingLocations" feature requires iBATIS 2.3.2.
<P>

<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>24.02.2004</DD>
<DT><B>Author:</B></DT>
  <DD>Juergen Hoeller</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setConfigLocation(org.springframework.core.io.Resource)"><CODE>setConfigLocation(org.springframework.core.io.Resource)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setDataSource(javax.sql.DataSource)"><CODE>setDataSource(javax.sql.DataSource)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientTemplate.html#setSqlMapClient(com.ibatis.sqlmap.client.SqlMapClient)"><CODE>SqlMapClientTemplate.setSqlMapClient(com.ibatis.sqlmap.client.SqlMapClient)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html#setDataSource(javax.sql.DataSource)"><CODE>JdbcAccessor.setDataSource(javax.sql.DataSource)</CODE></A></DL>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#SqlMapClientFactoryBean()">SqlMapClientFactoryBean</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#afterPropertiesSet()">afterPropertiesSet</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoked by a BeanFactory after it has set all bean properties supplied
 (and satisfied BeanFactoryAware and ApplicationContextAware).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#applyTransactionConfig(com.ibatis.sqlmap.client.SqlMapClient, com.ibatis.sqlmap.engine.transaction.TransactionConfig)">applyTransactionConfig</A></B>(com.ibatis.sqlmap.client.SqlMapClient&nbsp;sqlMapClient,
                       com.ibatis.sqlmap.engine.transaction.TransactionConfig&nbsp;transactionConfig)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Apply the given iBATIS TransactionConfig to the SqlMapClient.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;com.ibatis.sqlmap.client.SqlMapClient</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#buildSqlMapClient(org.springframework.core.io.Resource[], org.springframework.core.io.Resource[], java.util.Properties)">buildSqlMapClient</A></B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;configLocations,
                  <A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;mappingLocations,
                  <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A>&nbsp;properties)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Build a SqlMapClient instance based on the given standard configuration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="../../../../org/springframework/jdbc/support/lob/LobHandler.html" title="interface in org.springframework.jdbc.support.lob">LobHandler</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#getConfigTimeLobHandler()">getConfigTimeLobHandler</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the LobHandler for the currently configured iBATIS SqlMapClient,
 to be used by TypeHandler implementations like ClobStringTypeHandler.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;com.ibatis.sqlmap.client.SqlMapClient</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#getObject()">getObject</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an instance (possibly shared or independent) of the object
 managed by this factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;? extends com.ibatis.sqlmap.client.SqlMapClient&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#getObjectType()">getObjectType</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the type of object that this FactoryBean creates,
 or <code>null</code> if not known in advance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#isSingleton()">isSingleton</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Is the object managed by this factory a singleton? That is,
 will <A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#getObject()"><CODE>FactoryBean.getObject()</CODE></A> always return the same object
 (a reference that can be cached)?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setConfigLocation(org.springframework.core.io.Resource)">setConfigLocation</A></B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&nbsp;configLocation)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the location of the iBATIS SqlMapClient config file.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setConfigLocations(org.springframework.core.io.Resource[])">setConfigLocations</A></B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;configLocations)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set multiple locations of iBATIS SqlMapClient config files that
 are going to be merged into one unified configuration at runtime.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setDataSource(javax.sql.DataSource)">setDataSource</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html?is-external=true" title="class or interface in javax.sql">DataSource</A>&nbsp;dataSource)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the DataSource to be used by iBATIS SQL Maps.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setLobHandler(org.springframework.jdbc.support.lob.LobHandler)">setLobHandler</A></B>(<A HREF="../../../../org/springframework/jdbc/support/lob/LobHandler.html" title="interface in org.springframework.jdbc.support.lob">LobHandler</A>&nbsp;lobHandler)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the LobHandler to be used by the SqlMapClient.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setMappingLocations(org.springframework.core.io.Resource[])">setMappingLocations</A></B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;mappingLocations)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set locations of iBATIS sql-map mapping files that are going to be
 merged into the SqlMapClient configuration at runtime.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setSqlMapClientProperties(java.util.Properties)">setSqlMapClientProperties</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A>&nbsp;sqlMapClientProperties)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set optional properties to be passed into the SqlMapClientBuilder, as
 alternative to a <code>&lt;properties&gt;</code> tag in the sql-map-config.xml
 file.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setTransactionConfigClass(java.lang.Class)">setTransactionConfigClass</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;transactionConfigClass)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the iBATIS TransactionConfig class to use.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setTransactionConfigProperties(java.util.Properties)">setTransactionConfigProperties</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A>&nbsp;transactionConfigProperties)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set properties to be passed to the TransactionConfig instance used
 by this SqlMapClient.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setUseTransactionAwareDataSource(boolean)">setUseTransactionAwareDataSource</A></B>(boolean&nbsp;useTransactionAwareDataSource)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether to use a transaction-aware DataSource for the SqlMapClient,
 i.e.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="SqlMapClientFactoryBean()"><!-- --></A><H3>
SqlMapClientFactoryBean</H3>
<PRE>
public <B>SqlMapClientFactoryBean</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getConfigTimeLobHandler()"><!-- --></A><H3>
getConfigTimeLobHandler</H3>
<PRE>
public static <A HREF="../../../../org/springframework/jdbc/support/lob/LobHandler.html" title="interface in org.springframework.jdbc.support.lob">LobHandler</A> <B>getConfigTimeLobHandler</B>()</PRE>
<DL>
<DD>Return the LobHandler for the currently configured iBATIS SqlMapClient,
 to be used by TypeHandler implementations like ClobStringTypeHandler.
 <p>This instance will be set before initialization of the corresponding
 SqlMapClient, and reset immediately afterwards. It is thus only available
 during configuration.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setLobHandler(org.springframework.jdbc.support.lob.LobHandler)"><CODE>setLobHandler(org.springframework.jdbc.support.lob.LobHandler)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/ibatis/support/ClobStringTypeHandler.html" title="class in org.springframework.orm.ibatis.support"><CODE>ClobStringTypeHandler</CODE></A>, 
<A HREF="../../../../org/springframework/orm/ibatis/support/BlobByteArrayTypeHandler.html" title="class in org.springframework.orm.ibatis.support"><CODE>BlobByteArrayTypeHandler</CODE></A>, 
<A HREF="../../../../org/springframework/orm/ibatis/support/BlobSerializableTypeHandler.html" title="class in org.springframework.orm.ibatis.support"><CODE>BlobSerializableTypeHandler</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setConfigLocation(org.springframework.core.io.Resource)"><!-- --></A><H3>
setConfigLocation</H3>
<PRE>
public void <B>setConfigLocation</B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&nbsp;configLocation)</PRE>
<DL>
<DD>Set the location of the iBATIS SqlMapClient config file.
 A typical value is "WEB-INF/sql-map-config.xml".
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setConfigLocations(org.springframework.core.io.Resource[])"><CODE>setConfigLocations(org.springframework.core.io.Resource[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setConfigLocations(org.springframework.core.io.Resource[])"><!-- --></A><H3>
setConfigLocations</H3>
<PRE>
public void <B>setConfigLocations</B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;configLocations)</PRE>
<DL>
<DD>Set multiple locations of iBATIS SqlMapClient config files that
 are going to be merged into one unified configuration at runtime.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setMappingLocations(org.springframework.core.io.Resource[])"><!-- --></A><H3>
setMappingLocations</H3>
<PRE>
public void <B>setMappingLocations</B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;mappingLocations)</PRE>
<DL>
<DD>Set locations of iBATIS sql-map mapping files that are going to be
 merged into the SqlMapClient configuration at runtime.
 <p>This is an alternative to specifying "&lt;sqlMap&gt;" entries
 in a sql-map-client config file. This property being based on Spring's
 resource abstraction also allows for specifying resource patterns here:
 e.g. "/myApp/*-map.xml".
 <p>Note that this feature requires iBATIS 2.3.2; it will not work
 with any previous iBATIS version.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setSqlMapClientProperties(java.util.Properties)"><!-- --></A><H3>
setSqlMapClientProperties</H3>
<PRE>
public void <B>setSqlMapClientProperties</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A>&nbsp;sqlMapClientProperties)</PRE>
<DL>
<DD>Set optional properties to be passed into the SqlMapClientBuilder, as
 alternative to a <code>&lt;properties&gt;</code> tag in the sql-map-config.xml
 file. Will be used to resolve placeholders in the config file.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setConfigLocation(org.springframework.core.io.Resource)"><CODE>setConfigLocation(org.springframework.core.io.Resource)</CODE></A>, 
<CODE>SqlMapClientBuilder.buildSqlMapClient(java.io.InputStream, java.util.Properties)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setDataSource(javax.sql.DataSource)"><!-- --></A><H3>
setDataSource</H3>
<PRE>
public void <B>setDataSource</B>(<A HREF="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html?is-external=true" title="class or interface in javax.sql">DataSource</A>&nbsp;dataSource)</PRE>
<DL>
<DD>Set the DataSource to be used by iBATIS SQL Maps. This will be passed to the
 SqlMapClient as part of a TransactionConfig instance.
 <p>If specified, this will override corresponding settings in the SqlMapClient
 properties. Usually, you will specify DataSource and transaction configuration
 <i>either</i> here <i>or</i> in SqlMapClient properties.
 <p>Specifying a DataSource for the SqlMapClient rather than for each individual
 DAO allows for lazy loading, for example when using PaginatedList results.
 <p>With a DataSource passed in here, you don't need to specify one for each DAO.
 Passing the SqlMapClient to the DAOs is enough, as it already carries a DataSource.
 Thus, it's recommended to specify the DataSource at this central location only.
 <p>Thanks to Brandon Goodin from the iBATIS team for the hint on how to make
 this work with Spring's integration strategy!
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setTransactionConfigClass(java.lang.Class)"><CODE>setTransactionConfigClass(java.lang.Class)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setTransactionConfigProperties(java.util.Properties)"><CODE>setTransactionConfigProperties(java.util.Properties)</CODE></A>, 
<CODE>SqlMapTransactionManager.getDataSource()</CODE>, 
<A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html#setDataSource(javax.sql.DataSource)"><CODE>JdbcAccessor.setDataSource(javax.sql.DataSource)</CODE></A>, 
<CODE>SqlMapClientTemplate#queryForPaginatedList</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setUseTransactionAwareDataSource(boolean)"><!-- --></A><H3>
setUseTransactionAwareDataSource</H3>
<PRE>
public void <B>setUseTransactionAwareDataSource</B>(boolean&nbsp;useTransactionAwareDataSource)</PRE>
<DL>
<DD>Set whether to use a transaction-aware DataSource for the SqlMapClient,
 i.e. whether to automatically wrap the passed-in DataSource with Spring's
 TransactionAwareDataSourceProxy.
 <p>Default is "true": When the SqlMapClient performs direct database operations
 outside of Spring's SqlMapClientTemplate (for example, lazy loading or direct
 SqlMapClient access), it will still participate in active Spring-managed
 transactions.
 <p>As a further effect, using a transaction-aware DataSource will apply
 remaining transaction timeouts to all created JDBC Statements. This means
 that all operations performed by the SqlMapClient will automatically
 participate in Spring-managed transaction timeouts.
 <p>Turn this flag off to get raw DataSource handling, without Spring transaction
 checks. Operations on Spring's SqlMapClientTemplate will still detect
 Spring-managed transactions, but lazy loading or direct SqlMapClient access won't.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setDataSource(javax.sql.DataSource)"><CODE>setDataSource(javax.sql.DataSource)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.html" title="class in org.springframework.jdbc.datasource"><CODE>TransactionAwareDataSourceProxy</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/datasource/DataSourceTransactionManager.html" title="class in org.springframework.jdbc.datasource"><CODE>DataSourceTransactionManager</CODE></A>, 
<A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientTemplate.html" title="class in org.springframework.orm.ibatis"><CODE>SqlMapClientTemplate</CODE></A>, 
<CODE>SqlMapClient</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setTransactionConfigClass(java.lang.Class)"><!-- --></A><H3>
setTransactionConfigClass</H3>
<PRE>
public void <B>setTransactionConfigClass</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;transactionConfigClass)</PRE>
<DL>
<DD>Set the iBATIS TransactionConfig class to use. Default is
 <code>com.ibatis.sqlmap.engine.transaction.external.ExternalTransactionConfig</code>.
 <p>Will only get applied when using a Spring-managed DataSource.
 An instance of this class will get populated with the given DataSource
 and initialized with the given properties.
 <p>The default ExternalTransactionConfig is appropriate if there is
 external transaction management that the SqlMapClient should participate
 in: be it Spring transaction management, EJB CMT or plain JTA. This
 should be the typical scenario. If there is no active transaction,
 SqlMapClient operations will execute SQL statements non-transactionally.
 <p>JdbcTransactionConfig or JtaTransactionConfig is only necessary
 when using the iBATIS SqlMapTransactionManager API instead of external
 transactions. If there is no explicit transaction, SqlMapClient operations
 will automatically start a transaction for their own scope (in contrast
 to the external transaction mode, see above).
 <p><b>It is strongly recommended to use iBATIS SQL Maps with Spring
 transaction management (or EJB CMT).</b> In this case, the default
 ExternalTransactionConfig is fine. Lazy loading and SQL Maps operations
 without explicit transaction demarcation will execute non-transactionally.
 <p>Even with Spring transaction management, it might be desirable to
 specify JdbcTransactionConfig: This will still participate in existing
 Spring-managed transactions, but lazy loading and operations without
 explicit transaction demaration will execute in their own auto-started
 transactions. However, this is usually not necessary.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setDataSource(javax.sql.DataSource)"><CODE>setDataSource(javax.sql.DataSource)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setTransactionConfigProperties(java.util.Properties)"><CODE>setTransactionConfigProperties(java.util.Properties)</CODE></A>, 
<CODE>TransactionConfig</CODE>, 
<CODE>ExternalTransactionConfig</CODE>, 
<CODE>com.ibatis.sqlmap.engine.transaction.jdbc.JdbcTransactionConfig</CODE>, 
<CODE>com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig</CODE>, 
<CODE>SqlMapTransactionManager</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setTransactionConfigProperties(java.util.Properties)"><!-- --></A><H3>
setTransactionConfigProperties</H3>
<PRE>
public void <B>setTransactionConfigProperties</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A>&nbsp;transactionConfigProperties)</PRE>
<DL>
<DD>Set properties to be passed to the TransactionConfig instance used
 by this SqlMapClient. Supported properties depend on the concrete
 TransactionConfig implementation used:
 <p><ul>
 <li><b>ExternalTransactionConfig</b> supports "DefaultAutoCommit"
 (default: false) and "SetAutoCommitAllowed" (default: true).
 Note that Spring uses SetAutoCommitAllowed = false as default,
 in contrast to the iBATIS default, to always keep the original
 autoCommit value as provided by the connection pool.
 <li><b>JdbcTransactionConfig</b> does not supported any properties.
 <li><b>JtaTransactionConfig</b> supports "UserTransaction"
 (no default), specifying the JNDI location of the JTA UserTransaction
 (usually "java:comp/UserTransaction").
 </ul>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><CODE>TransactionConfig.initialize(java.util.Properties)</CODE>, 
<CODE>ExternalTransactionConfig</CODE>, 
<CODE>com.ibatis.sqlmap.engine.transaction.jdbc.JdbcTransactionConfig</CODE>, 
<CODE>com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setLobHandler(org.springframework.jdbc.support.lob.LobHandler)"><!-- --></A><H3>
setLobHandler</H3>
<PRE>
public void <B>setLobHandler</B>(<A HREF="../../../../org/springframework/jdbc/support/lob/LobHandler.html" title="interface in org.springframework.jdbc.support.lob">LobHandler</A>&nbsp;lobHandler)</PRE>
<DL>
<DD>Set the LobHandler to be used by the SqlMapClient.
 Will be exposed at config time for TypeHandler implementations.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#getConfigTimeLobHandler()"><CODE>getConfigTimeLobHandler()</CODE></A>, 
<CODE>TypeHandler</CODE>, 
<A HREF="../../../../org/springframework/orm/ibatis/support/ClobStringTypeHandler.html" title="class in org.springframework.orm.ibatis.support"><CODE>ClobStringTypeHandler</CODE></A>, 
<A HREF="../../../../org/springframework/orm/ibatis/support/BlobByteArrayTypeHandler.html" title="class in org.springframework.orm.ibatis.support"><CODE>BlobByteArrayTypeHandler</CODE></A>, 
<A HREF="../../../../org/springframework/orm/ibatis/support/BlobSerializableTypeHandler.html" title="class in org.springframework.orm.ibatis.support"><CODE>BlobSerializableTypeHandler</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="afterPropertiesSet()"><!-- --></A><H3>
afterPropertiesSet</H3>
<PRE>
public void <B>afterPropertiesSet</B>()
                        throws <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang">Exception</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/InitializingBean.html#afterPropertiesSet()">InitializingBean</A></CODE></B></DD>
<DD>Invoked by a BeanFactory after it has set all bean properties supplied
 (and satisfied BeanFactoryAware and ApplicationContextAware).
 <p>This method allows the bean instance to perform initialization only
 possible when all bean properties have been set and to throw an
 exception in the event of misconfiguration.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/InitializingBean.html#afterPropertiesSet()">afterPropertiesSet</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/InitializingBean.html" title="interface in org.springframework.beans.factory">InitializingBean</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang">Exception</A></CODE> - in the event of misconfiguration (such
 as failure to set an essential property) or if initialization fails.</DL>
</DD>
</DL>
<HR>

<A NAME="buildSqlMapClient(org.springframework.core.io.Resource[], org.springframework.core.io.Resource[], java.util.Properties)"><!-- --></A><H3>
buildSqlMapClient</H3>
<PRE>
protected com.ibatis.sqlmap.client.SqlMapClient <B>buildSqlMapClient</B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;configLocations,
                                                                  <A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;mappingLocations,
                                                                  <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A>&nbsp;properties)
                                                           throws <A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
<DL>
<DD>Build a SqlMapClient instance based on the given standard configuration.
 <p>The default implementation uses the standard iBATIS <CODE>SqlMapClientBuilder</CODE>
 API to build a SqlMapClient instance based on an InputStream (if possible,
 on iBATIS 2.3 and higher) or on a Reader (on iBATIS up to version 2.2).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>configLocations</CODE> - the config files to load from<DD><CODE>properties</CODE> - the SqlMapClient properties (if any)
<DT><B>Returns:</B><DD>the SqlMapClient instance (never <code>null</code>)
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></CODE> - if loading the config file failed<DT><B>See Also:</B><DD><CODE>SqlMapClientBuilder.buildSqlMapClient(java.io.Reader)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="applyTransactionConfig(com.ibatis.sqlmap.client.SqlMapClient, com.ibatis.sqlmap.engine.transaction.TransactionConfig)"><!-- --></A><H3>
applyTransactionConfig</H3>
<PRE>
protected void <B>applyTransactionConfig</B>(com.ibatis.sqlmap.client.SqlMapClient&nbsp;sqlMapClient,
                                      com.ibatis.sqlmap.engine.transaction.TransactionConfig&nbsp;transactionConfig)</PRE>
<DL>
<DD>Apply the given iBATIS TransactionConfig to the SqlMapClient.
 <p>The default implementation casts to ExtendedSqlMapClient, retrieves the maximum
 number of concurrent transactions from the SqlMapExecutorDelegate, and sets
 an iBATIS TransactionManager with the given TransactionConfig.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sqlMapClient</CODE> - the SqlMapClient to apply the TransactionConfig to<DD><CODE>transactionConfig</CODE> - the iBATIS TransactionConfig to apply<DT><B>See Also:</B><DD><CODE>ExtendedSqlMapClient</CODE>, 
<CODE>SqlMapExecutorDelegate.getMaxTransactions()</CODE>, 
<CODE>SqlMapExecutorDelegate.setTxManager(com.ibatis.sqlmap.engine.transaction.TransactionManager)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getObject()"><!-- --></A><H3>
getObject</H3>
<PRE>
public com.ibatis.sqlmap.client.SqlMapClient <B>getObject</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#getObject()">FactoryBean</A></CODE></B></DD>
<DD>Return an instance (possibly shared or independent) of the object
 managed by this factory.
 <p>As with a <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>BeanFactory</CODE></A>, this allows support for both the
 Singleton and Prototype design pattern.
 <p>If this FactoryBean is not fully initialized yet at the time of
 the call (for example because it is involved in a circular reference),
 throw a corresponding <A HREF="../../../../org/springframework/beans/factory/FactoryBeanNotInitializedException.html" title="class in org.springframework.beans.factory"><CODE>FactoryBeanNotInitializedException</CODE></A>.
 <p>As of Spring 2.0, FactoryBeans are allowed to return <code>null</code>
 objects. The factory will consider this as normal value to be used; it
 will not throw a FactoryBeanNotInitializedException in this case anymore.
 FactoryBean implementations are encouraged to throw
 FactoryBeanNotInitializedException themselves now, as appropriate.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#getObject()">getObject</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory">FactoryBean</A>&lt;com.ibatis.sqlmap.client.SqlMapClient&gt;</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>an instance of the bean (can be <code>null</code>)<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/FactoryBeanNotInitializedException.html" title="class in org.springframework.beans.factory"><CODE>FactoryBeanNotInitializedException</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getObjectType()"><!-- --></A><H3>
getObjectType</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;? extends com.ibatis.sqlmap.client.SqlMapClient&gt; <B>getObjectType</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#getObjectType()">FactoryBean</A></CODE></B></DD>
<DD>Return the type of object that this FactoryBean creates,
 or <code>null</code> if not known in advance.
 <p>This allows one to check for specific types of beans without
 instantiating objects, for example on autowiring.
 <p>In the case of implementations that are creating a singleton object,
 this method should try to avoid singleton creation as far as possible;
 it should rather estimate the type in advance.
 For prototypes, returning a meaningful type here is advisable too.
 <p>This method can be called <i>before</i> this FactoryBean has
 been fully initialized. It must not rely on state created during
 initialization; of course, it can still use such state if available.
 <p><b>NOTE:</b> Autowiring will simply ignore FactoryBeans that return
 <code>null</code> here. Therefore it is highly recommended to implement
 this method properly, using the current state of the FactoryBean.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#getObjectType()">getObjectType</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory">FactoryBean</A>&lt;com.ibatis.sqlmap.client.SqlMapClient&gt;</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the type of object that this FactoryBean creates,
 or <code>null</code> if not known at the time of the call<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html#getBeansOfType(java.lang.Class)"><CODE>ListableBeanFactory.getBeansOfType(java.lang.Class<T>)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isSingleton()"><!-- --></A><H3>
isSingleton</H3>
<PRE>
public boolean <B>isSingleton</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#isSingleton()">FactoryBean</A></CODE></B></DD>
<DD>Is the object managed by this factory a singleton? That is,
 will <A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#getObject()"><CODE>FactoryBean.getObject()</CODE></A> always return the same object
 (a reference that can be cached)?
 <p><b>NOTE:</b> If a FactoryBean indicates to hold a singleton object,
 the object returned from <code>getObject()</code> might get cached
 by the owning BeanFactory. Hence, do not return <code>true</code>
 unless the FactoryBean always exposes the same reference.
 <p>The singleton status of the FactoryBean itself will generally
 be provided by the owning BeanFactory; usually, it has to be
 defined as singleton there.
 <p><b>NOTE:</b> This method returning <code>false</code> does not
 necessarily indicate that returned objects are independent instances.
 An implementation of the extended <A HREF="../../../../org/springframework/beans/factory/SmartFactoryBean.html" title="interface in org.springframework.beans.factory"><CODE>SmartFactoryBean</CODE></A> interface
 may explicitly indicate independent instances through its
 <A HREF="../../../../org/springframework/beans/factory/SmartFactoryBean.html#isPrototype()"><CODE>SmartFactoryBean.isPrototype()</CODE></A> method. Plain <A HREF="../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory"><CODE>FactoryBean</CODE></A>
 implementations which do not implement this extended interface are
 simply assumed to always return independent instances if the
 <code>isSingleton()</code> implementation returns <code>false</code>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#isSingleton()">isSingleton</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory">FactoryBean</A>&lt;com.ibatis.sqlmap.client.SqlMapClient&gt;</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>whether the exposed object is a singleton<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#getObject()"><CODE>FactoryBean.getObject()</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/SmartFactoryBean.html#isPrototype()"><CODE>SmartFactoryBean.isPrototype()</CODE></A></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientCallback.html" title="interface in org.springframework.orm.ibatis"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/springframework/orm/ibatis/SqlMapClientOperations.html" title="interface in org.springframework.orm.ibatis"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/orm/ibatis/SqlMapClientFactoryBean.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="SqlMapClientFactoryBean.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
