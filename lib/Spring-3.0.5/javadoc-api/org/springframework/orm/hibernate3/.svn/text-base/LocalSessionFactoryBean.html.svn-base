<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:24:08 BST 2010 -->
<TITLE>
LocalSessionFactoryBean
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="LocalSessionFactoryBean";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/springframework/orm/hibernate3/LocalRegionFactoryProxy.html" title="class in org.springframework.orm.hibernate3"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/springframework/orm/hibernate3/LocalTransactionManagerLookup.html" title="class in org.springframework.orm.hibernate3"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/orm/hibernate3/LocalSessionFactoryBean.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="LocalSessionFactoryBean.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_org.springframework.orm.hibernate3.AbstractSessionFactoryBean">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.orm.hibernate3</FONT>
<BR>
Class LocalSessionFactoryBean</H2>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html" title="class in org.springframework.orm.hibernate3">org.springframework.orm.hibernate3.AbstractSessionFactoryBean</A>
      <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>org.springframework.orm.hibernate3.LocalSessionFactoryBean</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../org/springframework/beans/factory/BeanClassLoaderAware.html" title="interface in org.springframework.beans.factory">BeanClassLoaderAware</A>, <A HREF="../../../../org/springframework/beans/factory/DisposableBean.html" title="interface in org.springframework.beans.factory">DisposableBean</A>, <A HREF="../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory">FactoryBean</A>&lt;org.hibernate.SessionFactory&gt;, <A HREF="../../../../org/springframework/beans/factory/InitializingBean.html" title="interface in org.springframework.beans.factory">InitializingBean</A>, <A HREF="../../../../org/springframework/dao/support/PersistenceExceptionTranslator.html" title="interface in org.springframework.dao.support">PersistenceExceptionTranslator</A></DD>
</DL>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../org/springframework/orm/hibernate3/annotation/AnnotationSessionFactoryBean.html" title="class in org.springframework.orm.hibernate3.annotation">AnnotationSessionFactoryBean</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>LocalSessionFactoryBean</B><DT>extends <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html" title="class in org.springframework.orm.hibernate3">AbstractSessionFactoryBean</A><DT>implements <A HREF="../../../../org/springframework/beans/factory/BeanClassLoaderAware.html" title="interface in org.springframework.beans.factory">BeanClassLoaderAware</A></DL>
</PRE>

<P>
<A HREF="../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory"><CODE>FactoryBean</CODE></A> that creates a
 Hibernate <CODE>SessionFactory</CODE>. This is the usual way to
 set up a shared Hibernate SessionFactory in a Spring application context;
 the SessionFactory can then be passed to Hibernate-based DAOs via
 dependency injection.

 <p>Configuration settings can either be read from a Hibernate XML file,
 specified as "configLocation", or completely via this class. A typical
 local configuration consists of one or more "mappingResources", various
 "hibernateProperties" (not strictly necessary), and a "dataSource" that the
 SessionFactory should use. The latter can also be specified via Hibernate
 properties, but "dataSource" supports any Spring-configured DataSource,
 instead of relying on Hibernate's own connection providers.

 <p>This SessionFactory handling strategy is appropriate for most types of
 applications, from Hibernate-only single database apps to ones that need
 distributed transactions. Either <A HREF="../../../../org/springframework/orm/hibernate3/HibernateTransactionManager.html" title="class in org.springframework.orm.hibernate3"><CODE>HibernateTransactionManager</CODE></A> or
 <A HREF="../../../../org/springframework/transaction/jta/JtaTransactionManager.html" title="class in org.springframework.transaction.jta"><CODE>JtaTransactionManager</CODE></A> can be
 used for transaction demarcation, with the latter only necessary for
 transactions which span multiple databases.

 <p>This factory bean will by default expose a transaction-aware SessionFactory
 proxy, letting data access code work with the plain Hibernate SessionFactory
 and its <code>getCurrentSession()</code> method, while still being able to
 participate in current Spring-managed transactions: with any transaction
 management strategy, either local or JTA / EJB CMT, and any transaction
 synchronization mechanism, either Spring or JTA. Furthermore,
 <code>getCurrentSession()</code> will also seamlessly work with
 a request-scoped Session managed by
 <A HREF="../../../../org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.html" title="class in org.springframework.orm.hibernate3.support"><CODE>OpenSessionInViewFilter</CODE></A> /
 <A HREF="../../../../org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.html" title="class in org.springframework.orm.hibernate3.support"><CODE>OpenSessionInViewInterceptor</CODE></A>.

 <p><b>Requires Hibernate 3.2 or later; tested with 3.3, 3.5 and 3.6.</b>
 Note that this factory will use "on_close" as default Hibernate connection
 release mode, unless in the case of a "jtaTransactionManager" specified,
 for the reason that this is appropriate for most Spring-based applications
 (in particular when using Spring's HibernateTransactionManager).
<P>

<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>1.2</DD>
<DT><B>Author:</B></DT>
  <DD>Juergen Hoeller</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setSessionFactory(org.hibernate.SessionFactory)"><CODE>HibernateAccessor.setSessionFactory(org.hibernate.SessionFactory)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTransactionManager.html#setSessionFactory(org.hibernate.SessionFactory)"><CODE>HibernateTransactionManager.setSessionFactory(org.hibernate.SessionFactory)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#setExposeTransactionAwareSessionFactory(boolean)"><CODE>AbstractSessionFactoryBean.setExposeTransactionAwareSessionFactory(boolean)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setJtaTransactionManager(javax.transaction.TransactionManager)"><CODE>setJtaTransactionManager(javax.transaction.TransactionManager)</CODE></A>, 
<CODE>SessionFactory.getCurrentSession()</CODE>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTransactionManager.html" title="class in org.springframework.orm.hibernate3"><CODE>HibernateTransactionManager</CODE></A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.orm.hibernate3.AbstractSessionFactoryBean"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from class org.springframework.orm.hibernate3.<A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html" title="class in org.springframework.orm.hibernate3">AbstractSessionFactoryBean</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#logger">logger</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#LocalSessionFactoryBean()">LocalSessionFactoryBean</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#afterSessionFactoryCreation()">afterSessionFactoryCreation</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Executes schema update if requested.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;org.hibernate.SessionFactory</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#buildSessionFactory()">buildSessionFactory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Build the underlying Hibernate SessionFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#createDatabaseSchema()">createDatabaseSchema</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute schema creation script, determined by the Configuration object
 used for creating the SessionFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#destroy()">destroy</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Allows for schema export on shutdown.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#dropDatabaseSchema()">dropDatabaseSchema</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute schema drop script, determined by the Configuration object
 used for creating the SessionFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#executeSchemaScript(java.sql.Connection, java.lang.String[])">executeSchemaScript</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html?is-external=true" title="class or interface in java.sql">Connection</A>&nbsp;con,
                    <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]&nbsp;sql)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute the given schema script on the given JDBC Connection.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#executeSchemaStatement(java.sql.Statement, java.lang.String)">executeSchemaStatement</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html?is-external=true" title="class or interface in java.sql">Statement</A>&nbsp;stmt,
                       <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute the given schema SQL on the given JDBC Statement.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;org.hibernate.cache.CacheProvider</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#getConfigTimeCacheProvider()">getConfigTimeCacheProvider</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the CacheProvider for the currently configured Hibernate SessionFactory,
 to be used by LocalCacheProviderProxy.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html?is-external=true" title="class or interface in javax.sql">DataSource</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#getConfigTimeDataSource()">getConfigTimeDataSource</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the DataSource for the currently configured Hibernate SessionFactory,
 to be used by LocalDataSourceConnectionProvoder.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="../../../../org/springframework/jdbc/support/lob/LobHandler.html" title="interface in org.springframework.jdbc.support.lob">LobHandler</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#getConfigTimeLobHandler()">getConfigTimeLobHandler</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the LobHandler for the currently configured Hibernate SessionFactory,
 to be used by UserType implementations like ClobStringType.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/javax/transaction/TransactionManager.html?is-external=true" title="class or interface in javax.transaction">TransactionManager</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#getConfigTimeTransactionManager()">getConfigTimeTransactionManager</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the JTA TransactionManager for the currently configured Hibernate
 SessionFactory, to be used by LocalTransactionManagerLookup.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.hibernate.cfg.Configuration</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#getConfiguration()">getConfiguration</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the Configuration object used to build the SessionFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#getHibernateProperties()">getHibernateProperties</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the Hibernate properties, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;org.hibernate.cfg.Configuration</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#newConfiguration()">newConfiguration</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subclasses can override this method to perform custom initialization
 of the Configuration instance used for SessionFactory creation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;org.hibernate.SessionFactory</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#newSessionFactory(org.hibernate.cfg.Configuration)">newSessionFactory</A></B>(org.hibernate.cfg.Configuration&nbsp;config)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subclasses can override this method to perform custom initialization
 of the SessionFactory instance, creating it via the given Configuration
 object that got prepared by this LocalSessionFactoryBean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#postProcessConfiguration(org.hibernate.cfg.Configuration)">postProcessConfiguration</A></B>(org.hibernate.cfg.Configuration&nbsp;config)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To be implemented by subclasses that want to to perform custom
 post-processing of the Configuration object after this FactoryBean
 performed its default initialization.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#postProcessMappings(org.hibernate.cfg.Configuration)">postProcessMappings</A></B>(org.hibernate.cfg.Configuration&nbsp;config)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To be implemented by subclasses that want to to register further mappings
 on the Configuration object after this FactoryBean registered its specified
 mappings.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setBeanClassLoader(java.lang.ClassLoader)">setBeanClassLoader</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A>&nbsp;beanClassLoader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Callback that supplies the bean <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang"><CODE>class loader</CODE></A> to
 a bean instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setCacheableMappingLocations(org.springframework.core.io.Resource[])">setCacheableMappingLocations</A></B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;cacheableMappingLocations)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set locations of cacheable Hibernate mapping files, for example as web app
 resource "/WEB-INF/mapping/example.hbm.xml".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setCacheProvider(org.hibernate.cache.CacheProvider)">setCacheProvider</A></B>(org.hibernate.cache.CacheProvider&nbsp;cacheProvider)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>as of Spring 3.0, following Hibernate 3.3's deprecation
 of the CacheProvider SPI</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setCacheRegionFactory(java.lang.Object)">setCacheRegionFactory</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;cacheRegionFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the Hibernate RegionFactory to use for the SessionFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setCollectionCacheStrategies(java.util.Properties)">setCollectionCacheStrategies</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A>&nbsp;collectionCacheStrategies)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify the cache strategies for persistent collections (with specific roles).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setConfigLocation(org.springframework.core.io.Resource)">setConfigLocation</A></B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&nbsp;configLocation)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the location of a single Hibernate XML config file, for example as
 classpath resource "classpath:hibernate.cfg.xml".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setConfigLocations(org.springframework.core.io.Resource[])">setConfigLocations</A></B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;configLocations)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the locations of multiple Hibernate XML config files, for example as
 classpath resources "classpath:hibernate.cfg.xml,classpath:extension.cfg.xml".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setConfigurationClass(java.lang.Class)">setConfigurationClass</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;?&gt;&nbsp;configurationClass)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify the Hibernate Configuration class to use.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setEntityCacheStrategies(java.util.Properties)">setEntityCacheStrategies</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A>&nbsp;entityCacheStrategies)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify the cache strategies for entities (persistent classes or named entities).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setEntityInterceptor(org.hibernate.Interceptor)">setEntityInterceptor</A></B>(org.hibernate.Interceptor&nbsp;entityInterceptor)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set a Hibernate entity interceptor that allows to inspect and change
 property values before writing to and reading from the database.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setEventListeners(java.util.Map)">setEventListeners</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;&nbsp;eventListeners)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify the Hibernate event listeners to register, with listener types
 as keys and listener objects as values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setFilterDefinitions(org.hibernate.engine.FilterDefinition[])">setFilterDefinitions</A></B>(org.hibernate.engine.FilterDefinition[]&nbsp;filterDefinitions)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify the Hibernate FilterDefinitions to register with the SessionFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setHibernateProperties(java.util.Properties)">setHibernateProperties</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A>&nbsp;hibernateProperties)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set Hibernate properties, such as "hibernate.dialect".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setJtaTransactionManager(javax.transaction.TransactionManager)">setJtaTransactionManager</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/javax/transaction/TransactionManager.html?is-external=true" title="class or interface in javax.transaction">TransactionManager</A>&nbsp;jtaTransactionManager)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the JTA TransactionManager to be used for Hibernate's
 TransactionManagerLookup.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setLobHandler(org.springframework.jdbc.support.lob.LobHandler)">setLobHandler</A></B>(<A HREF="../../../../org/springframework/jdbc/support/lob/LobHandler.html" title="interface in org.springframework.jdbc.support.lob">LobHandler</A>&nbsp;lobHandler)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the LobHandler to be used by the SessionFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setMappingDirectoryLocations(org.springframework.core.io.Resource[])">setMappingDirectoryLocations</A></B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;mappingDirectoryLocations)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set locations of directories that contain Hibernate mapping resources,
 like "WEB-INF/mappings".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setMappingJarLocations(org.springframework.core.io.Resource[])">setMappingJarLocations</A></B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;mappingJarLocations)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set locations of jar files that contain Hibernate mapping resources,
 like "WEB-INF/lib/example.hbm.jar".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setMappingLocations(org.springframework.core.io.Resource[])">setMappingLocations</A></B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;mappingLocations)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set locations of Hibernate mapping files, for example as classpath
 resource "classpath:example.hbm.xml".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setMappingResources(java.lang.String[])">setMappingResources</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]&nbsp;mappingResources)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set Hibernate mapping resources to be found in the class path,
 like "example.hbm.xml" or "mypackage/example.hbm.xml".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setNamingStrategy(org.hibernate.cfg.NamingStrategy)">setNamingStrategy</A></B>(org.hibernate.cfg.NamingStrategy&nbsp;namingStrategy)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set a Hibernate NamingStrategy for the SessionFactory, determining the
 physical column and table names given the info in the mapping document.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setSchemaUpdate(boolean)">setSchemaUpdate</A></B>(boolean&nbsp;schemaUpdate)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether to execute a schema update after SessionFactory initialization.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setTypeDefinitions(org.springframework.orm.hibernate3.TypeDefinitionBean[])">setTypeDefinitions</A></B>(<A HREF="../../../../org/springframework/orm/hibernate3/TypeDefinitionBean.html" title="class in org.springframework.orm.hibernate3">TypeDefinitionBean</A>[]&nbsp;typeDefinitions)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify the Hibernate type definitions to register with the SessionFactory,
 as Spring TypeDefinitionBean instances.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#updateDatabaseSchema()">updateDatabaseSchema</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute schema update script, determined by the Configuration object
 used for creating the SessionFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#validateDatabaseSchema()">validateDatabaseSchema</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute schema creation script, determined by the Configuration object
 used for creating the SessionFactory.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.orm.hibernate3.AbstractSessionFactoryBean"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class org.springframework.orm.hibernate3.<A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html" title="class in org.springframework.orm.hibernate3">AbstractSessionFactoryBean</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#afterPropertiesSet()">afterPropertiesSet</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#beforeSessionFactoryDestruction()">beforeSessionFactoryDestruction</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#convertHibernateAccessException(org.hibernate.HibernateException)">convertHibernateAccessException</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#getDataSource()">getDataSource</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#getObject()">getObject</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#getObjectType()">getObjectType</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#getSessionFactory()">getSessionFactory</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#isExposeTransactionAwareSessionFactory()">isExposeTransactionAwareSessionFactory</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#isSingleton()">isSingleton</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#isUseTransactionAwareDataSource()">isUseTransactionAwareDataSource</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#setDataSource(javax.sql.DataSource)">setDataSource</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#setExposeTransactionAwareSessionFactory(boolean)">setExposeTransactionAwareSessionFactory</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#setJdbcExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)">setJdbcExceptionTranslator</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#setUseTransactionAwareDataSource(boolean)">setUseTransactionAwareDataSource</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#translateExceptionIfPossible(java.lang.RuntimeException)">translateExceptionIfPossible</A>, <A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#wrapSessionFactoryIfNecessary(org.hibernate.SessionFactory)">wrapSessionFactoryIfNecessary</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="LocalSessionFactoryBean()"><!-- --></A><H3>
LocalSessionFactoryBean</H3>
<PRE>
public <B>LocalSessionFactoryBean</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getConfigTimeDataSource()"><!-- --></A><H3>
getConfigTimeDataSource</H3>
<PRE>
public static <A HREF="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html?is-external=true" title="class or interface in javax.sql">DataSource</A> <B>getConfigTimeDataSource</B>()</PRE>
<DL>
<DD>Return the DataSource for the currently configured Hibernate SessionFactory,
 to be used by LocalDataSourceConnectionProvoder.
 <p>This instance will be set before initialization of the corresponding
 SessionFactory, and reset immediately afterwards. It is thus only available
 during configuration.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#setDataSource(javax.sql.DataSource)"><CODE>AbstractSessionFactoryBean.setDataSource(javax.sql.DataSource)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/LocalDataSourceConnectionProvider.html" title="class in org.springframework.orm.hibernate3"><CODE>LocalDataSourceConnectionProvider</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getConfigTimeTransactionManager()"><!-- --></A><H3>
getConfigTimeTransactionManager</H3>
<PRE>
public static <A HREF="http://java.sun.com/javase/6/docs/api/javax/transaction/TransactionManager.html?is-external=true" title="class or interface in javax.transaction">TransactionManager</A> <B>getConfigTimeTransactionManager</B>()</PRE>
<DL>
<DD>Return the JTA TransactionManager for the currently configured Hibernate
 SessionFactory, to be used by LocalTransactionManagerLookup.
 <p>This instance will be set before initialization of the corresponding
 SessionFactory, and reset immediately afterwards. It is thus only available
 during configuration.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setJtaTransactionManager(javax.transaction.TransactionManager)"><CODE>setJtaTransactionManager(javax.transaction.TransactionManager)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/LocalTransactionManagerLookup.html" title="class in org.springframework.orm.hibernate3"><CODE>LocalTransactionManagerLookup</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getConfigTimeCacheProvider()"><!-- --></A><H3>
getConfigTimeCacheProvider</H3>
<PRE>
public static org.hibernate.cache.CacheProvider <B>getConfigTimeCacheProvider</B>()</PRE>
<DL>
<DD>Return the CacheProvider for the currently configured Hibernate SessionFactory,
 to be used by LocalCacheProviderProxy.
 <p>This instance will be set before initialization of the corresponding
 SessionFactory, and reset immediately afterwards. It is thus only available
 during configuration.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setCacheProvider(org.hibernate.cache.CacheProvider)"><CODE>setCacheProvider(org.hibernate.cache.CacheProvider)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getConfigTimeLobHandler()"><!-- --></A><H3>
getConfigTimeLobHandler</H3>
<PRE>
public static <A HREF="../../../../org/springframework/jdbc/support/lob/LobHandler.html" title="interface in org.springframework.jdbc.support.lob">LobHandler</A> <B>getConfigTimeLobHandler</B>()</PRE>
<DL>
<DD>Return the LobHandler for the currently configured Hibernate SessionFactory,
 to be used by UserType implementations like ClobStringType.
 <p>This instance will be set before initialization of the corresponding
 SessionFactory, and reset immediately afterwards. It is thus only available
 during configuration.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setLobHandler(org.springframework.jdbc.support.lob.LobHandler)"><CODE>setLobHandler(org.springframework.jdbc.support.lob.LobHandler)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/support/ClobStringType.html" title="class in org.springframework.orm.hibernate3.support"><CODE>ClobStringType</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/support/BlobByteArrayType.html" title="class in org.springframework.orm.hibernate3.support"><CODE>BlobByteArrayType</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/support/BlobSerializableType.html" title="class in org.springframework.orm.hibernate3.support"><CODE>BlobSerializableType</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setConfigurationClass(java.lang.Class)"><!-- --></A><H3>
setConfigurationClass</H3>
<PRE>
public void <B>setConfigurationClass</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;?&gt;&nbsp;configurationClass)</PRE>
<DL>
<DD>Specify the Hibernate Configuration class to use.
 Default is "org.hibernate.cfg.Configuration"; any subclass of
 this default Hibernate Configuration class can be specified.
 <p>Can be set to "org.hibernate.cfg.AnnotationConfiguration" for
 using Hibernate3 annotation support (initially only available as
 alpha download separate from the main Hibernate3 distribution).
 <p>Annotated packages and annotated classes can be specified via the
 corresponding tags in "hibernate.cfg.xml" then, so this will usually
 be combined with a "configLocation" property that points at such a
 standard Hibernate configuration file.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setConfigLocation(org.springframework.core.io.Resource)"><CODE>setConfigLocation(org.springframework.core.io.Resource)</CODE></A>, 
<CODE>Configuration</CODE>, 
<CODE>AnnotationConfiguration</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setConfigLocation(org.springframework.core.io.Resource)"><!-- --></A><H3>
setConfigLocation</H3>
<PRE>
public void <B>setConfigLocation</B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&nbsp;configLocation)</PRE>
<DL>
<DD>Set the location of a single Hibernate XML config file, for example as
 classpath resource "classpath:hibernate.cfg.xml".
 <p>Note: Can be omitted when all necessary properties and mapping
 resources are specified locally via this bean.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><CODE>Configuration.configure(java.net.URL)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setConfigLocations(org.springframework.core.io.Resource[])"><!-- --></A><H3>
setConfigLocations</H3>
<PRE>
public void <B>setConfigLocations</B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;configLocations)</PRE>
<DL>
<DD>Set the locations of multiple Hibernate XML config files, for example as
 classpath resources "classpath:hibernate.cfg.xml,classpath:extension.cfg.xml".
 <p>Note: Can be omitted when all necessary properties and mapping
 resources are specified locally via this bean.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><CODE>Configuration.configure(java.net.URL)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setMappingResources(java.lang.String[])"><!-- --></A><H3>
setMappingResources</H3>
<PRE>
public void <B>setMappingResources</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]&nbsp;mappingResources)</PRE>
<DL>
<DD>Set Hibernate mapping resources to be found in the class path,
 like "example.hbm.xml" or "mypackage/example.hbm.xml".
 Analogous to mapping entries in a Hibernate XML config file.
 Alternative to the more generic setMappingLocations method.
 <p>Can be used to add to mappings from a Hibernate XML config file,
 or to specify all mappings locally.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setMappingLocations(org.springframework.core.io.Resource[])"><CODE>setMappingLocations(org.springframework.core.io.Resource[])</CODE></A>, 
<CODE>Configuration.addResource(java.lang.String, java.lang.ClassLoader)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setMappingLocations(org.springframework.core.io.Resource[])"><!-- --></A><H3>
setMappingLocations</H3>
<PRE>
public void <B>setMappingLocations</B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;mappingLocations)</PRE>
<DL>
<DD>Set locations of Hibernate mapping files, for example as classpath
 resource "classpath:example.hbm.xml". Supports any resource location
 via Spring's resource abstraction, for example relative paths like
 "WEB-INF/mappings/example.hbm.xml" when running in an application context.
 <p>Can be used to add to mappings from a Hibernate XML config file,
 or to specify all mappings locally.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><CODE>Configuration.addInputStream(java.io.InputStream)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setCacheableMappingLocations(org.springframework.core.io.Resource[])"><!-- --></A><H3>
setCacheableMappingLocations</H3>
<PRE>
public void <B>setCacheableMappingLocations</B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;cacheableMappingLocations)</PRE>
<DL>
<DD>Set locations of cacheable Hibernate mapping files, for example as web app
 resource "/WEB-INF/mapping/example.hbm.xml". Supports any resource location
 via Spring's resource abstraction, as long as the resource can be resolved
 in the file system.
 <p>Can be used to add to mappings from a Hibernate XML config file,
 or to specify all mappings locally.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><CODE>Configuration.addCacheableFile(java.io.File)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setMappingJarLocations(org.springframework.core.io.Resource[])"><!-- --></A><H3>
setMappingJarLocations</H3>
<PRE>
public void <B>setMappingJarLocations</B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;mappingJarLocations)</PRE>
<DL>
<DD>Set locations of jar files that contain Hibernate mapping resources,
 like "WEB-INF/lib/example.hbm.jar".
 <p>Can be used to add to mappings from a Hibernate XML config file,
 or to specify all mappings locally.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><CODE>Configuration.addJar(java.io.File)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setMappingDirectoryLocations(org.springframework.core.io.Resource[])"><!-- --></A><H3>
setMappingDirectoryLocations</H3>
<PRE>
public void <B>setMappingDirectoryLocations</B>(<A HREF="../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]&nbsp;mappingDirectoryLocations)</PRE>
<DL>
<DD>Set locations of directories that contain Hibernate mapping resources,
 like "WEB-INF/mappings".
 <p>Can be used to add to mappings from a Hibernate XML config file,
 or to specify all mappings locally.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><CODE>Configuration.addDirectory(java.io.File)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setHibernateProperties(java.util.Properties)"><!-- --></A><H3>
setHibernateProperties</H3>
<PRE>
public void <B>setHibernateProperties</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A>&nbsp;hibernateProperties)</PRE>
<DL>
<DD>Set Hibernate properties, such as "hibernate.dialect".
 <p>Can be used to override values in a Hibernate XML config file,
 or to specify all necessary properties locally.
 <p>Note: Do not specify a transaction provider here when using
 Spring-driven transactions. It is also advisable to omit connection
 provider settings and use a Spring-set DataSource instead.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#setDataSource(javax.sql.DataSource)"><CODE>AbstractSessionFactoryBean.setDataSource(javax.sql.DataSource)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getHibernateProperties()"><!-- --></A><H3>
getHibernateProperties</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A> <B>getHibernateProperties</B>()</PRE>
<DL>
<DD>Return the Hibernate properties, if any. Mainly available for
 configuration through property paths that specify individual keys.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setJtaTransactionManager(javax.transaction.TransactionManager)"><!-- --></A><H3>
setJtaTransactionManager</H3>
<PRE>
public void <B>setJtaTransactionManager</B>(<A HREF="http://java.sun.com/javase/6/docs/api/javax/transaction/TransactionManager.html?is-external=true" title="class or interface in javax.transaction">TransactionManager</A>&nbsp;jtaTransactionManager)</PRE>
<DL>
<DD>Set the JTA TransactionManager to be used for Hibernate's
 TransactionManagerLookup. Allows for using a Spring-managed
 JTA TransactionManager for Hibernate's cache synchronization.
 <p>Note: If this is set, the Hibernate settings should not define a
 transaction manager lookup to avoid meaningless double configuration.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/LocalTransactionManagerLookup.html" title="class in org.springframework.orm.hibernate3"><CODE>LocalTransactionManagerLookup</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setCacheRegionFactory(java.lang.Object)"><!-- --></A><H3>
setCacheRegionFactory</H3>
<PRE>
public void <B>setCacheRegionFactory</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;cacheRegionFactory)</PRE>
<DL>
<DD>Set the Hibernate RegionFactory to use for the SessionFactory.
 Allows for using a Spring-managed RegionFactory instance.
 <p>As of Hibernate 3.3, this is the preferred mechanism for configuring
 caches, superseding the <A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setCacheProvider(org.hibernate.cache.CacheProvider)"><CODE>CacheProvider SPI</CODE></A>.
 For Hibernate 3.2 compatibility purposes, the accepted reference is of type
 Object: the actual type is <code>org.hibernate.cache.RegionFactory</code>.
 <p>Note: If this is set, the Hibernate settings should not define a
 cache provider to avoid meaningless double configuration.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><CODE>RegionFactory</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setCacheProvider(org.hibernate.cache.CacheProvider)"><!-- --></A><H3>
setCacheProvider</H3>
<PRE>
<FONT SIZE="-1"><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Deprecated.html?is-external=true" title="class or interface in java.lang">@Deprecated</A>
</FONT>public void <B>setCacheProvider</B>(org.hibernate.cache.CacheProvider&nbsp;cacheProvider)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>as of Spring 3.0, following Hibernate 3.3's deprecation
 of the CacheProvider SPI</I>
<P>
<DD>Set the Hibernate CacheProvider to use for the SessionFactory.
 Allows for using a Spring-managed CacheProvider instance.
 <p>Note: If this is set, the Hibernate settings should not define a
 cache provider to avoid meaningless double configuration.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setCacheRegionFactory(java.lang.Object)"><CODE>setCacheRegionFactory(java.lang.Object)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setLobHandler(org.springframework.jdbc.support.lob.LobHandler)"><!-- --></A><H3>
setLobHandler</H3>
<PRE>
public void <B>setLobHandler</B>(<A HREF="../../../../org/springframework/jdbc/support/lob/LobHandler.html" title="interface in org.springframework.jdbc.support.lob">LobHandler</A>&nbsp;lobHandler)</PRE>
<DL>
<DD>Set the LobHandler to be used by the SessionFactory.
 Will be exposed at config time for UserType implementations.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#getConfigTimeLobHandler()"><CODE>getConfigTimeLobHandler()</CODE></A>, 
<CODE>UserType</CODE>, 
<A HREF="../../../../org/springframework/orm/hibernate3/support/ClobStringType.html" title="class in org.springframework.orm.hibernate3.support"><CODE>ClobStringType</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/support/BlobByteArrayType.html" title="class in org.springframework.orm.hibernate3.support"><CODE>BlobByteArrayType</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/support/BlobSerializableType.html" title="class in org.springframework.orm.hibernate3.support"><CODE>BlobSerializableType</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setEntityInterceptor(org.hibernate.Interceptor)"><!-- --></A><H3>
setEntityInterceptor</H3>
<PRE>
public void <B>setEntityInterceptor</B>(org.hibernate.Interceptor&nbsp;entityInterceptor)</PRE>
<DL>
<DD>Set a Hibernate entity interceptor that allows to inspect and change
 property values before writing to and reading from the database.
 Will get applied to any new Session created by this factory.
 <p>Such an interceptor can either be set at the SessionFactory level, i.e. on
 LocalSessionFactoryBean, or at the Session level, i.e. on HibernateTemplate,
 HibernateInterceptor, and HibernateTransactionManager. It's preferable to set
 it on LocalSessionFactoryBean or HibernateTransactionManager to avoid repeated
 configuration and guarantee consistent behavior in transactions.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setEntityInterceptor(org.hibernate.Interceptor)"><CODE>HibernateAccessor.setEntityInterceptor(org.hibernate.Interceptor)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setEntityInterceptor(org.hibernate.Interceptor)"><CODE>HibernateAccessor.setEntityInterceptor(org.hibernate.Interceptor)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTransactionManager.html#setEntityInterceptor(org.hibernate.Interceptor)"><CODE>HibernateTransactionManager.setEntityInterceptor(org.hibernate.Interceptor)</CODE></A>, 
<CODE>Configuration.setInterceptor(org.hibernate.Interceptor)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setNamingStrategy(org.hibernate.cfg.NamingStrategy)"><!-- --></A><H3>
setNamingStrategy</H3>
<PRE>
public void <B>setNamingStrategy</B>(org.hibernate.cfg.NamingStrategy&nbsp;namingStrategy)</PRE>
<DL>
<DD>Set a Hibernate NamingStrategy for the SessionFactory, determining the
 physical column and table names given the info in the mapping document.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><CODE>Configuration.setNamingStrategy(org.hibernate.cfg.NamingStrategy)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setTypeDefinitions(org.springframework.orm.hibernate3.TypeDefinitionBean[])"><!-- --></A><H3>
setTypeDefinitions</H3>
<PRE>
public void <B>setTypeDefinitions</B>(<A HREF="../../../../org/springframework/orm/hibernate3/TypeDefinitionBean.html" title="class in org.springframework.orm.hibernate3">TypeDefinitionBean</A>[]&nbsp;typeDefinitions)</PRE>
<DL>
<DD>Specify the Hibernate type definitions to register with the SessionFactory,
 as Spring TypeDefinitionBean instances. This is an alternative to specifying
 <&lt;typedef&gt; elements in Hibernate mapping files.
 <p>Unfortunately, Hibernate itself does not define a complete object that
 represents a type definition, hence the need for Spring's TypeDefinitionBean.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/TypeDefinitionBean.html" title="class in org.springframework.orm.hibernate3"><CODE>TypeDefinitionBean</CODE></A>, 
<CODE>Mappings.addTypeDef(String, String, java.util.Properties)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setFilterDefinitions(org.hibernate.engine.FilterDefinition[])"><!-- --></A><H3>
setFilterDefinitions</H3>
<PRE>
public void <B>setFilterDefinitions</B>(org.hibernate.engine.FilterDefinition[]&nbsp;filterDefinitions)</PRE>
<DL>
<DD>Specify the Hibernate FilterDefinitions to register with the SessionFactory.
 This is an alternative to specifying <&lt;filter-def&gt; elements in
 Hibernate mapping files.
 <p>Typically, the passed-in FilterDefinition objects will have been defined
 as Spring FilterDefinitionFactoryBeans, probably as inner beans within the
 LocalSessionFactoryBean definition.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.html" title="class in org.springframework.orm.hibernate3"><CODE>FilterDefinitionFactoryBean</CODE></A>, 
<CODE>Configuration.addFilterDefinition(org.hibernate.engine.FilterDefinition)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setEntityCacheStrategies(java.util.Properties)"><!-- --></A><H3>
setEntityCacheStrategies</H3>
<PRE>
public void <B>setEntityCacheStrategies</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A>&nbsp;entityCacheStrategies)</PRE>
<DL>
<DD>Specify the cache strategies for entities (persistent classes or named entities).
 This configuration setting corresponds to the &lt;class-cache&gt; entry
 in the "hibernate.cfg.xml" configuration format.
 <p>For example:
 <pre>
 &lt;property name="entityCacheStrategies"&gt;
   &lt;props&gt;
     &lt;prop key="com.mycompany.Customer"&gt;read-write&lt;/prop&gt;
     &lt;prop key="com.mycompany.Product"&gt;read-only,myRegion&lt;/prop&gt;
   &lt;/props&gt;
 &lt;/property&gt;</pre>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityCacheStrategies</CODE> - properties that define entity cache strategies,
 with class names as keys and cache concurrency strategies as values<DT><B>See Also:</B><DD><CODE>Configuration.setCacheConcurrencyStrategy(String, String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setCollectionCacheStrategies(java.util.Properties)"><!-- --></A><H3>
setCollectionCacheStrategies</H3>
<PRE>
public void <B>setCollectionCacheStrategies</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Properties.html?is-external=true" title="class or interface in java.util">Properties</A>&nbsp;collectionCacheStrategies)</PRE>
<DL>
<DD>Specify the cache strategies for persistent collections (with specific roles).
 This configuration setting corresponds to the &lt;collection-cache&gt; entry
 in the "hibernate.cfg.xml" configuration format.
 <p>For example:
 <pre>
 &lt;property name="collectionCacheStrategies"&gt;
   &lt;props&gt;
     &lt;prop key="com.mycompany.Order.items">read-write&lt;/prop&gt;
     &lt;prop key="com.mycompany.Product.categories"&gt;read-only,myRegion&lt;/prop&gt;
   &lt;/props&gt;
 &lt;/property&gt;</pre>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>collectionCacheStrategies</CODE> - properties that define collection cache strategies,
 with collection roles as keys and cache concurrency strategies as values<DT><B>See Also:</B><DD><CODE>Configuration.setCollectionCacheConcurrencyStrategy(String, String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setEventListeners(java.util.Map)"><!-- --></A><H3>
setEventListeners</H3>
<PRE>
public void <B>setEventListeners</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;&nbsp;eventListeners)</PRE>
<DL>
<DD>Specify the Hibernate event listeners to register, with listener types
 as keys and listener objects as values. Instead of a single listener object,
 you can also pass in a list or set of listeners objects as value.
 <p>See the Hibernate documentation for further details on listener types
 and associated listener interfaces.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>eventListeners</CODE> - Map with listener type Strings as keys and
 listener objects as values<DT><B>See Also:</B><DD><CODE>Configuration.setListener(String, Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setSchemaUpdate(boolean)"><!-- --></A><H3>
setSchemaUpdate</H3>
<PRE>
public void <B>setSchemaUpdate</B>(boolean&nbsp;schemaUpdate)</PRE>
<DL>
<DD>Set whether to execute a schema update after SessionFactory initialization.
 <p>For details on how to make schema update scripts work, see the Hibernate
 documentation, as this class leverages the same schema update script support
 in org.hibernate.cfg.Configuration as Hibernate's own SchemaUpdate tool.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><CODE>Configuration.generateSchemaUpdateScript(org.hibernate.dialect.Dialect, org.hibernate.tool.hbm2ddl.DatabaseMetadata)</CODE>, 
<CODE>SchemaUpdate</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setBeanClassLoader(java.lang.ClassLoader)"><!-- --></A><H3>
setBeanClassLoader</H3>
<PRE>
public void <B>setBeanClassLoader</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A>&nbsp;beanClassLoader)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/BeanClassLoaderAware.html#setBeanClassLoader(java.lang.ClassLoader)">BeanClassLoaderAware</A></CODE></B></DD>
<DD>Callback that supplies the bean <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang"><CODE>class loader</CODE></A> to
 a bean instance.
 <p>Invoked <i>after</i> the population of normal bean properties but
 <i>before</i> an initialization callback such as
 <A HREF="../../../../org/springframework/beans/factory/InitializingBean.html" title="interface in org.springframework.beans.factory"><CODE>InitializingBean's</CODE></A>
 <A HREF="../../../../org/springframework/beans/factory/InitializingBean.html#afterPropertiesSet()"><CODE>InitializingBean.afterPropertiesSet()</CODE></A>
 method or a custom init-method.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanClassLoaderAware.html#setBeanClassLoader(java.lang.ClassLoader)">setBeanClassLoader</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/BeanClassLoaderAware.html" title="interface in org.springframework.beans.factory">BeanClassLoaderAware</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanClassLoader</CODE> - the owning class loader; may be <code>null</code> in
 which case a default <code>ClassLoader</code> must be used, for example
 the <code>ClassLoader</code> obtained via
 <A HREF="../../../../org/springframework/util/ClassUtils.html#getDefaultClassLoader()"><CODE>ClassUtils.getDefaultClassLoader()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="buildSessionFactory()"><!-- --></A><H3>
buildSessionFactory</H3>
<PRE>
protected org.hibernate.SessionFactory <B>buildSessionFactory</B>()
                                                    throws <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang">Exception</A></PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#buildSessionFactory()">AbstractSessionFactoryBean</A></CODE></B></DD>
<DD>Build the underlying Hibernate SessionFactory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#buildSessionFactory()">buildSessionFactory</A></CODE> in class <CODE><A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html" title="class in org.springframework.orm.hibernate3">AbstractSessionFactoryBean</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the raw SessionFactory (potentially to be wrapped with a
 transaction-aware proxy before it is exposed to the application)
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang">Exception</A></CODE> - in case of initialization failure</DL>
</DD>
</DL>
<HR>

<A NAME="newConfiguration()"><!-- --></A><H3>
newConfiguration</H3>
<PRE>
protected org.hibernate.cfg.Configuration <B>newConfiguration</B>()
                                                    throws org.hibernate.HibernateException</PRE>
<DL>
<DD>Subclasses can override this method to perform custom initialization
 of the Configuration instance used for SessionFactory creation.
 The properties of this LocalSessionFactoryBean will be applied to
 the Configuration object that gets returned here.
 <p>The default implementation creates a new Configuration instance.
 A custom implementation could prepare the instance in a specific way,
 or use a custom Configuration subclass.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the Configuration instance
<DT><B>Throws:</B>
<DD><CODE>org.hibernate.HibernateException</CODE> - in case of Hibernate initialization errors<DT><B>See Also:</B><DD><CODE>Configuration.Configuration()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="postProcessMappings(org.hibernate.cfg.Configuration)"><!-- --></A><H3>
postProcessMappings</H3>
<PRE>
protected void <B>postProcessMappings</B>(org.hibernate.cfg.Configuration&nbsp;config)
                            throws org.hibernate.HibernateException</PRE>
<DL>
<DD>To be implemented by subclasses that want to to register further mappings
 on the Configuration object after this FactoryBean registered its specified
 mappings.
 <p>Invoked <i>before</i> the <code>Configuration.buildMappings()</code> call,
 so that it can still extend and modify the mapping information.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>config</CODE> - the current Configuration object
<DT><B>Throws:</B>
<DD><CODE>org.hibernate.HibernateException</CODE> - in case of Hibernate initialization errors<DT><B>See Also:</B><DD><CODE>Configuration.buildMappings()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="postProcessConfiguration(org.hibernate.cfg.Configuration)"><!-- --></A><H3>
postProcessConfiguration</H3>
<PRE>
protected void <B>postProcessConfiguration</B>(org.hibernate.cfg.Configuration&nbsp;config)
                                 throws org.hibernate.HibernateException</PRE>
<DL>
<DD>To be implemented by subclasses that want to to perform custom
 post-processing of the Configuration object after this FactoryBean
 performed its default initialization.
 <p>Invoked <i>after</i> the <code>Configuration.buildMappings()</code> call,
 so that it can operate on the completed and fully parsed mapping information.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>config</CODE> - the current Configuration object
<DT><B>Throws:</B>
<DD><CODE>org.hibernate.HibernateException</CODE> - in case of Hibernate initialization errors<DT><B>See Also:</B><DD><CODE>Configuration.buildMappings()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="newSessionFactory(org.hibernate.cfg.Configuration)"><!-- --></A><H3>
newSessionFactory</H3>
<PRE>
protected org.hibernate.SessionFactory <B>newSessionFactory</B>(org.hibernate.cfg.Configuration&nbsp;config)
                                                  throws org.hibernate.HibernateException</PRE>
<DL>
<DD>Subclasses can override this method to perform custom initialization
 of the SessionFactory instance, creating it via the given Configuration
 object that got prepared by this LocalSessionFactoryBean.
 <p>The default implementation invokes Configuration's buildSessionFactory.
 A custom implementation could prepare the instance in a specific way,
 or use a custom SessionFactoryImpl subclass.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>config</CODE> - Configuration prepared by this LocalSessionFactoryBean
<DT><B>Returns:</B><DD>the SessionFactory instance
<DT><B>Throws:</B>
<DD><CODE>org.hibernate.HibernateException</CODE> - in case of Hibernate initialization errors<DT><B>See Also:</B><DD><CODE>Configuration.buildSessionFactory()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getConfiguration()"><!-- --></A><H3>
getConfiguration</H3>
<PRE>
public final org.hibernate.cfg.Configuration <B>getConfiguration</B>()</PRE>
<DL>
<DD>Return the Configuration object used to build the SessionFactory.
 Allows access to configuration metadata stored there (rarely needed).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></CODE> - if the Configuration object has not been initialized yet</DL>
</DD>
</DL>
<HR>

<A NAME="afterSessionFactoryCreation()"><!-- --></A><H3>
afterSessionFactoryCreation</H3>
<PRE>
protected void <B>afterSessionFactoryCreation</B>()
                                    throws <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang">Exception</A></PRE>
<DL>
<DD>Executes schema update if requested.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#afterSessionFactoryCreation()">afterSessionFactoryCreation</A></CODE> in class <CODE><A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html" title="class in org.springframework.orm.hibernate3">AbstractSessionFactoryBean</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang">Exception</A></CODE> - in case of initialization failure<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setSchemaUpdate(boolean)"><CODE>setSchemaUpdate(boolean)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#updateDatabaseSchema()"><CODE>updateDatabaseSchema()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="destroy()"><!-- --></A><H3>
destroy</H3>
<PRE>
public void <B>destroy</B>()
             throws org.hibernate.HibernateException</PRE>
<DL>
<DD>Allows for schema export on shutdown.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/DisposableBean.html#destroy()">destroy</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/DisposableBean.html" title="interface in org.springframework.beans.factory">DisposableBean</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#destroy()">destroy</A></CODE> in class <CODE><A HREF="../../../../org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html" title="class in org.springframework.orm.hibernate3">AbstractSessionFactoryBean</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.hibernate.HibernateException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="updateDatabaseSchema()"><!-- --></A><H3>
updateDatabaseSchema</H3>
<PRE>
public void <B>updateDatabaseSchema</B>()
                          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD>Execute schema update script, determined by the Configuration object
 used for creating the SessionFactory. A replacement for Hibernate's
 SchemaUpdate class, for automatically executing schema update scripts
 on application startup. Can also be invoked manually.
 <p>Fetch the LocalSessionFactoryBean itself rather than the exposed
 SessionFactory to be able to invoke this method, e.g. via
 <code>LocalSessionFactoryBean lsfb = (LocalSessionFactoryBean) ctx.getBean("&mySessionFactory");</code>.
 <p>Uses the SessionFactory that this bean generates for accessing a
 JDBC connection to perform the script.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of script execution errors<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setSchemaUpdate(boolean)"><CODE>setSchemaUpdate(boolean)</CODE></A>, 
<CODE>Configuration.generateSchemaUpdateScript(org.hibernate.dialect.Dialect, org.hibernate.tool.hbm2ddl.DatabaseMetadata)</CODE>, 
<CODE>SchemaUpdate</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="validateDatabaseSchema()"><!-- --></A><H3>
validateDatabaseSchema</H3>
<PRE>
public void <B>validateDatabaseSchema</B>()
                            throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD>Execute schema creation script, determined by the Configuration object
 used for creating the SessionFactory. A replacement for Hibernate's
 SchemaValidator class, to be invoked after application startup.
 <p>Fetch the LocalSessionFactoryBean itself rather than the exposed
 SessionFactory to be able to invoke this method, e.g. via
 <code>LocalSessionFactoryBean lsfb = (LocalSessionFactoryBean) ctx.getBean("&mySessionFactory");</code>.
 <p>Uses the SessionFactory that this bean generates for accessing a
 JDBC connection to perform the script.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of script execution errors<DT><B>See Also:</B><DD><CODE>Configuration.validateSchema(org.hibernate.dialect.Dialect, org.hibernate.tool.hbm2ddl.DatabaseMetadata)</CODE>, 
<CODE>SchemaValidator</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="dropDatabaseSchema()"><!-- --></A><H3>
dropDatabaseSchema</H3>
<PRE>
public void <B>dropDatabaseSchema</B>()
                        throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD>Execute schema drop script, determined by the Configuration object
 used for creating the SessionFactory. A replacement for Hibernate's
 SchemaExport class, to be invoked on application setup.
 <p>Fetch the LocalSessionFactoryBean itself rather than the exposed
 SessionFactory to be able to invoke this method, e.g. via
 <code>LocalSessionFactoryBean lsfb = (LocalSessionFactoryBean) ctx.getBean("&mySessionFactory");</code>.
 <p>Uses the SessionFactory that this bean generates for accessing a
 JDBC connection to perform the script.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of script execution errors<DT><B>See Also:</B><DD><CODE>Configuration.generateDropSchemaScript(org.hibernate.dialect.Dialect)</CODE>, 
<CODE>SchemaExport.drop(boolean, boolean)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="createDatabaseSchema()"><!-- --></A><H3>
createDatabaseSchema</H3>
<PRE>
public void <B>createDatabaseSchema</B>()
                          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD>Execute schema creation script, determined by the Configuration object
 used for creating the SessionFactory. A replacement for Hibernate's
 SchemaExport class, to be invoked on application setup.
 <p>Fetch the LocalSessionFactoryBean itself rather than the exposed
 SessionFactory to be able to invoke this method, e.g. via
 <code>LocalSessionFactoryBean lsfb = (LocalSessionFactoryBean) ctx.getBean("&mySessionFactory");</code>.
 <p>Uses the SessionFactory that this bean generates for accessing a
 JDBC connection to perform the script.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of script execution errors<DT><B>See Also:</B><DD><CODE>Configuration.generateSchemaCreationScript(org.hibernate.dialect.Dialect)</CODE>, 
<CODE>SchemaExport.create(boolean, boolean)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="executeSchemaScript(java.sql.Connection, java.lang.String[])"><!-- --></A><H3>
executeSchemaScript</H3>
<PRE>
protected void <B>executeSchemaScript</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html?is-external=true" title="class or interface in java.sql">Connection</A>&nbsp;con,
                                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]&nbsp;sql)
                            throws <A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></PRE>
<DL>
<DD>Execute the given schema script on the given JDBC Connection.
 <p>Note that the default implementation will log unsuccessful statements
 and continue to execute. Override the <code>executeSchemaStatement</code>
 method to treat failures differently.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>con</CODE> - the JDBC Connection to execute the script on<DD><CODE>sql</CODE> - the SQL statements to execute
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></CODE> - if thrown by JDBC methods<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#executeSchemaStatement(java.sql.Statement, java.lang.String)"><CODE>executeSchemaStatement(java.sql.Statement, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="executeSchemaStatement(java.sql.Statement, java.lang.String)"><!-- --></A><H3>
executeSchemaStatement</H3>
<PRE>
protected void <B>executeSchemaStatement</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html?is-external=true" title="class or interface in java.sql">Statement</A>&nbsp;stmt,
                                      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)
                               throws <A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></PRE>
<DL>
<DD>Execute the given schema SQL on the given JDBC Statement.
 <p>Note that the default implementation will log unsuccessful statements
 and continue to execute. Override this method to treat failures differently.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>stmt</CODE> - the JDBC Statement to execute the SQL on<DD><CODE>sql</CODE> - the SQL statement to execute
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></CODE> - if thrown by JDBC methods (and considered fatal)</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/springframework/orm/hibernate3/LocalRegionFactoryProxy.html" title="class in org.springframework.orm.hibernate3"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/springframework/orm/hibernate3/LocalTransactionManagerLookup.html" title="class in org.springframework.orm.hibernate3"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/orm/hibernate3/LocalSessionFactoryBean.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="LocalSessionFactoryBean.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_org.springframework.orm.hibernate3.AbstractSessionFactoryBean">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
