<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:24:06 BST 2010 -->
<TITLE>
HibernateAccessor
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="HibernateAccessor";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.html" title="class in org.springframework.orm.hibernate3"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/orm/hibernate3/HibernateAccessor.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="HibernateAccessor.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.orm.hibernate3</FONT>
<BR>
Class HibernateAccessor</H2>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>org.springframework.orm.hibernate3.HibernateAccessor</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../org/springframework/beans/factory/BeanFactoryAware.html" title="interface in org.springframework.beans.factory">BeanFactoryAware</A>, <A HREF="../../../../org/springframework/beans/factory/InitializingBean.html" title="interface in org.springframework.beans.factory">InitializingBean</A></DD>
</DL>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateInterceptor.html" title="class in org.springframework.orm.hibernate3">HibernateInterceptor</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html" title="class in org.springframework.orm.hibernate3">HibernateTemplate</A>, <A HREF="../../../../org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.html" title="class in org.springframework.orm.hibernate3.support">OpenSessionInViewInterceptor</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public abstract class <B>HibernateAccessor</B><DT>extends <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A><DT>implements <A HREF="../../../../org/springframework/beans/factory/InitializingBean.html" title="interface in org.springframework.beans.factory">InitializingBean</A>, <A HREF="../../../../org/springframework/beans/factory/BeanFactoryAware.html" title="interface in org.springframework.beans.factory">BeanFactoryAware</A></DL>
</PRE>

<P>
Base class for <A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html" title="class in org.springframework.orm.hibernate3"><CODE>HibernateTemplate</CODE></A> and <A HREF="../../../../org/springframework/orm/hibernate3/HibernateInterceptor.html" title="class in org.springframework.orm.hibernate3"><CODE>HibernateInterceptor</CODE></A>,
 defining common properties such as SessionFactory and flushing behavior.

 <p>Not intended to be used directly.
 See <A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html" title="class in org.springframework.orm.hibernate3"><CODE>HibernateTemplate</CODE></A> and <A HREF="../../../../org/springframework/orm/hibernate3/HibernateInterceptor.html" title="class in org.springframework.orm.hibernate3"><CODE>HibernateInterceptor</CODE></A>.
<P>

<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>1.2</DD>
<DT><B>Author:</B></DT>
  <DD>Juergen Hoeller</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html" title="class in org.springframework.orm.hibernate3"><CODE>HibernateTemplate</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateInterceptor.html" title="class in org.springframework.orm.hibernate3"><CODE>HibernateInterceptor</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushMode(int)"><CODE>setFlushMode(int)</CODE></A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#FLUSH_ALWAYS">FLUSH_ALWAYS</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Flushing before every query statement is rarely necessary.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#FLUSH_AUTO">FLUSH_AUTO</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Automatic flushing is the default mode for a Hibernate Session.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#FLUSH_COMMIT">FLUSH_COMMIT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Flushing at commit only is intended for units of work where no
 intermediate flushing is desired, not even for find operations
 that might involve already modified instances.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#FLUSH_EAGER">FLUSH_EAGER</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Eager flushing leads to immediate synchronization with the database,
 even if in a transaction.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#FLUSH_NEVER">FLUSH_NEVER</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Never flush is a good strategy for read-only units of work.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://jakarta.apache.org/commons/logging/apidocs/org/apache/commons/logging/Log.html?is-external=true" title="class or interface in org.apache.commons.logging">Log</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#logger">logger</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger available to subclasses</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#HibernateAccessor()">HibernateAccessor</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#afterPropertiesSet()">afterPropertiesSet</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoked by a BeanFactory after it has set all bean properties supplied
 (and satisfied BeanFactoryAware and ApplicationContextAware).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;org.hibernate.FlushMode</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#applyFlushMode(org.hibernate.Session, boolean)">applyFlushMode</A></B>(org.hibernate.Session&nbsp;session,
               boolean&nbsp;existingTransaction)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Apply the flush mode that's been specified for this accessor
 to the given Session.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#convertHibernateAccessException(org.hibernate.HibernateException)">convertHibernateAccessException</A></B>(org.hibernate.HibernateException&nbsp;ex)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convert the given HibernateException to an appropriate exception
 from the <code>org.springframework.dao</code> hierarchy.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#convertJdbcAccessException(org.hibernate.JDBCException, org.springframework.jdbc.support.SQLExceptionTranslator)">convertJdbcAccessException</A></B>(org.hibernate.JDBCException&nbsp;ex,
                           <A HREF="../../../../org/springframework/jdbc/support/SQLExceptionTranslator.html" title="interface in org.springframework.jdbc.support">SQLExceptionTranslator</A>&nbsp;translator)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convert the given Hibernate JDBCException to an appropriate exception
 from the <code>org.springframework.dao</code> hierarchy, using the
 given SQLExceptionTranslator.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#convertJdbcAccessException(java.sql.SQLException)">convertJdbcAccessException</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A>&nbsp;ex)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convert the given SQLException to an appropriate exception from the
 <code>org.springframework.dao</code> hierarchy.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#disableFilters(org.hibernate.Session)">disableFilters</A></B>(org.hibernate.Session&nbsp;session)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Disable the specified filters on the given Session.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#enableFilters(org.hibernate.Session)">enableFilters</A></B>(org.hibernate.Session&nbsp;session)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enable the specified filters on the given Session.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#flushIfNecessary(org.hibernate.Session, boolean)">flushIfNecessary</A></B>(org.hibernate.Session&nbsp;session,
                 boolean&nbsp;existingTransaction)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Flush the given Hibernate Session if necessary.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../org/springframework/jdbc/support/SQLExceptionTranslator.html" title="interface in org.springframework.jdbc.support">SQLExceptionTranslator</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#getDefaultJdbcExceptionTranslator()">getDefaultJdbcExceptionTranslator</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Obtain a default SQLExceptionTranslator, lazily creating it if necessary.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.hibernate.Interceptor</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#getEntityInterceptor()">getEntityInterceptor</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the current Hibernate entity interceptor, or <code>null</code> if none.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#getFilterNames()">getFilterNames</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the names of Hibernate filters to be activated, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#getFlushMode()">getFlushMode</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return if a flush should be forced after executing the callback code.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/springframework/jdbc/support/SQLExceptionTranslator.html" title="interface in org.springframework.jdbc.support">SQLExceptionTranslator</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#getJdbcExceptionTranslator()">getJdbcExceptionTranslator</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the JDBC exception translator for this instance, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.hibernate.SessionFactory</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#getSessionFactory()">getSessionFactory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the Hibernate SessionFactory that should be used to create
 Hibernate Sessions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setBeanFactory(org.springframework.beans.factory.BeanFactory)">setBeanFactory</A></B>(<A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A>&nbsp;beanFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The bean factory just needs to be known for resolving entity interceptor
 bean names.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setEntityInterceptor(org.hibernate.Interceptor)">setEntityInterceptor</A></B>(org.hibernate.Interceptor&nbsp;entityInterceptor)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set a Hibernate entity interceptor that allows to inspect and change
 property values before writing to and reading from the database.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setEntityInterceptorBeanName(java.lang.String)">setEntityInterceptorBeanName</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityInterceptorBeanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the bean name of a Hibernate entity interceptor that allows to inspect
 and change property values before writing to and reading from the database.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFilterName(java.lang.String)">setFilterName</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;filter)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the name of a Hibernate filter to be activated for all
 Sessions that this accessor works with.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFilterNames(java.lang.String[])">setFilterNames</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]&nbsp;filterNames)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set one or more names of Hibernate filters to be activated for all
 Sessions that this accessor works with.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushMode(int)">setFlushMode</A></B>(int&nbsp;flushMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the flush behavior to one of the constants in this class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushModeName(java.lang.String)">setFlushModeName</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;constantName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the flush behavior by the name of the respective constant
 in this class, e.g.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setJdbcExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)">setJdbcExceptionTranslator</A></B>(<A HREF="../../../../org/springframework/jdbc/support/SQLExceptionTranslator.html" title="interface in org.springframework.jdbc.support">SQLExceptionTranslator</A>&nbsp;jdbcExceptionTranslator)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the JDBC exception translator for this instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setSessionFactory(org.hibernate.SessionFactory)">setSessionFactory</A></B>(org.hibernate.SessionFactory&nbsp;sessionFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the Hibernate SessionFactory that should be used to create
 Hibernate Sessions.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="FLUSH_NEVER"><!-- --></A><H3>
FLUSH_NEVER</H3>
<PRE>
public static final int <B>FLUSH_NEVER</B></PRE>
<DL>
<DD>Never flush is a good strategy for read-only units of work.
 Hibernate will not track and look for changes in this case,
 avoiding any overhead of modification detection.
 <p>In case of an existing Session, FLUSH_NEVER will turn the flush mode
 to NEVER for the scope of the current operation, resetting the previous
 flush mode afterwards.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushMode(int)"><CODE>setFlushMode(int)</CODE></A>, 
<A HREF="../../../../constant-values.html#org.springframework.orm.hibernate3.HibernateAccessor.FLUSH_NEVER">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="FLUSH_AUTO"><!-- --></A><H3>
FLUSH_AUTO</H3>
<PRE>
public static final int <B>FLUSH_AUTO</B></PRE>
<DL>
<DD>Automatic flushing is the default mode for a Hibernate Session.
 A session will get flushed on transaction commit, and on certain find
 operations that might involve already modified instances, but not
 after each unit of work like with eager flushing.
 <p>In case of an existing Session, FLUSH_AUTO will participate in the
 existing flush mode, not modifying it for the current operation.
 This in particular means that this setting will not modify an existing
 flush mode NEVER, in contrast to FLUSH_EAGER.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushMode(int)"><CODE>setFlushMode(int)</CODE></A>, 
<A HREF="../../../../constant-values.html#org.springframework.orm.hibernate3.HibernateAccessor.FLUSH_AUTO">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="FLUSH_EAGER"><!-- --></A><H3>
FLUSH_EAGER</H3>
<PRE>
public static final int <B>FLUSH_EAGER</B></PRE>
<DL>
<DD>Eager flushing leads to immediate synchronization with the database,
 even if in a transaction. This causes inconsistencies to show up and throw
 a respective exception immediately, and JDBC access code that participates
 in the same transaction will see the changes as the database is already
 aware of them then. But the drawbacks are:
 <ul>
 <li>additional communication roundtrips with the database, instead of a
 single batch at transaction commit;
 <li>the fact that an actual database rollback is needed if the Hibernate
 transaction rolls back (due to already submitted SQL statements).
 </ul>
 <p>In case of an existing Session, FLUSH_EAGER will turn the flush mode
 to AUTO for the scope of the current operation and issue a flush at the
 end, resetting the previous flush mode afterwards.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushMode(int)"><CODE>setFlushMode(int)</CODE></A>, 
<A HREF="../../../../constant-values.html#org.springframework.orm.hibernate3.HibernateAccessor.FLUSH_EAGER">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="FLUSH_COMMIT"><!-- --></A><H3>
FLUSH_COMMIT</H3>
<PRE>
public static final int <B>FLUSH_COMMIT</B></PRE>
<DL>
<DD>Flushing at commit only is intended for units of work where no
 intermediate flushing is desired, not even for find operations
 that might involve already modified instances.
 <p>In case of an existing Session, FLUSH_COMMIT will turn the flush mode
 to COMMIT for the scope of the current operation, resetting the previous
 flush mode afterwards. The only exception is an existing flush mode
 NEVER, which will not be modified through this setting.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushMode(int)"><CODE>setFlushMode(int)</CODE></A>, 
<A HREF="../../../../constant-values.html#org.springframework.orm.hibernate3.HibernateAccessor.FLUSH_COMMIT">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="FLUSH_ALWAYS"><!-- --></A><H3>
FLUSH_ALWAYS</H3>
<PRE>
public static final int <B>FLUSH_ALWAYS</B></PRE>
<DL>
<DD>Flushing before every query statement is rarely necessary.
 It is only available for special needs.
 <p>In case of an existing Session, FLUSH_ALWAYS will turn the flush mode
 to ALWAYS for the scope of the current operation, resetting the previous
 flush mode afterwards.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushMode(int)"><CODE>setFlushMode(int)</CODE></A>, 
<A HREF="../../../../constant-values.html#org.springframework.orm.hibernate3.HibernateAccessor.FLUSH_ALWAYS">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="logger"><!-- --></A><H3>
logger</H3>
<PRE>
protected final <A HREF="http://jakarta.apache.org/commons/logging/apidocs/org/apache/commons/logging/Log.html?is-external=true" title="class or interface in org.apache.commons.logging">Log</A> <B>logger</B></PRE>
<DL>
<DD>Logger available to subclasses
<P>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="HibernateAccessor()"><!-- --></A><H3>
HibernateAccessor</H3>
<PRE>
public <B>HibernateAccessor</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="setSessionFactory(org.hibernate.SessionFactory)"><!-- --></A><H3>
setSessionFactory</H3>
<PRE>
public void <B>setSessionFactory</B>(org.hibernate.SessionFactory&nbsp;sessionFactory)</PRE>
<DL>
<DD>Set the Hibernate SessionFactory that should be used to create
 Hibernate Sessions.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getSessionFactory()"><!-- --></A><H3>
getSessionFactory</H3>
<PRE>
public org.hibernate.SessionFactory <B>getSessionFactory</B>()</PRE>
<DL>
<DD>Return the Hibernate SessionFactory that should be used to create
 Hibernate Sessions.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setEntityInterceptorBeanName(java.lang.String)"><!-- --></A><H3>
setEntityInterceptorBeanName</H3>
<PRE>
public void <B>setEntityInterceptorBeanName</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityInterceptorBeanName)</PRE>
<DL>
<DD>Set the bean name of a Hibernate entity interceptor that allows to inspect
 and change property values before writing to and reading from the database.
 Will get applied to any new Session created by this transaction manager.
 <p>Requires the bean factory to be known, to be able to resolve the bean
 name to an interceptor instance on session creation. Typically used for
 prototype interceptors, i.e. a new interceptor instance per session.
 <p>Can also be used for shared interceptor instances, but it is recommended
 to set the interceptor reference directly in such a scenario.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityInterceptorBeanName</CODE> - the name of the entity interceptor in
 the bean factory<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setBeanFactory(org.springframework.beans.factory.BeanFactory)"><CODE>setBeanFactory(org.springframework.beans.factory.BeanFactory)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setEntityInterceptor(org.hibernate.Interceptor)"><CODE>setEntityInterceptor(org.hibernate.Interceptor)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setEntityInterceptor(org.hibernate.Interceptor)"><!-- --></A><H3>
setEntityInterceptor</H3>
<PRE>
public void <B>setEntityInterceptor</B>(org.hibernate.Interceptor&nbsp;entityInterceptor)</PRE>
<DL>
<DD>Set a Hibernate entity interceptor that allows to inspect and change
 property values before writing to and reading from the database.
 Will get applied to any <b>new</b> Session created by this object.
 <p>Such an interceptor can either be set at the SessionFactory level,
 i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on
 HibernateTemplate, HibernateInterceptor, and HibernateTransactionManager.
 It's preferable to set it on LocalSessionFactoryBean or HibernateTransactionManager
 to avoid repeated configuration and guarantee consistent behavior in transactions.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setEntityInterceptorBeanName(java.lang.String)"><CODE>setEntityInterceptorBeanName(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setEntityInterceptor(org.hibernate.Interceptor)"><CODE>LocalSessionFactoryBean.setEntityInterceptor(org.hibernate.Interceptor)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTransactionManager.html#setEntityInterceptor(org.hibernate.Interceptor)"><CODE>HibernateTransactionManager.setEntityInterceptor(org.hibernate.Interceptor)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getEntityInterceptor()"><!-- --></A><H3>
getEntityInterceptor</H3>
<PRE>
public org.hibernate.Interceptor <B>getEntityInterceptor</B>()
                                               throws <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A>,
                                                      <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD>Return the current Hibernate entity interceptor, or <code>null</code> if none.
 Resolves an entity interceptor bean name via the bean factory,
 if necessary.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></CODE> - if bean name specified but no bean factory set
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if bean name resolution via the bean factory failed<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setEntityInterceptor(org.hibernate.Interceptor)"><CODE>setEntityInterceptor(org.hibernate.Interceptor)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setEntityInterceptorBeanName(java.lang.String)"><CODE>setEntityInterceptorBeanName(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setBeanFactory(org.springframework.beans.factory.BeanFactory)"><CODE>setBeanFactory(org.springframework.beans.factory.BeanFactory)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setJdbcExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)"><!-- --></A><H3>
setJdbcExceptionTranslator</H3>
<PRE>
public void <B>setJdbcExceptionTranslator</B>(<A HREF="../../../../org/springframework/jdbc/support/SQLExceptionTranslator.html" title="interface in org.springframework.jdbc.support">SQLExceptionTranslator</A>&nbsp;jdbcExceptionTranslator)</PRE>
<DL>
<DD>Set the JDBC exception translator for this instance.
 <p>Applied to any SQLException root cause of a Hibernate JDBCException,
 overriding Hibernate's default SQLException translation (which is
 based on Hibernate's Dialect for a specific target database).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>jdbcExceptionTranslator</CODE> - the exception translator<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql"><CODE>SQLException</CODE></A>, 
<CODE>JDBCException</CODE>, 
<A HREF="../../../../org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslator.html" title="class in org.springframework.jdbc.support"><CODE>SQLErrorCodeSQLExceptionTranslator</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/support/SQLStateSQLExceptionTranslator.html" title="class in org.springframework.jdbc.support"><CODE>SQLStateSQLExceptionTranslator</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getJdbcExceptionTranslator()"><!-- --></A><H3>
getJdbcExceptionTranslator</H3>
<PRE>
public <A HREF="../../../../org/springframework/jdbc/support/SQLExceptionTranslator.html" title="interface in org.springframework.jdbc.support">SQLExceptionTranslator</A> <B>getJdbcExceptionTranslator</B>()</PRE>
<DL>
<DD>Return the JDBC exception translator for this instance, if any.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setFlushModeName(java.lang.String)"><!-- --></A><H3>
setFlushModeName</H3>
<PRE>
public void <B>setFlushModeName</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;constantName)</PRE>
<DL>
<DD>Set the flush behavior by the name of the respective constant
 in this class, e.g. "FLUSH_AUTO". Default is "FLUSH_AUTO".
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>constantName</CODE> - name of the constant<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushMode(int)"><CODE>setFlushMode(int)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#FLUSH_AUTO"><CODE>FLUSH_AUTO</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setFlushMode(int)"><!-- --></A><H3>
setFlushMode</H3>
<PRE>
public void <B>setFlushMode</B>(int&nbsp;flushMode)</PRE>
<DL>
<DD>Set the flush behavior to one of the constants in this class.
 Default is FLUSH_AUTO.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushModeName(java.lang.String)"><CODE>setFlushModeName(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#FLUSH_AUTO"><CODE>FLUSH_AUTO</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getFlushMode()"><!-- --></A><H3>
getFlushMode</H3>
<PRE>
public int <B>getFlushMode</B>()</PRE>
<DL>
<DD>Return if a flush should be forced after executing the callback code.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setFilterName(java.lang.String)"><!-- --></A><H3>
setFilterName</H3>
<PRE>
public void <B>setFilterName</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;filter)</PRE>
<DL>
<DD>Set the name of a Hibernate filter to be activated for all
 Sessions that this accessor works with.
 <p>This filter will be enabled at the beginning of each operation
 and correspondingly disabled at the end of the operation.
 This will work for newly opened Sessions as well as for existing
 Sessions (for example, within a transaction).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#enableFilters(org.hibernate.Session)"><CODE>enableFilters(org.hibernate.Session)</CODE></A>, 
<CODE>Session.enableFilter(String)</CODE>, 
<A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setFilterDefinitions(org.hibernate.engine.FilterDefinition[])"><CODE>LocalSessionFactoryBean.setFilterDefinitions(org.hibernate.engine.FilterDefinition[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setFilterNames(java.lang.String[])"><!-- --></A><H3>
setFilterNames</H3>
<PRE>
public void <B>setFilterNames</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]&nbsp;filterNames)</PRE>
<DL>
<DD>Set one or more names of Hibernate filters to be activated for all
 Sessions that this accessor works with.
 <p>Each of those filters will be enabled at the beginning of each
 operation and correspondingly disabled at the end of the operation.
 This will work for newly opened Sessions as well as for existing
 Sessions (for example, within a transaction).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#enableFilters(org.hibernate.Session)"><CODE>enableFilters(org.hibernate.Session)</CODE></A>, 
<CODE>Session.enableFilter(String)</CODE>, 
<A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html#setFilterDefinitions(org.hibernate.engine.FilterDefinition[])"><CODE>LocalSessionFactoryBean.setFilterDefinitions(org.hibernate.engine.FilterDefinition[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getFilterNames()"><!-- --></A><H3>
getFilterNames</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getFilterNames</B>()</PRE>
<DL>
<DD>Return the names of Hibernate filters to be activated, if any.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setBeanFactory(org.springframework.beans.factory.BeanFactory)"><!-- --></A><H3>
setBeanFactory</H3>
<PRE>
public void <B>setBeanFactory</B>(<A HREF="../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A>&nbsp;beanFactory)</PRE>
<DL>
<DD>The bean factory just needs to be known for resolving entity interceptor
 bean names. It does not need to be set for any other mode of operation.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactoryAware.html#setBeanFactory(org.springframework.beans.factory.BeanFactory)">setBeanFactory</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/BeanFactoryAware.html" title="interface in org.springframework.beans.factory">BeanFactoryAware</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanFactory</CODE> - owning BeanFactory (never <code>null</code>).
 The bean can immediately call methods on the factory.<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setEntityInterceptorBeanName(java.lang.String)"><CODE>setEntityInterceptorBeanName(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="afterPropertiesSet()"><!-- --></A><H3>
afterPropertiesSet</H3>
<PRE>
public void <B>afterPropertiesSet</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/beans/factory/InitializingBean.html#afterPropertiesSet()">InitializingBean</A></CODE></B></DD>
<DD>Invoked by a BeanFactory after it has set all bean properties supplied
 (and satisfied BeanFactoryAware and ApplicationContextAware).
 <p>This method allows the bean instance to perform initialization only
 possible when all bean properties have been set and to throw an
 exception in the event of misconfiguration.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/beans/factory/InitializingBean.html#afterPropertiesSet()">afterPropertiesSet</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/beans/factory/InitializingBean.html" title="interface in org.springframework.beans.factory">InitializingBean</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="applyFlushMode(org.hibernate.Session, boolean)"><!-- --></A><H3>
applyFlushMode</H3>
<PRE>
protected org.hibernate.FlushMode <B>applyFlushMode</B>(org.hibernate.Session&nbsp;session,
                                                 boolean&nbsp;existingTransaction)</PRE>
<DL>
<DD>Apply the flush mode that's been specified for this accessor
 to the given Session.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>session</CODE> - the current Hibernate Session<DD><CODE>existingTransaction</CODE> - if executing within an existing transaction
<DT><B>Returns:</B><DD>the previous flush mode to restore after the operation,
 or <code>null</code> if none<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushMode(int)"><CODE>setFlushMode(int)</CODE></A>, 
<CODE>Session.setFlushMode(org.hibernate.FlushMode)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="flushIfNecessary(org.hibernate.Session, boolean)"><!-- --></A><H3>
flushIfNecessary</H3>
<PRE>
protected void <B>flushIfNecessary</B>(org.hibernate.Session&nbsp;session,
                                boolean&nbsp;existingTransaction)
                         throws org.hibernate.HibernateException</PRE>
<DL>
<DD>Flush the given Hibernate Session if necessary.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>session</CODE> - the current Hibernate Session<DD><CODE>existingTransaction</CODE> - if executing within an existing transaction
<DT><B>Throws:</B>
<DD><CODE>org.hibernate.HibernateException</CODE> - in case of Hibernate flushing errors</DL>
</DD>
</DL>
<HR>

<A NAME="convertHibernateAccessException(org.hibernate.HibernateException)"><!-- --></A><H3>
convertHibernateAccessException</H3>
<PRE>
public <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A> <B>convertHibernateAccessException</B>(org.hibernate.HibernateException&nbsp;ex)</PRE>
<DL>
<DD>Convert the given HibernateException to an appropriate exception
 from the <code>org.springframework.dao</code> hierarchy.
 <p>Will automatically apply a specified SQLExceptionTranslator to a
 Hibernate JDBCException, else rely on Hibernate's default translation.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>ex</CODE> - HibernateException that occured
<DT><B>Returns:</B><DD>a corresponding DataAccessException<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/SessionFactoryUtils.html#convertHibernateAccessException(org.hibernate.HibernateException)"><CODE>SessionFactoryUtils.convertHibernateAccessException(org.hibernate.HibernateException)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setJdbcExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)"><CODE>setJdbcExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="convertJdbcAccessException(org.hibernate.JDBCException, org.springframework.jdbc.support.SQLExceptionTranslator)"><!-- --></A><H3>
convertJdbcAccessException</H3>
<PRE>
protected <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A> <B>convertJdbcAccessException</B>(org.hibernate.JDBCException&nbsp;ex,
                                                         <A HREF="../../../../org/springframework/jdbc/support/SQLExceptionTranslator.html" title="interface in org.springframework.jdbc.support">SQLExceptionTranslator</A>&nbsp;translator)</PRE>
<DL>
<DD>Convert the given Hibernate JDBCException to an appropriate exception
 from the <code>org.springframework.dao</code> hierarchy, using the
 given SQLExceptionTranslator.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>ex</CODE> - Hibernate JDBCException that occured<DD><CODE>translator</CODE> - the SQLExceptionTranslator to use
<DT><B>Returns:</B><DD>a corresponding DataAccessException</DL>
</DD>
</DL>
<HR>

<A NAME="convertJdbcAccessException(java.sql.SQLException)"><!-- --></A><H3>
convertJdbcAccessException</H3>
<PRE>
protected <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A> <B>convertJdbcAccessException</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A>&nbsp;ex)</PRE>
<DL>
<DD>Convert the given SQLException to an appropriate exception from the
 <code>org.springframework.dao</code> hierarchy. Can be overridden in subclasses.
 <p>Note that a direct SQLException can just occur when callback code
 performs direct JDBC access via <code>Session.connection()</code>.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>ex</CODE> - the SQLException
<DT><B>Returns:</B><DD>the corresponding DataAccessException instance<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setJdbcExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)"><CODE>setJdbcExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)</CODE></A>, 
<CODE>Session.connection()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getDefaultJdbcExceptionTranslator()"><!-- --></A><H3>
getDefaultJdbcExceptionTranslator</H3>
<PRE>
protected <A HREF="../../../../org/springframework/jdbc/support/SQLExceptionTranslator.html" title="interface in org.springframework.jdbc.support">SQLExceptionTranslator</A> <B>getDefaultJdbcExceptionTranslator</B>()</PRE>
<DL>
<DD>Obtain a default SQLExceptionTranslator, lazily creating it if necessary.
 <p>Creates a default
 <A HREF="../../../../org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslator.html" title="class in org.springframework.jdbc.support"><CODE>SQLErrorCodeSQLExceptionTranslator</CODE></A>
 for the SessionFactory's underlying DataSource.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="enableFilters(org.hibernate.Session)"><!-- --></A><H3>
enableFilters</H3>
<PRE>
protected void <B>enableFilters</B>(org.hibernate.Session&nbsp;session)</PRE>
<DL>
<DD>Enable the specified filters on the given Session.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>session</CODE> - the current Hibernate Session<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFilterNames(java.lang.String[])"><CODE>setFilterNames(java.lang.String[])</CODE></A>, 
<CODE>Session.enableFilter(String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="disableFilters(org.hibernate.Session)"><!-- --></A><H3>
disableFilters</H3>
<PRE>
protected void <B>disableFilters</B>(org.hibernate.Session&nbsp;session)</PRE>
<DL>
<DD>Disable the specified filters on the given Session.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>session</CODE> - the current Hibernate Session<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFilterNames(java.lang.String[])"><CODE>setFilterNames(java.lang.String[])</CODE></A>, 
<CODE>Session.disableFilter(String)</CODE></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.html" title="class in org.springframework.orm.hibernate3"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/orm/hibernate3/HibernateAccessor.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="HibernateAccessor.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
