<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:24:06 BST 2010 -->
<TITLE>
HibernateTemplate
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="HibernateTemplate";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/springframework/orm/hibernate3/HibernateSystemException.html" title="class in org.springframework.orm.hibernate3"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTransactionManager.html" title="class in org.springframework.orm.hibernate3"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/orm/hibernate3/HibernateTemplate.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="HibernateTemplate.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_org.springframework.orm.hibernate3.HibernateAccessor">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.orm.hibernate3</FONT>
<BR>
Class HibernateTemplate</H2>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html" title="class in org.springframework.orm.hibernate3">org.springframework.orm.hibernate3.HibernateAccessor</A>
      <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>org.springframework.orm.hibernate3.HibernateTemplate</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../org/springframework/beans/factory/BeanFactoryAware.html" title="interface in org.springframework.beans.factory">BeanFactoryAware</A>, <A HREF="../../../../org/springframework/beans/factory/InitializingBean.html" title="interface in org.springframework.beans.factory">InitializingBean</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>HibernateTemplate</B><DT>extends <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html" title="class in org.springframework.orm.hibernate3">HibernateAccessor</A><DT>implements <A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></DL>
</PRE>

<P>
Helper class that simplifies Hibernate data access code. Automatically
 converts HibernateExceptions into DataAccessExceptions, following the
 <code>org.springframework.dao</code> exception hierarchy.

 <p>The central method is <code>execute</code>, supporting Hibernate access code
 implementing the <A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3"><CODE>HibernateCallback</CODE></A> interface. It provides Hibernate Session
 handling such that neither the HibernateCallback implementation nor the calling
 code needs to explicitly care about retrieving/closing Hibernate Sessions,
 or handling Session lifecycle exceptions. For typical single step actions,
 there are various convenience methods (find, load, saveOrUpdate, delete).

 <p>Can be used within a service implementation via direct instantiation
 with a SessionFactory reference, or get prepared in an application context
 and given to services as bean reference. Note: The SessionFactory should
 always be configured as bean in the application context, in the first case
 given to the service directly, in the second case to the prepared template.

 <p><b>NOTE: As of Hibernate 3.0.1, transactional Hibernate access code can
 also be coded in plain Hibernate style. Hence, for newly started projects,
 consider adopting the standard Hibernate3 style of coding data access objects
 instead, based on <CODE>SessionFactory.getCurrentSession()</CODE>.</b>

 <p>This class can be considered as direct alternative to working with the raw
 Hibernate3 Session API (through <code>SessionFactory.getCurrentSession()</code>).
 The major advantage is its automatic conversion to DataAccessExceptions as well
 as its capability to fall back to 'auto-commit' style behavior when used outside
 of transactions. <b>Note that HibernateTemplate will perform its own Session
 management, not participating in a custom Hibernate CurrentSessionContext
 unless you explicitly switch <A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setAllowCreate(boolean)"><CODE>"allowCreate"</CODE></A> to "false".</b>

 <p><A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html" title="class in org.springframework.orm.hibernate3"><CODE>LocalSessionFactoryBean</CODE></A> is the preferred way of obtaining a reference
 to a specific Hibernate SessionFactory, at least in a non-EJB environment.
 The Spring application context will manage its lifecycle, initializing and
 shutting down the factory as part of the application.

 <p>Note that operations that return an Iterator (i.e. <code>iterate</code>)
 are supposed to be used within Spring-driven or JTA-driven transactions
 (with HibernateTransactionManager, JtaTransactionManager, or EJB CMT).
 Else, the Iterator won't be able to read results from its ResultSet anymore,
 as the underlying Hibernate Session will already have been closed.

 <p>Lazy loading will also just work with an open Hibernate Session,
 either within a transaction or within OpenSessionInViewFilter/Interceptor.
 Furthermore, some operations just make sense within transactions,
 for example: <code>contains</code>, <code>evict</code>, <code>lock</code>,
 <code>flush</code>, <code>clear</code>.
<P>

<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>1.2</DD>
<DT><B>Author:</B></DT>
  <DD>Juergen Hoeller</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setSessionFactory(org.hibernate.SessionFactory)"><CODE>HibernateAccessor.setSessionFactory(org.hibernate.SessionFactory)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3"><CODE>HibernateCallback</CODE></A>, 
<CODE>Session</CODE>, 
<A HREF="../../../../org/springframework/orm/hibernate3/LocalSessionFactoryBean.html" title="class in org.springframework.orm.hibernate3"><CODE>LocalSessionFactoryBean</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTransactionManager.html" title="class in org.springframework.orm.hibernate3"><CODE>HibernateTransactionManager</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/jta/JtaTransactionManager.html" title="class in org.springframework.transaction.jta"><CODE>JtaTransactionManager</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.html" title="class in org.springframework.orm.hibernate3.support"><CODE>OpenSessionInViewFilter</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.html" title="class in org.springframework.orm.hibernate3.support"><CODE>OpenSessionInViewInterceptor</CODE></A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.orm.hibernate3.HibernateAccessor"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from class org.springframework.orm.hibernate3.<A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html" title="class in org.springframework.orm.hibernate3">HibernateAccessor</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#FLUSH_ALWAYS">FLUSH_ALWAYS</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#FLUSH_AUTO">FLUSH_AUTO</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#FLUSH_COMMIT">FLUSH_COMMIT</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#FLUSH_EAGER">FLUSH_EAGER</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#FLUSH_NEVER">FLUSH_NEVER</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#logger">logger</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#HibernateTemplate()">HibernateTemplate</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new HibernateTemplate instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#HibernateTemplate(org.hibernate.SessionFactory)">HibernateTemplate</A></B>(org.hibernate.SessionFactory&nbsp;sessionFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new HibernateTemplate instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#HibernateTemplate(org.hibernate.SessionFactory, boolean)">HibernateTemplate</A></B>(org.hibernate.SessionFactory&nbsp;sessionFactory,
                  boolean&nbsp;allowCreate)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new HibernateTemplate instance.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#applyNamedParameterToQuery(org.hibernate.Query, java.lang.String, java.lang.Object)">applyNamedParameterToQuery</A></B>(org.hibernate.Query&nbsp;queryObject,
                           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;paramName,
                           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Apply the given name parameter to the given Query object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#bulkUpdate(java.lang.String)">bulkUpdate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Update/delete all objects according to the given query.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#bulkUpdate(java.lang.String, java.lang.Object...)">bulkUpdate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;values)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Update/delete all objects according to the given query, binding a number of
 values to "?" parameters in the query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#bulkUpdate(java.lang.String, java.lang.Object)">bulkUpdate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Update/delete all objects according to the given query, binding one value
 to a "?" parameter in the query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#checkWriteOperationAllowed(org.hibernate.Session)">checkWriteOperationAllowed</A></B>(org.hibernate.Session&nbsp;session)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check whether write operations are allowed on the given Session.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#clear()">clear</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Remove all objects from the <CODE>Session</CODE> cache, and
 cancel all pending saves, updates and deletes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#closeIterator(java.util.Iterator)">closeIterator</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util">Iterator</A>&nbsp;it)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Immediately close an <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util"><CODE>Iterator</CODE></A> created by any of the various
 <code>iterate(..)</code> operations, instead of waiting until the
 session is closed or disconnected.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#contains(java.lang.Object)">contains</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check whether the given object is in the Session cache.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;org.hibernate.Session</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#createSessionProxy(org.hibernate.Session)">createSessionProxy</A></B>(org.hibernate.Session&nbsp;session)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a close-suppressing proxy for the given Hibernate Session.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#delete(java.lang.Object)">delete</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delete the given persistent instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#delete(java.lang.Object, org.hibernate.LockMode)">delete</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
       org.hibernate.LockMode&nbsp;lockMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delete the given persistent instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#delete(java.lang.String, java.lang.Object)">delete</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
       <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delete the given persistent instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#delete(java.lang.String, java.lang.Object, org.hibernate.LockMode)">delete</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
       <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
       org.hibernate.LockMode&nbsp;lockMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delete the given persistent instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#deleteAll(java.util.Collection)">deleteAll</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Collection.html?is-external=true" title="class or interface in java.util">Collection</A>&nbsp;entities)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delete all given persistent instances.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected 
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#doExecute(org.springframework.orm.hibernate3.HibernateCallback, boolean, boolean)">doExecute</A></B>(<A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3">HibernateCallback</A>&lt;T&gt;&nbsp;action,
          boolean&nbsp;enforceNewSession,
          boolean&nbsp;enforceNativeSession)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute the action specified by the given action object within a Session.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.hibernate.Filter</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#enableFilter(java.lang.String)">enableFilter</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;filterName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an enabled Hibernate <CODE>Filter</CODE> for the given filter name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#evict(java.lang.Object)">evict</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Remove the given object from the <CODE>Session</CODE> cache.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#execute(org.springframework.orm.hibernate3.HibernateCallback)">execute</A></B>(<A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3">HibernateCallback</A>&lt;T&gt;&nbsp;action)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute the action specified by the given action object within a
 <CODE>Session</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#executeFind(org.springframework.orm.hibernate3.HibernateCallback)">executeFind</A></B>(<A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3">HibernateCallback</A>&lt;?&gt;&nbsp;action)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute the specified action assuming that the result object is a
 <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#executeWithNativeSession(org.springframework.orm.hibernate3.HibernateCallback)">executeWithNativeSession</A></B>(<A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3">HibernateCallback</A>&lt;T&gt;&nbsp;action)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute the action specified by the given action object within a
 native <CODE>Session</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#executeWithNewSession(org.springframework.orm.hibernate3.HibernateCallback)">executeWithNewSession</A></B>(<A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3">HibernateCallback</A>&lt;T&gt;&nbsp;action)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute the action specified by the given action object within a
 new <CODE>Session</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#find(java.lang.String)">find</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute an HQL query.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#find(java.lang.String, java.lang.Object...)">find</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;values)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute an HQL query, binding a number of values to "?" parameters
 in the query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#find(java.lang.String, java.lang.Object)">find</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute an HQL query, binding one value to a "?" parameter in the
 query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByCriteria(org.hibernate.criterion.DetachedCriteria)">findByCriteria</A></B>(org.hibernate.criterion.DetachedCriteria&nbsp;criteria)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query based on a given Hibernate criteria object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByCriteria(org.hibernate.criterion.DetachedCriteria, int, int)">findByCriteria</A></B>(org.hibernate.criterion.DetachedCriteria&nbsp;criteria,
               int&nbsp;firstResult,
               int&nbsp;maxResults)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query based on the given Hibernate criteria object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByExample(java.lang.Object)">findByExample</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;exampleEntity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query based on the given example entity object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByExample(java.lang.Object, int, int)">findByExample</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;exampleEntity,
              int&nbsp;firstResult,
              int&nbsp;maxResults)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query based on a given example entity object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByExample(java.lang.String, java.lang.Object)">findByExample</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
              <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;exampleEntity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query based on the given example entity object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByExample(java.lang.String, java.lang.Object, int, int)">findByExample</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
              <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;exampleEntity,
              int&nbsp;firstResult,
              int&nbsp;maxResults)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query based on a given example entity object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByNamedParam(java.lang.String, java.lang.String[], java.lang.Object[])">findByNamedParam</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]&nbsp;paramNames,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;values)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute an HQL query, binding a number of values to ":" named
 parameters in the query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByNamedParam(java.lang.String, java.lang.String, java.lang.Object)">findByNamedParam</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;paramName,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute an HQL query, binding one value to a ":" named parameter
 in the query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByNamedQuery(java.lang.String)">findByNamedQuery</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a named query.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByNamedQuery(java.lang.String, java.lang.Object...)">findByNamedQuery</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryName,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;values)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a named query binding a number of values to "?" parameters
 in the query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByNamedQuery(java.lang.String, java.lang.Object)">findByNamedQuery</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryName,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a named query, binding one value to a "?" parameter in
 the query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByNamedQueryAndNamedParam(java.lang.String, java.lang.String[], java.lang.Object[])">findByNamedQueryAndNamedParam</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryName,
                              <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]&nbsp;paramNames,
                              <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;values)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a named query, binding a number of values to ":" named
 parameters in the query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByNamedQueryAndNamedParam(java.lang.String, java.lang.String, java.lang.Object)">findByNamedQueryAndNamedParam</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryName,
                              <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;paramName,
                              <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a named query, binding one value to a ":" named parameter
 in the query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByNamedQueryAndValueBean(java.lang.String, java.lang.Object)">findByNamedQueryAndValueBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryName,
                             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;valueBean)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a named query, binding the properties of the given bean to
 ":" named parameters in the query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#findByValueBean(java.lang.String, java.lang.Object)">findByValueBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;valueBean)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute an HQL query, binding the properties of the given bean to
 <i>named</i> parameters in the query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#flush()">flush</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Flush all pending saves, updates and deletes to the database.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#get(java.lang.Class, java.io.Serializable)">get</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;entityClass,
    <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the persistent instance of the given entity class
 with the given identifier, or <code>null</code> if not found.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#get(java.lang.Class, java.io.Serializable, org.hibernate.LockMode)">get</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;entityClass,
    <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id,
    org.hibernate.LockMode&nbsp;lockMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the persistent instance of the given entity class
 with the given identifier, or <code>null</code> if not found.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#get(java.lang.String, java.io.Serializable)">get</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
    <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the persistent instance of the given entity class
 with the given identifier, or <code>null</code> if not found.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#get(java.lang.String, java.io.Serializable, org.hibernate.LockMode)">get</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
    <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id,
    org.hibernate.LockMode&nbsp;lockMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the persistent instance of the given entity class
 with the given identifier, or <code>null</code> if not found.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#getFetchSize()">getFetchSize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the fetch size specified for this HibernateTemplate.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#getMaxResults()">getMaxResults</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the maximum number of rows specified for this HibernateTemplate.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#getQueryCacheRegion()">getQueryCacheRegion</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the name of the cache region for queries executed by this template.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;org.hibernate.Session</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#getSession()">getSession</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a Session for use by this template.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#initialize(java.lang.Object)">initialize</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;proxy)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Force initialization of a Hibernate proxy or persistent collection.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#isAllowCreate()">isAllowCreate</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return if a new Session should be created if no thread-bound found.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#isAlwaysUseNewSession()">isAlwaysUseNewSession</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether to always use a new Hibernate Session for this template.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#isCacheQueries()">isCacheQueries</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether to cache all queries executed by this template.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#isCheckWriteOperations()">isCheckWriteOperations</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether to check that the Hibernate Session is not in read-only
 mode in case of write operations (save/update/delete).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#isExposeNativeSession()">isExposeNativeSession</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether to expose the native Hibernate Session to
 HibernateCallback code, or rather a Session proxy.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util">Iterator</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#iterate(java.lang.String)">iterate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query for persistent instances.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util">Iterator</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#iterate(java.lang.String, java.lang.Object...)">iterate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;values)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query for persistent instances, binding a number of
 values to "?" parameters in the query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util">Iterator</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#iterate(java.lang.String, java.lang.Object)">iterate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query for persistent instances, binding one value
 to a "?" parameter in the query string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#load(java.lang.Class, java.io.Serializable)">load</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;entityClass,
     <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the persistent instance of the given entity class
 with the given identifier, throwing an exception if not found.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#load(java.lang.Class, java.io.Serializable, org.hibernate.LockMode)">load</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;entityClass,
     <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id,
     org.hibernate.LockMode&nbsp;lockMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the persistent instance of the given entity class
 with the given identifier, throwing an exception if not found.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#load(java.lang.Object, java.io.Serializable)">load</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
     <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Load the persistent instance with the given identifier
 into the given object, throwing an exception if not found.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#load(java.lang.String, java.io.Serializable)">load</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
     <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the persistent instance of the given entity class
 with the given identifier, throwing an exception if not found.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#load(java.lang.String, java.io.Serializable, org.hibernate.LockMode)">load</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
     <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id,
     org.hibernate.LockMode&nbsp;lockMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the persistent instance of the given entity class
 with the given identifier, throwing an exception if not found.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#loadAll(java.lang.Class)">loadAll</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;entityClass)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return all persistent instances of the given entity class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#lock(java.lang.Object, org.hibernate.LockMode)">lock</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
     org.hibernate.LockMode&nbsp;lockMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Obtain the specified lock level upon the given object, implicitly
 checking whether the corresponding database entry still exists.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#lock(java.lang.String, java.lang.Object, org.hibernate.LockMode)">lock</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
     org.hibernate.LockMode&nbsp;lockMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Obtain the specified lock level upon the given object, implicitly
 checking whether the corresponding database entry still exists.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#merge(java.lang.String, T)">merge</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
      T&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copy the state of the given object onto the persistent object
 with the same identifier.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#merge(T)">merge</A></B>(T&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copy the state of the given object onto the persistent object
 with the same identifier.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#persist(java.lang.Object)">persist</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Persist the given transient instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#persist(java.lang.String, java.lang.Object)">persist</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Persist the given transient instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#prepareCriteria(org.hibernate.Criteria)">prepareCriteria</A></B>(org.hibernate.Criteria&nbsp;criteria)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prepare the given Criteria object, applying cache settings and/or
 a transaction timeout.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#prepareQuery(org.hibernate.Query)">prepareQuery</A></B>(org.hibernate.Query&nbsp;queryObject)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prepare the given Query object, applying cache settings and/or
 a transaction timeout.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#refresh(java.lang.Object)">refresh</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Re-read the state of the given persistent instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#refresh(java.lang.Object, org.hibernate.LockMode)">refresh</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
        org.hibernate.LockMode&nbsp;lockMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Re-read the state of the given persistent instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#replicate(java.lang.Object, org.hibernate.ReplicationMode)">replicate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
          org.hibernate.ReplicationMode&nbsp;replicationMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Persist the state of the given detached instance according to the
 given replication mode, reusing the current identifier value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#replicate(java.lang.String, java.lang.Object, org.hibernate.ReplicationMode)">replicate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
          org.hibernate.ReplicationMode&nbsp;replicationMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Persist the state of the given detached instance according to the
 given replication mode, reusing the current identifier value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#save(java.lang.Object)">save</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Persist the given transient instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#save(java.lang.String, java.lang.Object)">save</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Persist the given transient instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#saveOrUpdate(java.lang.Object)">saveOrUpdate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Save or update the given persistent instance,
 according to its id (matching the configured "unsaved-value"?).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#saveOrUpdate(java.lang.String, java.lang.Object)">saveOrUpdate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Save or update the given persistent instance,
 according to its id (matching the configured "unsaved-value"?).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#saveOrUpdateAll(java.util.Collection)">saveOrUpdateAll</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Collection.html?is-external=true" title="class or interface in java.util">Collection</A>&nbsp;entities)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Save or update all given persistent instances,
 according to its id (matching the configured "unsaved-value"?).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setAllowCreate(boolean)">setAllowCreate</A></B>(boolean&nbsp;allowCreate)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set if a new <CODE>Session</CODE> should be created when no transactional
 <code>Session</code> can be found for the current thread.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setAlwaysUseNewSession(boolean)">setAlwaysUseNewSession</A></B>(boolean&nbsp;alwaysUseNewSession)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether to always use a new Hibernate Session for this template.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setCacheQueries(boolean)">setCacheQueries</A></B>(boolean&nbsp;cacheQueries)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether to cache all queries executed by this template.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setCheckWriteOperations(boolean)">setCheckWriteOperations</A></B>(boolean&nbsp;checkWriteOperations)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether to check that the Hibernate Session is not in read-only mode
 in case of write operations (save/update/delete).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setExposeNativeSession(boolean)">setExposeNativeSession</A></B>(boolean&nbsp;exposeNativeSession)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether to expose the native Hibernate Session to
 HibernateCallback code.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setFetchSize(int)">setFetchSize</A></B>(int&nbsp;fetchSize)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the fetch size for this HibernateTemplate.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setMaxResults(int)">setMaxResults</A></B>(int&nbsp;maxResults)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the maximum number of rows for this HibernateTemplate.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setQueryCacheRegion(java.lang.String)">setQueryCacheRegion</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryCacheRegion)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the name of the cache region for queries executed by this template.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#update(java.lang.Object)">update</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Update the given persistent instance,
 associating it with the current Hibernate <CODE>Session</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#update(java.lang.Object, org.hibernate.LockMode)">update</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
       org.hibernate.LockMode&nbsp;lockMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Update the given persistent instance,
 associating it with the current Hibernate <CODE>Session</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#update(java.lang.String, java.lang.Object)">update</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
       <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Update the given persistent instance,
 associating it with the current Hibernate <CODE>Session</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#update(java.lang.String, java.lang.Object, org.hibernate.LockMode)">update</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
       <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
       org.hibernate.LockMode&nbsp;lockMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Update the given persistent instance,
 associating it with the current Hibernate <CODE>Session</CODE>.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.orm.hibernate3.HibernateAccessor"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class org.springframework.orm.hibernate3.<A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html" title="class in org.springframework.orm.hibernate3">HibernateAccessor</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#afterPropertiesSet()">afterPropertiesSet</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#applyFlushMode(org.hibernate.Session, boolean)">applyFlushMode</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#convertHibernateAccessException(org.hibernate.HibernateException)">convertHibernateAccessException</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#convertJdbcAccessException(org.hibernate.JDBCException, org.springframework.jdbc.support.SQLExceptionTranslator)">convertJdbcAccessException</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#convertJdbcAccessException(java.sql.SQLException)">convertJdbcAccessException</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#disableFilters(org.hibernate.Session)">disableFilters</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#enableFilters(org.hibernate.Session)">enableFilters</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#flushIfNecessary(org.hibernate.Session, boolean)">flushIfNecessary</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#getDefaultJdbcExceptionTranslator()">getDefaultJdbcExceptionTranslator</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#getEntityInterceptor()">getEntityInterceptor</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#getFilterNames()">getFilterNames</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#getFlushMode()">getFlushMode</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#getJdbcExceptionTranslator()">getJdbcExceptionTranslator</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#getSessionFactory()">getSessionFactory</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setBeanFactory(org.springframework.beans.factory.BeanFactory)">setBeanFactory</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setEntityInterceptor(org.hibernate.Interceptor)">setEntityInterceptor</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setEntityInterceptorBeanName(java.lang.String)">setEntityInterceptorBeanName</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFilterName(java.lang.String)">setFilterName</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFilterNames(java.lang.String[])">setFilterNames</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushMode(int)">setFlushMode</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushModeName(java.lang.String)">setFlushModeName</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setJdbcExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)">setJdbcExceptionTranslator</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setSessionFactory(org.hibernate.SessionFactory)">setSessionFactory</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="HibernateTemplate()"><!-- --></A><H3>
HibernateTemplate</H3>
<PRE>
public <B>HibernateTemplate</B>()</PRE>
<DL>
<DD>Create a new HibernateTemplate instance.
<P>
</DL>
<HR>

<A NAME="HibernateTemplate(org.hibernate.SessionFactory)"><!-- --></A><H3>
HibernateTemplate</H3>
<PRE>
public <B>HibernateTemplate</B>(org.hibernate.SessionFactory&nbsp;sessionFactory)</PRE>
<DL>
<DD>Create a new HibernateTemplate instance.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>sessionFactory</CODE> - SessionFactory to create Sessions</DL>
</DL>
<HR>

<A NAME="HibernateTemplate(org.hibernate.SessionFactory, boolean)"><!-- --></A><H3>
HibernateTemplate</H3>
<PRE>
public <B>HibernateTemplate</B>(org.hibernate.SessionFactory&nbsp;sessionFactory,
                         boolean&nbsp;allowCreate)</PRE>
<DL>
<DD>Create a new HibernateTemplate instance.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>sessionFactory</CODE> - SessionFactory to create Sessions<DD><CODE>allowCreate</CODE> - if a non-transactional Session should be created when no
 transactional Session can be found for the current thread</DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="setAllowCreate(boolean)"><!-- --></A><H3>
setAllowCreate</H3>
<PRE>
public void <B>setAllowCreate</B>(boolean&nbsp;allowCreate)</PRE>
<DL>
<DD>Set if a new <CODE>Session</CODE> should be created when no transactional
 <code>Session</code> can be found for the current thread.
 The default value is <code>true</code>.
 <p><code>HibernateTemplate</code> is aware of a corresponding
 <code>Session</code> bound to the current thread, for example when using
 <A HREF="../../../../org/springframework/orm/hibernate3/HibernateTransactionManager.html" title="class in org.springframework.orm.hibernate3"><CODE>HibernateTransactionManager</CODE></A>. If <code>allowCreate</code> is
 <code>true</code>, a new non-transactional <code>Session</code> will be
 created if none is found, which needs to be closed at the end of the operation.
 If <code>false</code>, an <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang"><CODE>IllegalStateException</CODE></A> will get thrown in
 this case.
 <p><b>NOTE: As of Spring 2.5, switching <code>allowCreate</code>
 to <code>false</code> will delegate to Hibernate's
 <CODE>SessionFactory.getCurrentSession()</CODE> method,</b>
 which - with Spring-based setup - will by default delegate to Spring's
 <code>SessionFactoryUtils.getSession(sessionFactory, false)</code>.
 This mode also allows for custom Hibernate CurrentSessionContext strategies
 to be plugged in, whereas <code>allowCreate</code> set to <code>true</code>
 will always use a Spring-managed Hibernate Session.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/SessionFactoryUtils.html#getSession(org.hibernate.SessionFactory, boolean)"><CODE>SessionFactoryUtils.getSession(SessionFactory, boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isAllowCreate()"><!-- --></A><H3>
isAllowCreate</H3>
<PRE>
public boolean <B>isAllowCreate</B>()</PRE>
<DL>
<DD>Return if a new Session should be created if no thread-bound found.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setAlwaysUseNewSession(boolean)"><!-- --></A><H3>
setAlwaysUseNewSession</H3>
<PRE>
public void <B>setAlwaysUseNewSession</B>(boolean&nbsp;alwaysUseNewSession)</PRE>
<DL>
<DD>Set whether to always use a new Hibernate Session for this template.
 Default is "false"; if activated, all operations on this template will
 work on a new Hibernate Session even in case of a pre-bound Session
 (for example, within a transaction or OpenSessionInViewFilter).
 <p>Within a transaction, a new Hibernate Session used by this template
 will participate in the transaction through using the same JDBC
 Connection. In such a scenario, multiple Sessions will participate
 in the same database transaction.
 <p>Turn this on for operations that are supposed to always execute
 independently, without side effects caused by a shared Hibernate Session.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isAlwaysUseNewSession()"><!-- --></A><H3>
isAlwaysUseNewSession</H3>
<PRE>
public boolean <B>isAlwaysUseNewSession</B>()</PRE>
<DL>
<DD>Return whether to always use a new Hibernate Session for this template.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setExposeNativeSession(boolean)"><!-- --></A><H3>
setExposeNativeSession</H3>
<PRE>
public void <B>setExposeNativeSession</B>(boolean&nbsp;exposeNativeSession)</PRE>
<DL>
<DD>Set whether to expose the native Hibernate Session to
 HibernateCallback code.
 <p>Default is "false": a Session proxy will be returned, suppressing
 <code>close</code> calls and automatically applying query cache
 settings and transaction timeouts.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3"><CODE>HibernateCallback</CODE></A>, 
<CODE>Session</CODE>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setCacheQueries(boolean)"><CODE>setCacheQueries(boolean)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setQueryCacheRegion(java.lang.String)"><CODE>setQueryCacheRegion(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#prepareQuery(org.hibernate.Query)"><CODE>prepareQuery(org.hibernate.Query)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#prepareCriteria(org.hibernate.Criteria)"><CODE>prepareCriteria(org.hibernate.Criteria)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isExposeNativeSession()"><!-- --></A><H3>
isExposeNativeSession</H3>
<PRE>
public boolean <B>isExposeNativeSession</B>()</PRE>
<DL>
<DD>Return whether to expose the native Hibernate Session to
 HibernateCallback code, or rather a Session proxy.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setCheckWriteOperations(boolean)"><!-- --></A><H3>
setCheckWriteOperations</H3>
<PRE>
public void <B>setCheckWriteOperations</B>(boolean&nbsp;checkWriteOperations)</PRE>
<DL>
<DD>Set whether to check that the Hibernate Session is not in read-only mode
 in case of write operations (save/update/delete).
 <p>Default is "true", for fail-fast behavior when attempting write operations
 within a read-only transaction. Turn this off to allow save/update/delete
 on a Session with flush mode NEVER.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#setFlushMode(int)"><CODE>HibernateAccessor.setFlushMode(int)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#checkWriteOperationAllowed(org.hibernate.Session)"><CODE>checkWriteOperationAllowed(org.hibernate.Session)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/TransactionDefinition.html#isReadOnly()"><CODE>TransactionDefinition.isReadOnly()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isCheckWriteOperations()"><!-- --></A><H3>
isCheckWriteOperations</H3>
<PRE>
public boolean <B>isCheckWriteOperations</B>()</PRE>
<DL>
<DD>Return whether to check that the Hibernate Session is not in read-only
 mode in case of write operations (save/update/delete).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setCacheQueries(boolean)"><!-- --></A><H3>
setCacheQueries</H3>
<PRE>
public void <B>setCacheQueries</B>(boolean&nbsp;cacheQueries)</PRE>
<DL>
<DD>Set whether to cache all queries executed by this template.
 <p>If this is "true", all Query and Criteria objects created by
 this template will be marked as cacheable (including all
 queries through find methods).
 <p>To specify the query region to be used for queries cached
 by this template, set the "queryCacheRegion" property.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setQueryCacheRegion(java.lang.String)"><CODE>setQueryCacheRegion(java.lang.String)</CODE></A>, 
<CODE>Query.setCacheable(boolean)</CODE>, 
<CODE>Criteria.setCacheable(boolean)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="isCacheQueries()"><!-- --></A><H3>
isCacheQueries</H3>
<PRE>
public boolean <B>isCacheQueries</B>()</PRE>
<DL>
<DD>Return whether to cache all queries executed by this template.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setQueryCacheRegion(java.lang.String)"><!-- --></A><H3>
setQueryCacheRegion</H3>
<PRE>
public void <B>setQueryCacheRegion</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryCacheRegion)</PRE>
<DL>
<DD>Set the name of the cache region for queries executed by this template.
 <p>If this is specified, it will be applied to all Query and Criteria objects
 created by this template (including all queries through find methods).
 <p>The cache region will not take effect unless queries created by this
 template are configured to be cached via the "cacheQueries" property.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setCacheQueries(boolean)"><CODE>setCacheQueries(boolean)</CODE></A>, 
<CODE>Query.setCacheRegion(java.lang.String)</CODE>, 
<CODE>Criteria.setCacheRegion(java.lang.String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getQueryCacheRegion()"><!-- --></A><H3>
getQueryCacheRegion</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>getQueryCacheRegion</B>()</PRE>
<DL>
<DD>Return the name of the cache region for queries executed by this template.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setFetchSize(int)"><!-- --></A><H3>
setFetchSize</H3>
<PRE>
public void <B>setFetchSize</B>(int&nbsp;fetchSize)</PRE>
<DL>
<DD>Set the fetch size for this HibernateTemplate. This is important for processing
 large result sets: Setting this higher than the default value will increase
 processing speed at the cost of memory consumption; setting this lower can
 avoid transferring row data that will never be read by the application.
 <p>Default is 0, indicating to use the JDBC driver's default.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getFetchSize()"><!-- --></A><H3>
getFetchSize</H3>
<PRE>
public int <B>getFetchSize</B>()</PRE>
<DL>
<DD>Return the fetch size specified for this HibernateTemplate.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setMaxResults(int)"><!-- --></A><H3>
setMaxResults</H3>
<PRE>
public void <B>setMaxResults</B>(int&nbsp;maxResults)</PRE>
<DL>
<DD>Set the maximum number of rows for this HibernateTemplate. This is important
 for processing subsets of large result sets, avoiding to read and hold
 the entire result set in the database or in the JDBC driver if we're
 never interested in the entire result in the first place (for example,
 when performing searches that might return a large number of matches).
 <p>Default is 0, indicating to use the JDBC driver's default.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getMaxResults()"><!-- --></A><H3>
getMaxResults</H3>
<PRE>
public int <B>getMaxResults</B>()</PRE>
<DL>
<DD>Return the maximum number of rows specified for this HibernateTemplate.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="execute(org.springframework.orm.hibernate3.HibernateCallback)"><!-- --></A><H3>
execute</H3>
<PRE>
public &lt;T&gt; T <B>execute</B>(<A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3">HibernateCallback</A>&lt;T&gt;&nbsp;action)
          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#execute(org.springframework.orm.hibernate3.HibernateCallback)">HibernateOperations</A></CODE></B></DD>
<DD>Execute the action specified by the given action object within a
 <CODE>Session</CODE>.
 <p>Application exceptions thrown by the action object get propagated
 to the caller (can only be unchecked). Hibernate exceptions are
 transformed into appropriate DAO ones. Allows for returning a result
 object, that is a domain object or a collection of domain objects.
 <p>Note: Callback code is not supposed to handle transactions itself!
 Use an appropriate transaction manager like
 <A HREF="../../../../org/springframework/orm/hibernate3/HibernateTransactionManager.html" title="class in org.springframework.orm.hibernate3"><CODE>HibernateTransactionManager</CODE></A>. Generally, callback code must not
 touch any <code>Session</code> lifecycle methods, like close,
 disconnect, or reconnect, to let the template do its work.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#execute(org.springframework.orm.hibernate3.HibernateCallback)">execute</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>action</CODE> - callback object that specifies the Hibernate action
<DT><B>Returns:</B><DD>a result object returned by the action, or <code>null</code>
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTransactionManager.html" title="class in org.springframework.orm.hibernate3"><CODE>HibernateTransactionManager</CODE></A>, 
<A HREF="../../../../org/springframework/dao/package-summary.html"><CODE>org.springframework.dao</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/package-summary.html"><CODE>org.springframework.transaction</CODE></A>, 
<CODE>Session</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="executeFind(org.springframework.orm.hibernate3.HibernateCallback)"><!-- --></A><H3>
executeFind</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>executeFind</B>(<A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3">HibernateCallback</A>&lt;?&gt;&nbsp;action)
                 throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#executeFind(org.springframework.orm.hibernate3.HibernateCallback)">HibernateOperations</A></CODE></B></DD>
<DD>Execute the specified action assuming that the result object is a
 <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A>.
 <p>This is a convenience method for executing Hibernate find calls or
 queries within an action.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#executeFind(org.springframework.orm.hibernate3.HibernateCallback)">executeFind</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>action</CODE> - calback object that specifies the Hibernate action
<DT><B>Returns:</B><DD>a List result returned by the action, or <code>null</code>
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors</DL>
</DD>
</DL>
<HR>

<A NAME="executeWithNewSession(org.springframework.orm.hibernate3.HibernateCallback)"><!-- --></A><H3>
executeWithNewSession</H3>
<PRE>
public &lt;T&gt; T <B>executeWithNewSession</B>(<A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3">HibernateCallback</A>&lt;T&gt;&nbsp;action)</PRE>
<DL>
<DD>Execute the action specified by the given action object within a
 new <CODE>Session</CODE>.
 <p>This execute variant overrides the template-wide
 <A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#isAlwaysUseNewSession()"><CODE>"alwaysUseNewSession"</CODE></A> setting.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>action</CODE> - callback object that specifies the Hibernate action
<DT><B>Returns:</B><DD>a result object returned by the action, or <code>null</code>
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors</DL>
</DD>
</DL>
<HR>

<A NAME="executeWithNativeSession(org.springframework.orm.hibernate3.HibernateCallback)"><!-- --></A><H3>
executeWithNativeSession</H3>
<PRE>
public &lt;T&gt; T <B>executeWithNativeSession</B>(<A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3">HibernateCallback</A>&lt;T&gt;&nbsp;action)</PRE>
<DL>
<DD>Execute the action specified by the given action object within a
 native <CODE>Session</CODE>.
 <p>This execute variant overrides the template-wide
 <A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#isExposeNativeSession()"><CODE>"exposeNativeSession"</CODE></A> setting.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>action</CODE> - callback object that specifies the Hibernate action
<DT><B>Returns:</B><DD>a result object returned by the action, or <code>null</code>
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors</DL>
</DD>
</DL>
<HR>

<A NAME="doExecute(org.springframework.orm.hibernate3.HibernateCallback, boolean, boolean)"><!-- --></A><H3>
doExecute</H3>
<PRE>
protected &lt;T&gt; T <B>doExecute</B>(<A HREF="../../../../org/springframework/orm/hibernate3/HibernateCallback.html" title="interface in org.springframework.orm.hibernate3">HibernateCallback</A>&lt;T&gt;&nbsp;action,
                          boolean&nbsp;enforceNewSession,
                          boolean&nbsp;enforceNativeSession)
               throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD>Execute the action specified by the given action object within a Session.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>action</CODE> - callback object that specifies the Hibernate action<DD><CODE>enforceNewSession</CODE> - whether to enforce a new Session for this template
 even if there is a pre-bound transactional Session<DD><CODE>enforceNativeSession</CODE> - whether to enforce exposure of the native
 Hibernate Session to callback code
<DT><B>Returns:</B><DD>a result object returned by the action, or <code>null</code>
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors</DL>
</DD>
</DL>
<HR>

<A NAME="getSession()"><!-- --></A><H3>
getSession</H3>
<PRE>
protected org.hibernate.Session <B>getSession</B>()</PRE>
<DL>
<DD>Return a Session for use by this template.
 <p>Returns a new Session in case of "alwaysUseNewSession" (using the same
 JDBC Connection as a transactional Session, if applicable), a pre-bound
 Session in case of "allowCreate" turned off, and a pre-bound or new Session
 otherwise (new only if no transactional or otherwise pre-bound Session exists).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the Session to use (never <code>null</code>)<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/SessionFactoryUtils.html#getSession(org.hibernate.SessionFactory, boolean)"><CODE>SessionFactoryUtils.getSession(org.hibernate.SessionFactory, boolean)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/SessionFactoryUtils.html#getNewSession(org.hibernate.SessionFactory)"><CODE>SessionFactoryUtils.getNewSession(org.hibernate.SessionFactory)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setAlwaysUseNewSession(boolean)"><CODE>setAlwaysUseNewSession(boolean)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setAllowCreate(boolean)"><CODE>setAllowCreate(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="createSessionProxy(org.hibernate.Session)"><!-- --></A><H3>
createSessionProxy</H3>
<PRE>
protected org.hibernate.Session <B>createSessionProxy</B>(org.hibernate.Session&nbsp;session)</PRE>
<DL>
<DD>Create a close-suppressing proxy for the given Hibernate Session.
 The proxy also prepares returned Query and Criteria objects.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>session</CODE> - the Hibernate Session to create a proxy for
<DT><B>Returns:</B><DD>the Session proxy<DT><B>See Also:</B><DD><CODE>Session.close()</CODE>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#prepareQuery(org.hibernate.Query)"><CODE>prepareQuery(org.hibernate.Query)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#prepareCriteria(org.hibernate.Criteria)"><CODE>prepareCriteria(org.hibernate.Criteria)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="get(java.lang.Class, java.io.Serializable)"><!-- --></A><H3>
get</H3>
<PRE>
public &lt;T&gt; T <B>get</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;entityClass,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id)
      throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#get(java.lang.Class, java.io.Serializable)">HibernateOperations</A></CODE></B></DD>
<DD>Return the persistent instance of the given entity class
 with the given identifier, or <code>null</code> if not found.
 <p>This method is a thin wrapper around
 <CODE>Session.get(Class, java.io.Serializable)</CODE> for convenience.
 For an explanation of the exact semantics of this method, please do refer to
 the Hibernate API documentation in the first instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#get(java.lang.Class, java.io.Serializable)">get</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityClass</CODE> - a persistent class<DD><CODE>id</CODE> - the identifier of the persistent instance
<DT><B>Returns:</B><DD>the persistent instance, or <code>null</code> if not found
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.get(Class, java.io.Serializable)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="get(java.lang.Class, java.io.Serializable, org.hibernate.LockMode)"><!-- --></A><H3>
get</H3>
<PRE>
public &lt;T&gt; T <B>get</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;entityClass,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id,
                 org.hibernate.LockMode&nbsp;lockMode)
      throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#get(java.lang.Class, java.io.Serializable, org.hibernate.LockMode)">HibernateOperations</A></CODE></B></DD>
<DD>Return the persistent instance of the given entity class
 with the given identifier, or <code>null</code> if not found.
 <p>Obtains the specified lock mode if the instance exists.
 <p>This method is a thin wrapper around
 <CODE>Session.get(Class, java.io.Serializable, LockMode)</CODE> for convenience.
 For an explanation of the exact semantics of this method, please do refer to
 the Hibernate API documentation in the first instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#get(java.lang.Class, java.io.Serializable, org.hibernate.LockMode)">get</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityClass</CODE> - a persistent class<DD><CODE>id</CODE> - the identifier of the persistent instance<DD><CODE>lockMode</CODE> - the lock mode to obtain
<DT><B>Returns:</B><DD>the persistent instance, or <code>null</code> if not found
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.get(Class, java.io.Serializable, org.hibernate.LockMode)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="get(java.lang.String, java.io.Serializable)"><!-- --></A><H3>
get</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>get</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                  <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#get(java.lang.String, java.io.Serializable)">HibernateOperations</A></CODE></B></DD>
<DD>Return the persistent instance of the given entity class
 with the given identifier, or <code>null</code> if not found.
 <p>This method is a thin wrapper around
 <CODE>Session.get(String, java.io.Serializable)</CODE> for convenience.
 For an explanation of the exact semantics of this method, please do refer to
 the Hibernate API documentation in the first instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#get(java.lang.String, java.io.Serializable)">get</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>id</CODE> - the identifier of the persistent instance
<DT><B>Returns:</B><DD>the persistent instance, or <code>null</code> if not found
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.get(Class, java.io.Serializable)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="get(java.lang.String, java.io.Serializable, org.hibernate.LockMode)"><!-- --></A><H3>
get</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>get</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                  <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id,
                  org.hibernate.LockMode&nbsp;lockMode)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#get(java.lang.String, java.io.Serializable, org.hibernate.LockMode)">HibernateOperations</A></CODE></B></DD>
<DD>Return the persistent instance of the given entity class
 with the given identifier, or <code>null</code> if not found.
 Obtains the specified lock mode if the instance exists.
 <p>This method is a thin wrapper around
 <CODE>Session.get(String, java.io.Serializable, LockMode)</CODE> for convenience.
 For an explanation of the exact semantics of this method, please do refer to
 the Hibernate API documentation in the first instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#get(java.lang.String, java.io.Serializable, org.hibernate.LockMode)">get</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>id</CODE> - the identifier of the persistent instance<DD><CODE>lockMode</CODE> - the lock mode to obtain
<DT><B>Returns:</B><DD>the persistent instance, or <code>null</code> if not found
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.get(Class, java.io.Serializable, org.hibernate.LockMode)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="load(java.lang.Class, java.io.Serializable)"><!-- --></A><H3>
load</H3>
<PRE>
public &lt;T&gt; T <B>load</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;entityClass,
                  <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id)
       throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#load(java.lang.Class, java.io.Serializable)">HibernateOperations</A></CODE></B></DD>
<DD>Return the persistent instance of the given entity class
 with the given identifier, throwing an exception if not found.
 <p>This method is a thin wrapper around
 <CODE>Session.load(Class, java.io.Serializable)</CODE> for convenience.
 For an explanation of the exact semantics of this method, please do refer to
 the Hibernate API documentation in the first instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#load(java.lang.Class, java.io.Serializable)">load</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityClass</CODE> - a persistent class<DD><CODE>id</CODE> - the identifier of the persistent instance
<DT><B>Returns:</B><DD>the persistent instance
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/orm/ObjectRetrievalFailureException.html" title="class in org.springframework.orm">ObjectRetrievalFailureException</A></CODE> - if not found
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.load(Class, java.io.Serializable)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="load(java.lang.Class, java.io.Serializable, org.hibernate.LockMode)"><!-- --></A><H3>
load</H3>
<PRE>
public &lt;T&gt; T <B>load</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;entityClass,
                  <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id,
                  org.hibernate.LockMode&nbsp;lockMode)
       throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#load(java.lang.Class, java.io.Serializable, org.hibernate.LockMode)">HibernateOperations</A></CODE></B></DD>
<DD>Return the persistent instance of the given entity class
 with the given identifier, throwing an exception if not found.
 Obtains the specified lock mode if the instance exists.
 <p>This method is a thin wrapper around
 <CODE>Session.load(Class, java.io.Serializable, LockMode)</CODE> for convenience.
 For an explanation of the exact semantics of this method, please do refer to
 the Hibernate API documentation in the first instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#load(java.lang.Class, java.io.Serializable, org.hibernate.LockMode)">load</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityClass</CODE> - a persistent class<DD><CODE>id</CODE> - the identifier of the persistent instance<DD><CODE>lockMode</CODE> - the lock mode to obtain
<DT><B>Returns:</B><DD>the persistent instance
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/orm/ObjectRetrievalFailureException.html" title="class in org.springframework.orm">ObjectRetrievalFailureException</A></CODE> - if not found
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.load(Class, java.io.Serializable)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="load(java.lang.String, java.io.Serializable)"><!-- --></A><H3>
load</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>load</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id)
            throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#load(java.lang.String, java.io.Serializable)">HibernateOperations</A></CODE></B></DD>
<DD>Return the persistent instance of the given entity class
 with the given identifier, throwing an exception if not found.
 <p>This method is a thin wrapper around
 <CODE>Session.load(String, java.io.Serializable)</CODE> for convenience.
 For an explanation of the exact semantics of this method, please do refer to
 the Hibernate API documentation in the first instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#load(java.lang.String, java.io.Serializable)">load</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>id</CODE> - the identifier of the persistent instance
<DT><B>Returns:</B><DD>the persistent instance
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/orm/ObjectRetrievalFailureException.html" title="class in org.springframework.orm">ObjectRetrievalFailureException</A></CODE> - if not found
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.load(Class, java.io.Serializable)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="load(java.lang.String, java.io.Serializable, org.hibernate.LockMode)"><!-- --></A><H3>
load</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>load</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id,
                   org.hibernate.LockMode&nbsp;lockMode)
            throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#load(java.lang.String, java.io.Serializable, org.hibernate.LockMode)">HibernateOperations</A></CODE></B></DD>
<DD>Return the persistent instance of the given entity class
 with the given identifier, throwing an exception if not found.
 <p>Obtains the specified lock mode if the instance exists.
 <p>This method is a thin wrapper around
 <CODE>Session.load(String, java.io.Serializable, LockMode)</CODE> for convenience.
 For an explanation of the exact semantics of this method, please do refer to
 the Hibernate API documentation in the first instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#load(java.lang.String, java.io.Serializable, org.hibernate.LockMode)">load</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>id</CODE> - the identifier of the persistent instance<DD><CODE>lockMode</CODE> - the lock mode to obtain
<DT><B>Returns:</B><DD>the persistent instance
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/orm/ObjectRetrievalFailureException.html" title="class in org.springframework.orm">ObjectRetrievalFailureException</A></CODE> - if not found
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.load(Class, java.io.Serializable)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="loadAll(java.lang.Class)"><!-- --></A><H3>
loadAll</H3>
<PRE>
public &lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt; <B>loadAll</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;entityClass)
                throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#loadAll(java.lang.Class)">HibernateOperations</A></CODE></B></DD>
<DD>Return all persistent instances of the given entity class.
 Note: Use queries or criteria for retrieving a specific subset.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#loadAll(java.lang.Class)">loadAll</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityClass</CODE> - a persistent class
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing 0 or more persistent instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is a Hibernate error<DT><B>See Also:</B><DD><CODE>Session.createCriteria(java.lang.Class)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="load(java.lang.Object, java.io.Serializable)"><!-- --></A><H3>
load</H3>
<PRE>
public void <B>load</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>&nbsp;id)
          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#load(java.lang.Object, java.io.Serializable)">HibernateOperations</A></CODE></B></DD>
<DD>Load the persistent instance with the given identifier
 into the given object, throwing an exception if not found.
 <p>This method is a thin wrapper around
 <CODE>Session.load(Object, java.io.Serializable)</CODE> for convenience.
 For an explanation of the exact semantics of this method, please do refer to
 the Hibernate API documentation in the first instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#load(java.lang.Object, java.io.Serializable)">load</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the object (of the target class) to load into<DD><CODE>id</CODE> - the identifier of the persistent instance
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/orm/ObjectRetrievalFailureException.html" title="class in org.springframework.orm">ObjectRetrievalFailureException</A></CODE> - if not found
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.load(Object, java.io.Serializable)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="refresh(java.lang.Object)"><!-- --></A><H3>
refresh</H3>
<PRE>
public void <B>refresh</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)
             throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#refresh(java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Re-read the state of the given persistent instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#refresh(java.lang.Object)">refresh</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the persistent instance to re-read
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.refresh(Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="refresh(java.lang.Object, org.hibernate.LockMode)"><!-- --></A><H3>
refresh</H3>
<PRE>
public void <B>refresh</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
                    org.hibernate.LockMode&nbsp;lockMode)
             throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#refresh(java.lang.Object, org.hibernate.LockMode)">HibernateOperations</A></CODE></B></DD>
<DD>Re-read the state of the given persistent instance.
 Obtains the specified lock mode for the instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#refresh(java.lang.Object, org.hibernate.LockMode)">refresh</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the persistent instance to re-read<DD><CODE>lockMode</CODE> - the lock mode to obtain
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.refresh(Object, org.hibernate.LockMode)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="contains(java.lang.Object)"><!-- --></A><H3>
contains</H3>
<PRE>
public boolean <B>contains</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)
                 throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#contains(java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Check whether the given object is in the Session cache.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#contains(java.lang.Object)">contains</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the persistence instance to check
<DT><B>Returns:</B><DD>whether the given object is in the Session cache
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is a Hibernate error<DT><B>See Also:</B><DD><CODE>Session.contains(java.lang.Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="evict(java.lang.Object)"><!-- --></A><H3>
evict</H3>
<PRE>
public void <B>evict</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#evict(java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Remove the given object from the <CODE>Session</CODE> cache.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#evict(java.lang.Object)">evict</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the persistent instance to evict
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.evict(java.lang.Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="initialize(java.lang.Object)"><!-- --></A><H3>
initialize</H3>
<PRE>
public void <B>initialize</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;proxy)
                throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#initialize(java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Force initialization of a Hibernate proxy or persistent collection.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#initialize(java.lang.Object)">initialize</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>proxy</CODE> - a proxy for a persistent object or a persistent collection
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if we can't initialize the proxy, for example
 because it is not associated with an active Session<DT><B>See Also:</B><DD><CODE>Hibernate.initialize(java.lang.Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="enableFilter(java.lang.String)"><!-- --></A><H3>
enableFilter</H3>
<PRE>
public org.hibernate.Filter <B>enableFilter</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;filterName)
                                  throws <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#enableFilter(java.lang.String)">HibernateOperations</A></CODE></B></DD>
<DD>Return an enabled Hibernate <CODE>Filter</CODE> for the given filter name.
 The returned <code>Filter</code> instance can be used to set filter parameters.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#enableFilter(java.lang.String)">enableFilter</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>filterName</CODE> - the name of the filter
<DT><B>Returns:</B><DD>the enabled Hibernate <code>Filter</code> (either already
 enabled or enabled on the fly by this operation)
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></CODE> - if we are not running within a
 transactional Session (in which case this operation does not make sense)</DL>
</DD>
</DL>
<HR>

<A NAME="lock(java.lang.Object, org.hibernate.LockMode)"><!-- --></A><H3>
lock</H3>
<PRE>
public void <B>lock</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
                 org.hibernate.LockMode&nbsp;lockMode)
          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#lock(java.lang.Object, org.hibernate.LockMode)">HibernateOperations</A></CODE></B></DD>
<DD>Obtain the specified lock level upon the given object, implicitly
 checking whether the corresponding database entry still exists.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#lock(java.lang.Object, org.hibernate.LockMode)">lock</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the persistent instance to lock<DD><CODE>lockMode</CODE> - the lock mode to obtain
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/orm/ObjectOptimisticLockingFailureException.html" title="class in org.springframework.orm">ObjectOptimisticLockingFailureException</A></CODE> - if not found
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.lock(Object, org.hibernate.LockMode)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="lock(java.lang.String, java.lang.Object, org.hibernate.LockMode)"><!-- --></A><H3>
lock</H3>
<PRE>
public void <B>lock</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
                 org.hibernate.LockMode&nbsp;lockMode)
          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#lock(java.lang.String, java.lang.Object, org.hibernate.LockMode)">HibernateOperations</A></CODE></B></DD>
<DD>Obtain the specified lock level upon the given object, implicitly
 checking whether the corresponding database entry still exists.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#lock(java.lang.String, java.lang.Object, org.hibernate.LockMode)">lock</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>entity</CODE> - the persistent instance to lock<DD><CODE>lockMode</CODE> - the lock mode to obtain
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/orm/ObjectOptimisticLockingFailureException.html" title="class in org.springframework.orm">ObjectOptimisticLockingFailureException</A></CODE> - if not found
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.lock(String, Object, org.hibernate.LockMode)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="save(java.lang.Object)"><!-- --></A><H3>
save</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A> <B>save</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)
                  throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#save(java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Persist the given transient instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#save(java.lang.Object)">save</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the transient instance to persist
<DT><B>Returns:</B><DD>the generated identifier
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.save(Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="save(java.lang.String, java.lang.Object)"><!-- --></A><H3>
save</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A> <B>save</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)
                  throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#save(java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Persist the given transient instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#save(java.lang.String, java.lang.Object)">save</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>entity</CODE> - the transient instance to persist
<DT><B>Returns:</B><DD>the generated identifier
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.save(String, Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="update(java.lang.Object)"><!-- --></A><H3>
update</H3>
<PRE>
public void <B>update</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)
            throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#update(java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Update the given persistent instance,
 associating it with the current Hibernate <CODE>Session</CODE>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#update(java.lang.Object)">update</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the persistent instance to update
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.update(Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="update(java.lang.Object, org.hibernate.LockMode)"><!-- --></A><H3>
update</H3>
<PRE>
public void <B>update</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
                   org.hibernate.LockMode&nbsp;lockMode)
            throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#update(java.lang.Object, org.hibernate.LockMode)">HibernateOperations</A></CODE></B></DD>
<DD>Update the given persistent instance,
 associating it with the current Hibernate <CODE>Session</CODE>.
 <p>Obtains the specified lock mode if the instance exists, implicitly
 checking whether the corresponding database entry still exists.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#update(java.lang.Object, org.hibernate.LockMode)">update</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the persistent instance to update<DD><CODE>lockMode</CODE> - the lock mode to obtain
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/orm/ObjectOptimisticLockingFailureException.html" title="class in org.springframework.orm">ObjectOptimisticLockingFailureException</A></CODE> - if not found
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.update(Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="update(java.lang.String, java.lang.Object)"><!-- --></A><H3>
update</H3>
<PRE>
public void <B>update</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)
            throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#update(java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Update the given persistent instance,
 associating it with the current Hibernate <CODE>Session</CODE>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#update(java.lang.String, java.lang.Object)">update</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>entity</CODE> - the persistent instance to update
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.update(String, Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="update(java.lang.String, java.lang.Object, org.hibernate.LockMode)"><!-- --></A><H3>
update</H3>
<PRE>
public void <B>update</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
                   org.hibernate.LockMode&nbsp;lockMode)
            throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#update(java.lang.String, java.lang.Object, org.hibernate.LockMode)">HibernateOperations</A></CODE></B></DD>
<DD>Update the given persistent instance,
 associating it with the current Hibernate <CODE>Session</CODE>.
 <p>Obtains the specified lock mode if the instance exists, implicitly
 checking whether the corresponding database entry still exists.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#update(java.lang.String, java.lang.Object, org.hibernate.LockMode)">update</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>entity</CODE> - the persistent instance to update<DD><CODE>lockMode</CODE> - the lock mode to obtain
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/orm/ObjectOptimisticLockingFailureException.html" title="class in org.springframework.orm">ObjectOptimisticLockingFailureException</A></CODE> - if not found
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.update(String, Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="saveOrUpdate(java.lang.Object)"><!-- --></A><H3>
saveOrUpdate</H3>
<PRE>
public void <B>saveOrUpdate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)
                  throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#saveOrUpdate(java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Save or update the given persistent instance,
 according to its id (matching the configured "unsaved-value"?).
 Associates the instance with the current Hibernate <CODE>Session</CODE>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#saveOrUpdate(java.lang.Object)">saveOrUpdate</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the persistent instance to save or update
 (to be associated with the Hibernate <code>Session</code>)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.saveOrUpdate(Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="saveOrUpdate(java.lang.String, java.lang.Object)"><!-- --></A><H3>
saveOrUpdate</H3>
<PRE>
public void <B>saveOrUpdate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)
                  throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#saveOrUpdate(java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Save or update the given persistent instance,
 according to its id (matching the configured "unsaved-value"?).
 Associates the instance with the current Hibernate <code>Session</code>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#saveOrUpdate(java.lang.String, java.lang.Object)">saveOrUpdate</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>entity</CODE> - the persistent instance to save or update
 (to be associated with the Hibernate <code>Session</code>)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.saveOrUpdate(String, Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="saveOrUpdateAll(java.util.Collection)"><!-- --></A><H3>
saveOrUpdateAll</H3>
<PRE>
public void <B>saveOrUpdateAll</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Collection.html?is-external=true" title="class or interface in java.util">Collection</A>&nbsp;entities)
                     throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#saveOrUpdateAll(java.util.Collection)">HibernateOperations</A></CODE></B></DD>
<DD>Save or update all given persistent instances,
 according to its id (matching the configured "unsaved-value"?).
 Associates the instances with the current Hibernate <code>Session</code>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#saveOrUpdateAll(java.util.Collection)">saveOrUpdateAll</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entities</CODE> - the persistent instances to save or update
 (to be associated with the Hibernate <code>Session</code>)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors</DL>
</DD>
</DL>
<HR>

<A NAME="replicate(java.lang.Object, org.hibernate.ReplicationMode)"><!-- --></A><H3>
replicate</H3>
<PRE>
public void <B>replicate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
                      org.hibernate.ReplicationMode&nbsp;replicationMode)
               throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#replicate(java.lang.Object, org.hibernate.ReplicationMode)">HibernateOperations</A></CODE></B></DD>
<DD>Persist the state of the given detached instance according to the
 given replication mode, reusing the current identifier value.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#replicate(java.lang.Object, org.hibernate.ReplicationMode)">replicate</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the persistent object to replicate<DD><CODE>replicationMode</CODE> - the Hibernate ReplicationMode
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.replicate(Object, org.hibernate.ReplicationMode)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="replicate(java.lang.String, java.lang.Object, org.hibernate.ReplicationMode)"><!-- --></A><H3>
replicate</H3>
<PRE>
public void <B>replicate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
                      org.hibernate.ReplicationMode&nbsp;replicationMode)
               throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#replicate(java.lang.String, java.lang.Object, org.hibernate.ReplicationMode)">HibernateOperations</A></CODE></B></DD>
<DD>Persist the state of the given detached instance according to the
 given replication mode, reusing the current identifier value.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#replicate(java.lang.String, java.lang.Object, org.hibernate.ReplicationMode)">replicate</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>entity</CODE> - the persistent object to replicate<DD><CODE>replicationMode</CODE> - the Hibernate ReplicationMode
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.replicate(String, Object, org.hibernate.ReplicationMode)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="persist(java.lang.Object)"><!-- --></A><H3>
persist</H3>
<PRE>
public void <B>persist</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)
             throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#persist(java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Persist the given transient instance. Follows JSR-220 semantics.
 <p>Similar to <code>save</code>, associating the given object
 with the current Hibernate <CODE>Session</CODE>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#persist(java.lang.Object)">persist</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the persistent instance to persist
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.persist(Object)</CODE>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#save(java.lang.Object)"><CODE>HibernateOperations.save(java.lang.Object)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="persist(java.lang.String, java.lang.Object)"><!-- --></A><H3>
persist</H3>
<PRE>
public void <B>persist</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                    <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)
             throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#persist(java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Persist the given transient instance. Follows JSR-220 semantics.
 <p>Similar to <code>save</code>, associating the given object
 with the current Hibernate <CODE>Session</CODE>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#persist(java.lang.String, java.lang.Object)">persist</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>entity</CODE> - the persistent instance to persist
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.persist(String, Object)</CODE>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#save(java.lang.Object)"><CODE>HibernateOperations.save(java.lang.Object)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="merge(java.lang.Object)"><!-- --></A><A NAME="merge(T)"><!-- --></A><H3>
merge</H3>
<PRE>
public &lt;T&gt; T <B>merge</B>(T&nbsp;entity)
        throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#merge(T)">HibernateOperations</A></CODE></B></DD>
<DD>Copy the state of the given object onto the persistent object
 with the same identifier. Follows JSR-220 semantics.
 <p>Similar to <code>saveOrUpdate</code>, but never associates the given
 object with the current Hibernate Session. In case of a new entity,
 the state will be copied over as well.
 <p>Note that <code>merge</code> will <i>not</i> update the identifiers
 in the passed-in object graph (in contrast to TopLink)! Consider
 registering Spring's <code>IdTransferringMergeEventListener</code> if
 you would like to have newly assigned ids transferred to the original
 object graph too.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#merge(T)">merge</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the object to merge with the corresponding persistence instance
<DT><B>Returns:</B><DD>the updated, registered persistent instance
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.merge(Object)</CODE>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#saveOrUpdate(java.lang.Object)"><CODE>HibernateOperations.saveOrUpdate(java.lang.Object)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/support/IdTransferringMergeEventListener.html" title="class in org.springframework.orm.hibernate3.support"><CODE>IdTransferringMergeEventListener</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="merge(java.lang.String,java.lang.Object)"><!-- --></A><A NAME="merge(java.lang.String, T)"><!-- --></A><H3>
merge</H3>
<PRE>
public &lt;T&gt; T <B>merge</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                   T&nbsp;entity)
        throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#merge(java.lang.String, T)">HibernateOperations</A></CODE></B></DD>
<DD>Copy the state of the given object onto the persistent object
 with the same identifier. Follows JSR-220 semantics.
 <p>Similar to <code>saveOrUpdate</code>, but never associates the given
 object with the current Hibernate <CODE>Session</CODE>. In
 the case of a new entity, the state will be copied over as well.
 <p>Note that <code>merge</code> will <i>not</i> update the identifiers
 in the passed-in object graph (in contrast to TopLink)! Consider
 registering Spring's <code>IdTransferringMergeEventListener</code>
 if you would like to have newly assigned ids transferred to the
 original object graph too.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#merge(java.lang.String, T)">merge</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>entity</CODE> - the object to merge with the corresponding persistence instance
<DT><B>Returns:</B><DD>the updated, registered persistent instance
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.merge(String, Object)</CODE>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#saveOrUpdate(java.lang.Object)"><CODE>HibernateOperations.saveOrUpdate(java.lang.Object)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="delete(java.lang.Object)"><!-- --></A><H3>
delete</H3>
<PRE>
public void <B>delete</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)
            throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#delete(java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Delete the given persistent instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#delete(java.lang.Object)">delete</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the persistent instance to delete
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.delete(Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="delete(java.lang.Object, org.hibernate.LockMode)"><!-- --></A><H3>
delete</H3>
<PRE>
public void <B>delete</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
                   org.hibernate.LockMode&nbsp;lockMode)
            throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#delete(java.lang.Object, org.hibernate.LockMode)">HibernateOperations</A></CODE></B></DD>
<DD>Delete the given persistent instance.
 <p>Obtains the specified lock mode if the instance exists, implicitly
 checking whether the corresponding database entry still exists.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#delete(java.lang.Object, org.hibernate.LockMode)">delete</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entity</CODE> - the persistent instance to delete<DD><CODE>lockMode</CODE> - the lock mode to obtain
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/orm/ObjectOptimisticLockingFailureException.html" title="class in org.springframework.orm">ObjectOptimisticLockingFailureException</A></CODE> - if not found
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.delete(Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="delete(java.lang.String, java.lang.Object)"><!-- --></A><H3>
delete</H3>
<PRE>
public void <B>delete</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity)
            throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#delete(java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Delete the given persistent instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#delete(java.lang.String, java.lang.Object)">delete</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>entity</CODE> - the persistent instance to delete
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.delete(Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="delete(java.lang.String, java.lang.Object, org.hibernate.LockMode)"><!-- --></A><H3>
delete</H3>
<PRE>
public void <B>delete</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;entity,
                   org.hibernate.LockMode&nbsp;lockMode)
            throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#delete(java.lang.String, java.lang.Object, org.hibernate.LockMode)">HibernateOperations</A></CODE></B></DD>
<DD>Delete the given persistent instance.
 <p>Obtains the specified lock mode if the instance exists, implicitly
 checking whether the corresponding database entry still exists.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#delete(java.lang.String, java.lang.Object, org.hibernate.LockMode)">delete</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>entity</CODE> - the persistent instance to delete<DD><CODE>lockMode</CODE> - the lock mode to obtain
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/orm/ObjectOptimisticLockingFailureException.html" title="class in org.springframework.orm">ObjectOptimisticLockingFailureException</A></CODE> - if not found
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.delete(Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="deleteAll(java.util.Collection)"><!-- --></A><H3>
deleteAll</H3>
<PRE>
public void <B>deleteAll</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Collection.html?is-external=true" title="class or interface in java.util">Collection</A>&nbsp;entities)
               throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#deleteAll(java.util.Collection)">HibernateOperations</A></CODE></B></DD>
<DD>Delete all given persistent instances.
 <p>This can be combined with any of the find methods to delete by query
 in two lines of code.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#deleteAll(java.util.Collection)">deleteAll</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entities</CODE> - the persistent instances to delete
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.delete(Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="flush()"><!-- --></A><H3>
flush</H3>
<PRE>
public void <B>flush</B>()
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#flush()">HibernateOperations</A></CODE></B></DD>
<DD>Flush all pending saves, updates and deletes to the database.
 <p>Only invoke this for selective eager flushing, for example when
 JDBC code needs to see certain changes within the same transaction.
 Else, it is preferable to rely on auto-flushing at transaction
 completion.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#flush()">flush</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.flush()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="clear()"><!-- --></A><H3>
clear</H3>
<PRE>
public void <B>clear</B>()
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#clear()">HibernateOperations</A></CODE></B></DD>
<DD>Remove all objects from the <CODE>Session</CODE> cache, and
 cancel all pending saves, updates and deletes.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#clear()">clear</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.clear()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="find(java.lang.String)"><!-- --></A><H3>
find</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>find</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString)
          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#find(java.lang.String)">HibernateOperations</A></CODE></B></DD>
<DD>Execute an HQL query.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#find(java.lang.String)">find</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryString</CODE> - a query expressed in Hibernate's query language
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing the results of the query execution
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.createQuery(java.lang.String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="find(java.lang.String, java.lang.Object)"><!-- --></A><H3>
find</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>find</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)
          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#find(java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Execute an HQL query, binding one value to a "?" parameter in the
 query string.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#find(java.lang.String, java.lang.Object)">find</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryString</CODE> - a query expressed in Hibernate's query language<DD><CODE>value</CODE> - the value of the parameter
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing the results of the query execution
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.createQuery(java.lang.String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="find(java.lang.String, java.lang.Object...)"><!-- --></A><H3>
find</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>find</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;values)
          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#find(java.lang.String, java.lang.Object...)">HibernateOperations</A></CODE></B></DD>
<DD>Execute an HQL query, binding a number of values to "?" parameters
 in the query string.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#find(java.lang.String, java.lang.Object...)">find</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryString</CODE> - a query expressed in Hibernate's query language<DD><CODE>values</CODE> - the values of the parameters
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing the results of the query execution
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.createQuery(java.lang.String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByNamedParam(java.lang.String, java.lang.String, java.lang.Object)"><!-- --></A><H3>
findByNamedParam</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByNamedParam</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
                             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;paramName,
                             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)
                      throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedParam(java.lang.String, java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Execute an HQL query, binding one value to a ":" named parameter
 in the query string.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedParam(java.lang.String, java.lang.String, java.lang.Object)">findByNamedParam</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryString</CODE> - a query expressed in Hibernate's query language<DD><CODE>paramName</CODE> - the name of the parameter<DD><CODE>value</CODE> - the value of the parameter
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing the results of the query execution
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.getNamedQuery(String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByNamedParam(java.lang.String, java.lang.String[], java.lang.Object[])"><!-- --></A><H3>
findByNamedParam</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByNamedParam</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
                             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]&nbsp;paramNames,
                             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;values)
                      throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedParam(java.lang.String, java.lang.String[], java.lang.Object[])">HibernateOperations</A></CODE></B></DD>
<DD>Execute an HQL query, binding a number of values to ":" named
 parameters in the query string.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedParam(java.lang.String, java.lang.String[], java.lang.Object[])">findByNamedParam</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryString</CODE> - a query expressed in Hibernate's query language<DD><CODE>paramNames</CODE> - the names of the parameters<DD><CODE>values</CODE> - the values of the parameters
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing the results of the query execution
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.getNamedQuery(String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByValueBean(java.lang.String, java.lang.Object)"><!-- --></A><H3>
findByValueBean</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByValueBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
                            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;valueBean)
                     throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByValueBean(java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Execute an HQL query, binding the properties of the given bean to
 <i>named</i> parameters in the query string.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByValueBean(java.lang.String, java.lang.Object)">findByValueBean</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryString</CODE> - a query expressed in Hibernate's query language<DD><CODE>valueBean</CODE> - the values of the parameters
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing the results of the query execution
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Query.setProperties(java.lang.Object)</CODE>, 
<CODE>Session.createQuery(java.lang.String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByNamedQuery(java.lang.String)"><!-- --></A><H3>
findByNamedQuery</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByNamedQuery</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryName)
                      throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedQuery(java.lang.String)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a named query.
 <p>A named query is defined in a Hibernate mapping file.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedQuery(java.lang.String)">findByNamedQuery</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryName</CODE> - the name of a Hibernate query in a mapping file
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing the results of the query execution
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.getNamedQuery(String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByNamedQuery(java.lang.String, java.lang.Object)"><!-- --></A><H3>
findByNamedQuery</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByNamedQuery</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryName,
                             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)
                      throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedQuery(java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a named query, binding one value to a "?" parameter in
 the query string.
 <p>A named query is defined in a Hibernate mapping file.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedQuery(java.lang.String, java.lang.Object)">findByNamedQuery</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryName</CODE> - the name of a Hibernate query in a mapping file<DD><CODE>value</CODE> - the value of the parameter
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing the results of the query execution
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.getNamedQuery(String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByNamedQuery(java.lang.String, java.lang.Object...)"><!-- --></A><H3>
findByNamedQuery</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByNamedQuery</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryName,
                             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;values)
                      throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedQuery(java.lang.String, java.lang.Object...)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a named query binding a number of values to "?" parameters
 in the query string.
 <p>A named query is defined in a Hibernate mapping file.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedQuery(java.lang.String, java.lang.Object...)">findByNamedQuery</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryName</CODE> - the name of a Hibernate query in a mapping file<DD><CODE>values</CODE> - the values of the parameters
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing the results of the query execution
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.getNamedQuery(String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByNamedQueryAndNamedParam(java.lang.String, java.lang.String, java.lang.Object)"><!-- --></A><H3>
findByNamedQueryAndNamedParam</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByNamedQueryAndNamedParam</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryName,
                                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;paramName,
                                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)
                                   throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedQueryAndNamedParam(java.lang.String, java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a named query, binding one value to a ":" named parameter
 in the query string.
 <p>A named query is defined in a Hibernate mapping file.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedQueryAndNamedParam(java.lang.String, java.lang.String, java.lang.Object)">findByNamedQueryAndNamedParam</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryName</CODE> - the name of a Hibernate query in a mapping file<DD><CODE>paramName</CODE> - the name of parameter<DD><CODE>value</CODE> - the value of the parameter
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing the results of the query execution
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.getNamedQuery(String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByNamedQueryAndNamedParam(java.lang.String, java.lang.String[], java.lang.Object[])"><!-- --></A><H3>
findByNamedQueryAndNamedParam</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByNamedQueryAndNamedParam</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryName,
                                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]&nbsp;paramNames,
                                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;values)
                                   throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedQueryAndNamedParam(java.lang.String, java.lang.String[], java.lang.Object[])">HibernateOperations</A></CODE></B></DD>
<DD>Execute a named query, binding a number of values to ":" named
 parameters in the query string.
 <p>A named query is defined in a Hibernate mapping file.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedQueryAndNamedParam(java.lang.String, java.lang.String[], java.lang.Object[])">findByNamedQueryAndNamedParam</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryName</CODE> - the name of a Hibernate query in a mapping file<DD><CODE>paramNames</CODE> - the names of the parameters<DD><CODE>values</CODE> - the values of the parameters
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing the results of the query execution
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.getNamedQuery(String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByNamedQueryAndValueBean(java.lang.String, java.lang.Object)"><!-- --></A><H3>
findByNamedQueryAndValueBean</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByNamedQueryAndValueBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryName,
                                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;valueBean)
                                  throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedQueryAndValueBean(java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a named query, binding the properties of the given bean to
 ":" named parameters in the query string.
 <p>A named query is defined in a Hibernate mapping file.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByNamedQueryAndValueBean(java.lang.String, java.lang.Object)">findByNamedQueryAndValueBean</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryName</CODE> - the name of a Hibernate query in a mapping file<DD><CODE>valueBean</CODE> - the values of the parameters
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing the results of the query execution
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Query.setProperties(java.lang.Object)</CODE>, 
<CODE>Session.getNamedQuery(String)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByCriteria(org.hibernate.criterion.DetachedCriteria)"><!-- --></A><H3>
findByCriteria</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByCriteria</B>(org.hibernate.criterion.DetachedCriteria&nbsp;criteria)
                    throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByCriteria(org.hibernate.criterion.DetachedCriteria)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a query based on a given Hibernate criteria object.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByCriteria(org.hibernate.criterion.DetachedCriteria)">findByCriteria</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>criteria</CODE> - the detached Hibernate criteria object.
 <b>Note: Do not reuse criteria objects! They need to recreated per execution,
 due to the suboptimal design of Hibernate's criteria facility.</b>
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing 0 or more persistent instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>DetachedCriteria.getExecutableCriteria(org.hibernate.Session)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByCriteria(org.hibernate.criterion.DetachedCriteria, int, int)"><!-- --></A><H3>
findByCriteria</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByCriteria</B>(org.hibernate.criterion.DetachedCriteria&nbsp;criteria,
                           int&nbsp;firstResult,
                           int&nbsp;maxResults)
                    throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByCriteria(org.hibernate.criterion.DetachedCriteria, int, int)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a query based on the given Hibernate criteria object.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByCriteria(org.hibernate.criterion.DetachedCriteria, int, int)">findByCriteria</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>criteria</CODE> - the detached Hibernate criteria object.
 <b>Note: Do not reuse criteria objects! They need to recreated per execution,
 due to the suboptimal design of Hibernate's criteria facility.</b><DD><CODE>firstResult</CODE> - the index of the first result object to be retrieved
 (numbered from 0)<DD><CODE>maxResults</CODE> - the maximum number of result objects to retrieve
 (or <=0 for no limit)
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing 0 or more persistent instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>DetachedCriteria.getExecutableCriteria(org.hibernate.Session)</CODE>, 
<CODE>Criteria.setFirstResult(int)</CODE>, 
<CODE>Criteria.setMaxResults(int)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByExample(java.lang.Object)"><!-- --></A><H3>
findByExample</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByExample</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;exampleEntity)
                   throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByExample(java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a query based on the given example entity object.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByExample(java.lang.Object)">findByExample</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>exampleEntity</CODE> - an instance of the desired entity,
 serving as example for "query-by-example"
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing 0 or more persistent instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Example.create(Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByExample(java.lang.String, java.lang.Object)"><!-- --></A><H3>
findByExample</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByExample</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;exampleEntity)
                   throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByExample(java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a query based on the given example entity object.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByExample(java.lang.String, java.lang.Object)">findByExample</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>exampleEntity</CODE> - an instance of the desired entity,
 serving as example for "query-by-example"
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing 0 or more persistent instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Example.create(Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByExample(java.lang.Object, int, int)"><!-- --></A><H3>
findByExample</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByExample</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;exampleEntity,
                          int&nbsp;firstResult,
                          int&nbsp;maxResults)
                   throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByExample(java.lang.Object, int, int)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a query based on a given example entity object.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByExample(java.lang.Object, int, int)">findByExample</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>exampleEntity</CODE> - an instance of the desired entity,
 serving as example for "query-by-example"<DD><CODE>firstResult</CODE> - the index of the first result object to be retrieved
 (numbered from 0)<DD><CODE>maxResults</CODE> - the maximum number of result objects to retrieve
 (or <=0 for no limit)
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing 0 or more persistent instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Example.create(Object)</CODE>, 
<CODE>Criteria.setFirstResult(int)</CODE>, 
<CODE>Criteria.setMaxResults(int)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="findByExample(java.lang.String, java.lang.Object, int, int)"><!-- --></A><H3>
findByExample</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A> <B>findByExample</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;entityName,
                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;exampleEntity,
                          int&nbsp;firstResult,
                          int&nbsp;maxResults)
                   throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByExample(java.lang.String, java.lang.Object, int, int)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a query based on a given example entity object.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#findByExample(java.lang.String, java.lang.Object, int, int)">findByExample</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>entityName</CODE> - the name of the persistent entity<DD><CODE>exampleEntity</CODE> - an instance of the desired entity,
 serving as example for "query-by-example"<DD><CODE>firstResult</CODE> - the index of the first result object to be retrieved
 (numbered from 0)<DD><CODE>maxResults</CODE> - the maximum number of result objects to retrieve
 (or <=0 for no limit)
<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util"><CODE>List</CODE></A> containing 0 or more persistent instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Example.create(Object)</CODE>, 
<CODE>Criteria.setFirstResult(int)</CODE>, 
<CODE>Criteria.setMaxResults(int)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="iterate(java.lang.String)"><!-- --></A><H3>
iterate</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util">Iterator</A> <B>iterate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString)
                 throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#iterate(java.lang.String)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a query for persistent instances.
 <p>Returns the results as an <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util"><CODE>Iterator</CODE></A>. Entities returned are
 initialized on demand. See the Hibernate API documentation for details.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#iterate(java.lang.String)">iterate</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryString</CODE> - a query expressed in Hibernate's query language
<DT><B>Returns:</B><DD>an <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util"><CODE>Iterator</CODE></A> containing 0 or more persistent instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.createQuery(java.lang.String)</CODE>, 
<CODE>Query.iterate()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="iterate(java.lang.String, java.lang.Object)"><!-- --></A><H3>
iterate</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util">Iterator</A> <B>iterate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
                        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)
                 throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#iterate(java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a query for persistent instances, binding one value
 to a "?" parameter in the query string.
 <p>Returns the results as an <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util"><CODE>Iterator</CODE></A>. Entities returned are
 initialized on demand. See the Hibernate API documentation for details.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#iterate(java.lang.String, java.lang.Object)">iterate</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryString</CODE> - a query expressed in Hibernate's query language<DD><CODE>value</CODE> - the value of the parameter
<DT><B>Returns:</B><DD>an <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util"><CODE>Iterator</CODE></A> containing 0 or more persistent instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.createQuery(java.lang.String)</CODE>, 
<CODE>Query.iterate()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="iterate(java.lang.String, java.lang.Object...)"><!-- --></A><H3>
iterate</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util">Iterator</A> <B>iterate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
                        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;values)
                 throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#iterate(java.lang.String, java.lang.Object...)">HibernateOperations</A></CODE></B></DD>
<DD>Execute a query for persistent instances, binding a number of
 values to "?" parameters in the query string.
 <p>Returns the results as an <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util"><CODE>Iterator</CODE></A>. Entities returned are
 initialized on demand. See the Hibernate API documentation for details.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#iterate(java.lang.String, java.lang.Object...)">iterate</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryString</CODE> - a query expressed in Hibernate's query language<DD><CODE>values</CODE> - the values of the parameters
<DT><B>Returns:</B><DD>an <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util"><CODE>Iterator</CODE></A> containing 0 or more persistent instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.createQuery(java.lang.String)</CODE>, 
<CODE>Query.iterate()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="closeIterator(java.util.Iterator)"><!-- --></A><H3>
closeIterator</H3>
<PRE>
public void <B>closeIterator</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util">Iterator</A>&nbsp;it)
                   throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#closeIterator(java.util.Iterator)">HibernateOperations</A></CODE></B></DD>
<DD>Immediately close an <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util"><CODE>Iterator</CODE></A> created by any of the various
 <code>iterate(..)</code> operations, instead of waiting until the
 session is closed or disconnected.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#closeIterator(java.util.Iterator)">closeIterator</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>it</CODE> - the <code>Iterator</code> to close
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the <code>Iterator</code> could not be closed<DT><B>See Also:</B><DD><CODE>Hibernate.close(java.util.Iterator)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="bulkUpdate(java.lang.String)"><!-- --></A><H3>
bulkUpdate</H3>
<PRE>
public int <B>bulkUpdate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString)
               throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#bulkUpdate(java.lang.String)">HibernateOperations</A></CODE></B></DD>
<DD>Update/delete all objects according to the given query.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#bulkUpdate(java.lang.String)">bulkUpdate</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryString</CODE> - an update/delete query expressed in Hibernate's query language
<DT><B>Returns:</B><DD>the number of instances updated/deleted
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.createQuery(java.lang.String)</CODE>, 
<CODE>Query.executeUpdate()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="bulkUpdate(java.lang.String, java.lang.Object)"><!-- --></A><H3>
bulkUpdate</H3>
<PRE>
public int <B>bulkUpdate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
                      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)
               throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#bulkUpdate(java.lang.String, java.lang.Object)">HibernateOperations</A></CODE></B></DD>
<DD>Update/delete all objects according to the given query, binding one value
 to a "?" parameter in the query string.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#bulkUpdate(java.lang.String, java.lang.Object)">bulkUpdate</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryString</CODE> - an update/delete query expressed in Hibernate's query language<DD><CODE>value</CODE> - the value of the parameter
<DT><B>Returns:</B><DD>the number of instances updated/deleted
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.createQuery(java.lang.String)</CODE>, 
<CODE>Query.executeUpdate()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="bulkUpdate(java.lang.String, java.lang.Object...)"><!-- --></A><H3>
bulkUpdate</H3>
<PRE>
public int <B>bulkUpdate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;queryString,
                      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;values)
               throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#bulkUpdate(java.lang.String, java.lang.Object...)">HibernateOperations</A></CODE></B></DD>
<DD>Update/delete all objects according to the given query, binding a number of
 values to "?" parameters in the query string.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html#bulkUpdate(java.lang.String, java.lang.Object...)">bulkUpdate</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/orm/hibernate3/HibernateOperations.html" title="interface in org.springframework.orm.hibernate3">HibernateOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryString</CODE> - an update/delete query expressed in Hibernate's query language<DD><CODE>values</CODE> - the values of the parameters
<DT><B>Returns:</B><DD>the number of instances updated/deleted
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - in case of Hibernate errors<DT><B>See Also:</B><DD><CODE>Session.createQuery(java.lang.String)</CODE>, 
<CODE>Query.executeUpdate()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="checkWriteOperationAllowed(org.hibernate.Session)"><!-- --></A><H3>
checkWriteOperationAllowed</H3>
<PRE>
protected void <B>checkWriteOperationAllowed</B>(org.hibernate.Session&nbsp;session)
                                   throws <A HREF="../../../../org/springframework/dao/InvalidDataAccessApiUsageException.html" title="class in org.springframework.dao">InvalidDataAccessApiUsageException</A></PRE>
<DL>
<DD>Check whether write operations are allowed on the given Session.
 <p>Default implementation throws an InvalidDataAccessApiUsageException in
 case of <code>FlushMode.MANUAL</code>. Can be overridden in subclasses.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>session</CODE> - current Hibernate Session
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/InvalidDataAccessApiUsageException.html" title="class in org.springframework.dao">InvalidDataAccessApiUsageException</A></CODE> - if write operations are not allowed<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setCheckWriteOperations(boolean)"><CODE>setCheckWriteOperations(boolean)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#getFlushMode()"><CODE>HibernateAccessor.getFlushMode()</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateAccessor.html#FLUSH_EAGER"><CODE>HibernateAccessor.FLUSH_EAGER</CODE></A>, 
<CODE>Session.getFlushMode()</CODE>, 
<CODE>FlushMode.MANUAL</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="prepareQuery(org.hibernate.Query)"><!-- --></A><H3>
prepareQuery</H3>
<PRE>
protected void <B>prepareQuery</B>(org.hibernate.Query&nbsp;queryObject)</PRE>
<DL>
<DD>Prepare the given Query object, applying cache settings and/or
 a transaction timeout.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryObject</CODE> - the Query object to prepare<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setCacheQueries(boolean)"><CODE>setCacheQueries(boolean)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setQueryCacheRegion(java.lang.String)"><CODE>setQueryCacheRegion(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/SessionFactoryUtils.html#applyTransactionTimeout(org.hibernate.Query, org.hibernate.SessionFactory)"><CODE>SessionFactoryUtils.applyTransactionTimeout(org.hibernate.Query, org.hibernate.SessionFactory)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="prepareCriteria(org.hibernate.Criteria)"><!-- --></A><H3>
prepareCriteria</H3>
<PRE>
protected void <B>prepareCriteria</B>(org.hibernate.Criteria&nbsp;criteria)</PRE>
<DL>
<DD>Prepare the given Criteria object, applying cache settings and/or
 a transaction timeout.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>criteria</CODE> - the Criteria object to prepare<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setCacheQueries(boolean)"><CODE>setCacheQueries(boolean)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTemplate.html#setQueryCacheRegion(java.lang.String)"><CODE>setQueryCacheRegion(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/orm/hibernate3/SessionFactoryUtils.html#applyTransactionTimeout(org.hibernate.Query, org.hibernate.SessionFactory)"><CODE>SessionFactoryUtils.applyTransactionTimeout(org.hibernate.Query, org.hibernate.SessionFactory)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="applyNamedParameterToQuery(org.hibernate.Query, java.lang.String, java.lang.Object)"><!-- --></A><H3>
applyNamedParameterToQuery</H3>
<PRE>
protected void <B>applyNamedParameterToQuery</B>(org.hibernate.Query&nbsp;queryObject,
                                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;paramName,
                                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)
                                   throws org.hibernate.HibernateException</PRE>
<DL>
<DD>Apply the given name parameter to the given Query object.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryObject</CODE> - the Query object<DD><CODE>paramName</CODE> - the name of the parameter<DD><CODE>value</CODE> - the value of the parameter
<DT><B>Throws:</B>
<DD><CODE>org.hibernate.HibernateException</CODE> - if thrown by the Query object</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/springframework/orm/hibernate3/HibernateSystemException.html" title="class in org.springframework.orm.hibernate3"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/springframework/orm/hibernate3/HibernateTransactionManager.html" title="class in org.springframework.orm.hibernate3"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/orm/hibernate3/HibernateTemplate.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="HibernateTemplate.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_org.springframework.orm.hibernate3.HibernateAccessor">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
