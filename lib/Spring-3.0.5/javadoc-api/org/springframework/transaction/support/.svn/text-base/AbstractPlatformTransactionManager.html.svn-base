<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:24:35 BST 2010 -->
<TITLE>
AbstractPlatformTransactionManager
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="AbstractPlatformTransactionManager";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.SuspendedResourcesHolder.html" title="class in org.springframework.transaction.support"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/transaction/support/AbstractPlatformTransactionManager.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="AbstractPlatformTransactionManager.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.transaction.support</FONT>
<BR>
Class AbstractPlatformTransactionManager</H2>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>org.springframework.transaction.support.AbstractPlatformTransactionManager</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>, <A HREF="../../../../org/springframework/transaction/PlatformTransactionManager.html" title="interface in org.springframework.transaction">PlatformTransactionManager</A></DD>
</DL>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../org/springframework/jca/cci/connection/CciLocalTransactionManager.html" title="class in org.springframework.jca.cci.connection">CciLocalTransactionManager</A>, <A HREF="../../../../org/springframework/jdbc/datasource/DataSourceTransactionManager.html" title="class in org.springframework.jdbc.datasource">DataSourceTransactionManager</A>, <A HREF="../../../../org/springframework/orm/hibernate3/HibernateTransactionManager.html" title="class in org.springframework.orm.hibernate3">HibernateTransactionManager</A>, <A HREF="../../../../org/springframework/orm/jdo/JdoTransactionManager.html" title="class in org.springframework.orm.jdo">JdoTransactionManager</A>, <A HREF="../../../../org/springframework/jms/connection/JmsTransactionManager.html" title="class in org.springframework.jms.connection">JmsTransactionManager</A>, <A HREF="../../../../org/springframework/orm/jpa/JpaTransactionManager.html" title="class in org.springframework.orm.jpa">JpaTransactionManager</A>, <A HREF="../../../../org/springframework/transaction/jta/JtaTransactionManager.html" title="class in org.springframework.transaction.jta">JtaTransactionManager</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public abstract class <B>AbstractPlatformTransactionManager</B><DT>extends <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A><DT>implements <A HREF="../../../../org/springframework/transaction/PlatformTransactionManager.html" title="interface in org.springframework.transaction">PlatformTransactionManager</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A></DL>
</PRE>

<P>
Abstract base class that implements Spring's standard transaction workflow,
 serving as basis for concrete platform transaction managers like
 <A HREF="../../../../org/springframework/transaction/jta/JtaTransactionManager.html" title="class in org.springframework.transaction.jta"><CODE>JtaTransactionManager</CODE></A>.

 <p>This base class provides the following workflow handling:
 <ul>
 <li>determines if there is an existing transaction;
 <li>applies the appropriate propagation behavior;
 <li>suspends and resumes transactions if necessary;
 <li>checks the rollback-only flag on commit;
 <li>applies the appropriate modification on rollback
 (actual rollback or setting rollback-only);
 <li>triggers registered synchronization callbacks
 (if transaction synchronization is active).
 </ul>

 <p>Subclasses have to implement specific template methods for specific
 states of a transaction, e.g.: begin, suspend, resume, commit, rollback.
 The most important of them are abstract and must be provided by a concrete
 implementation; for the rest, defaults are provided, so overriding is optional.

 <p>Transaction synchronization is a generic mechanism for registering callbacks
 that get invoked at transaction completion time. This is mainly used internally
 by the data access support classes for JDBC, Hibernate, JPA, etc when running
 within a JTA transaction: They register resources that are opened within the
 transaction for closing at transaction completion time, allowing e.g. for reuse
 of the same Hibernate Session within the transaction. The same mechanism can
 also be leveraged for custom synchronization needs in an application.
 
 <p>The state of this class is serializable, to allow for serializing the
 transaction strategy along with proxies that carry a transaction interceptor.
 It is up to subclasses if they wish to make their state to be serializable too.
 They should implement the <code>java.io.Serializable</code> marker interface in
 that case, and potentially a private <code>readObject()</code> method (according
 to Java serialization rules) if they need to restore any transient state.
<P>

<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>28.03.2003</DD>
<DT><B>Author:</B></DT>
  <DD>Juergen Hoeller</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#setTransactionSynchronization(int)"><CODE>setTransactionSynchronization(int)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/TransactionSynchronizationManager.html" title="class in org.springframework.transaction.support"><CODE>TransactionSynchronizationManager</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/jta/JtaTransactionManager.html" title="class in org.springframework.transaction.jta"><CODE>JtaTransactionManager</CODE></A>, 
<A HREF="../../../../serialized-form.html#org.springframework.transaction.support.AbstractPlatformTransactionManager">Serialized Form</A></DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->

<A NAME="nested_class_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Nested Class Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected static&nbsp;class</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.SuspendedResourcesHolder.html" title="class in org.springframework.transaction.support">AbstractPlatformTransactionManager.SuspendedResourcesHolder</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Holder for suspended resources.</TD>
</TR>
</TABLE>
&nbsp;<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://jakarta.apache.org/commons/logging/apidocs/org/apache/commons/logging/Log.html?is-external=true" title="class or interface in org.apache.commons.logging">Log</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#logger">logger</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#SYNCHRONIZATION_ALWAYS">SYNCHRONIZATION_ALWAYS</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Always activate transaction synchronization, even for "empty" transactions
 that result from PROPAGATION_SUPPORTS with no existing backend transaction.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#SYNCHRONIZATION_NEVER">SYNCHRONIZATION_NEVER</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Never active transaction synchronization, not even for actual transactions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#SYNCHRONIZATION_ON_ACTUAL_TRANSACTION">SYNCHRONIZATION_ON_ACTUAL_TRANSACTION</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Activate transaction synchronization only for actual transactions,
 that is, not for empty ones that result from PROPAGATION_SUPPORTS with
 no existing backend transaction.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#AbstractPlatformTransactionManager()">AbstractPlatformTransactionManager</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#commit(org.springframework.transaction.TransactionStatus)">commit</A></B>(<A HREF="../../../../org/springframework/transaction/TransactionStatus.html" title="interface in org.springframework.transaction">TransactionStatus</A>&nbsp;status)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This implementation of commit handles participating in existing
 transactions and programmatic rollback requests.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#determineTimeout(org.springframework.transaction.TransactionDefinition)">determineTimeout</A></B>(<A HREF="../../../../org/springframework/transaction/TransactionDefinition.html" title="interface in org.springframework.transaction">TransactionDefinition</A>&nbsp;definition)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine the actual timeout to use for the given definition.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doBegin(java.lang.Object, org.springframework.transaction.TransactionDefinition)">doBegin</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction,
        <A HREF="../../../../org/springframework/transaction/TransactionDefinition.html" title="interface in org.springframework.transaction">TransactionDefinition</A>&nbsp;definition)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Begin a new transaction with semantics according to the given transaction
 definition.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doCleanupAfterCompletion(java.lang.Object)">doCleanupAfterCompletion</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cleanup resources after transaction completion.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doCommit(org.springframework.transaction.support.DefaultTransactionStatus)">doCommit</A></B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform an actual commit of the given transaction.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected abstract &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doGetTransaction()">doGetTransaction</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a transaction object for the current transaction state.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doResume(java.lang.Object, java.lang.Object)">doResume</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction,
         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;suspendedResources)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resume the resources of the current transaction.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doRollback(org.springframework.transaction.support.DefaultTransactionStatus)">doRollback</A></B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform an actual rollback of the given transaction.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doSetRollbackOnly(org.springframework.transaction.support.DefaultTransactionStatus)">doSetRollbackOnly</A></B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the given transaction rollback-only.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doSuspend(java.lang.Object)">doSuspend</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Suspend the resources of the current transaction.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#getDefaultTimeout()">getDefaultTimeout</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the default timeout that this transaction manager should apply
 if there is no timeout specified at the transaction level, in seconds.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/springframework/transaction/TransactionStatus.html" title="interface in org.springframework.transaction">TransactionStatus</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#getTransaction(org.springframework.transaction.TransactionDefinition)">getTransaction</A></B>(<A HREF="../../../../org/springframework/transaction/TransactionDefinition.html" title="interface in org.springframework.transaction">TransactionDefinition</A>&nbsp;definition)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This implementation handles propagation behavior.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#getTransactionSynchronization()">getTransactionSynchronization</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return if this transaction manager should activate the thread-bound
 transaction synchronization support.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#invokeAfterCompletion(java.util.List, int)">invokeAfterCompletion</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../org/springframework/transaction/support/TransactionSynchronization.html" title="interface in org.springframework.transaction.support">TransactionSynchronization</A>&gt;&nbsp;synchronizations,
                      int&nbsp;completionStatus)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Actually invoke the <code>afterCompletion</code> methods of the
 given Spring TransactionSynchronization objects.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#isExistingTransaction(java.lang.Object)">isExistingTransaction</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check if the given transaction object indicates an existing transaction
 (that is, a transaction which has already started).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#isFailEarlyOnGlobalRollbackOnly()">isFailEarlyOnGlobalRollbackOnly</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether to fail early in case of the transaction being globally marked
 as rollback-only.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#isGlobalRollbackOnParticipationFailure()">isGlobalRollbackOnParticipationFailure</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether to globally mark an existing transaction as rollback-only
 after a participating transaction failed.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#isNestedTransactionAllowed()">isNestedTransactionAllowed</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether nested transactions are allowed.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#isRollbackOnCommitFailure()">isRollbackOnCommitFailure</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether <code>doRollback</code> should be performed on failure of the
 <code>doCommit</code> call.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#isValidateExistingTransaction()">isValidateExistingTransaction</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether existing transactions should be validated before participating
 in them.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#newTransactionStatus(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean, boolean, boolean, java.lang.Object)">newTransactionStatus</A></B>(<A HREF="../../../../org/springframework/transaction/TransactionDefinition.html" title="interface in org.springframework.transaction">TransactionDefinition</A>&nbsp;definition,
                     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction,
                     boolean&nbsp;newTransaction,
                     boolean&nbsp;newSynchronization,
                     boolean&nbsp;debug,
                     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;suspendedResources)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a rae TransactionStatus instance for the given arguments.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#prepareForCommit(org.springframework.transaction.support.DefaultTransactionStatus)">prepareForCommit</A></B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Make preparations for commit, to be performed before the
 <code>beforeCommit</code> synchronization callbacks occur.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#prepareSynchronization(org.springframework.transaction.support.DefaultTransactionStatus, org.springframework.transaction.TransactionDefinition)">prepareSynchronization</A></B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status,
                       <A HREF="../../../../org/springframework/transaction/TransactionDefinition.html" title="interface in org.springframework.transaction">TransactionDefinition</A>&nbsp;definition)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize transaction synchronization as appropriate.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#prepareTransactionStatus(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean, boolean, boolean, java.lang.Object)">prepareTransactionStatus</A></B>(<A HREF="../../../../org/springframework/transaction/TransactionDefinition.html" title="interface in org.springframework.transaction">TransactionDefinition</A>&nbsp;definition,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction,
                         boolean&nbsp;newTransaction,
                         boolean&nbsp;newSynchronization,
                         boolean&nbsp;debug,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;suspendedResources)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new TransactionStatus for the given arguments,
 also initializing transaction synchronization as appropriate.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#registerAfterCompletionWithExistingTransaction(java.lang.Object, java.util.List)">registerAfterCompletionWithExistingTransaction</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction,
                                               <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../org/springframework/transaction/support/TransactionSynchronization.html" title="interface in org.springframework.transaction.support">TransactionSynchronization</A>&gt;&nbsp;synchronizations)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register the given list of transaction synchronizations with the existing transaction.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#resume(java.lang.Object, org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder)">resume</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction,
       <A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.SuspendedResourcesHolder.html" title="class in org.springframework.transaction.support">AbstractPlatformTransactionManager.SuspendedResourcesHolder</A>&nbsp;resourcesHolder)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resume the given transaction.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#rollback(org.springframework.transaction.TransactionStatus)">rollback</A></B>(<A HREF="../../../../org/springframework/transaction/TransactionStatus.html" title="interface in org.springframework.transaction">TransactionStatus</A>&nbsp;status)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This implementation of rollback handles participating in existing
 transactions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#setDefaultTimeout(int)">setDefaultTimeout</A></B>(int&nbsp;defaultTimeout)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify the default timeout that this transaction manager should apply
 if there is no timeout specified at the transaction level, in seconds.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#setFailEarlyOnGlobalRollbackOnly(boolean)">setFailEarlyOnGlobalRollbackOnly</A></B>(boolean&nbsp;failEarlyOnGlobalRollbackOnly)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether to fail early in case of the transaction being globally marked
 as rollback-only.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#setGlobalRollbackOnParticipationFailure(boolean)">setGlobalRollbackOnParticipationFailure</A></B>(boolean&nbsp;globalRollbackOnParticipationFailure)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether to globally mark an existing transaction as rollback-only
 after a participating transaction failed.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#setNestedTransactionAllowed(boolean)">setNestedTransactionAllowed</A></B>(boolean&nbsp;nestedTransactionAllowed)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether nested transactions are allowed.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#setRollbackOnCommitFailure(boolean)">setRollbackOnCommitFailure</A></B>(boolean&nbsp;rollbackOnCommitFailure)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether <code>doRollback</code> should be performed on failure of the
 <code>doCommit</code> call.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#setTransactionSynchronization(int)">setTransactionSynchronization</A></B>(int&nbsp;transactionSynchronization)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set when this transaction manager should activate the thread-bound
 transaction synchronization support.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#setTransactionSynchronizationName(java.lang.String)">setTransactionSynchronizationName</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;constantName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the transaction synchronization by the name of the corresponding constant
 in this class, e.g.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#setValidateExistingTransaction(boolean)">setValidateExistingTransaction</A></B>(boolean&nbsp;validateExistingTransaction)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether existing transactions should be validated before participating
 in them.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#shouldCommitOnGlobalRollbackOnly()">shouldCommitOnGlobalRollbackOnly</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether to call <code>doCommit</code> on a transaction that has been
 marked as rollback-only in a global fashion.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.SuspendedResourcesHolder.html" title="class in org.springframework.transaction.support">AbstractPlatformTransactionManager.SuspendedResourcesHolder</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#suspend(java.lang.Object)">suspend</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Suspend the given transaction.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#triggerBeforeCommit(org.springframework.transaction.support.DefaultTransactionStatus)">triggerBeforeCommit</A></B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Trigger <code>beforeCommit</code> callbacks.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#triggerBeforeCompletion(org.springframework.transaction.support.DefaultTransactionStatus)">triggerBeforeCompletion</A></B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Trigger <code>beforeCompletion</code> callbacks.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#useSavepointForNestedTransaction()">useSavepointForNestedTransaction</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether to use a savepoint for a nested transaction.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="SYNCHRONIZATION_ALWAYS"><!-- --></A><H3>
SYNCHRONIZATION_ALWAYS</H3>
<PRE>
public static final int <B>SYNCHRONIZATION_ALWAYS</B></PRE>
<DL>
<DD>Always activate transaction synchronization, even for "empty" transactions
 that result from PROPAGATION_SUPPORTS with no existing backend transaction.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/TransactionDefinition.html#PROPAGATION_SUPPORTS"><CODE>TransactionDefinition.PROPAGATION_SUPPORTS</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/TransactionDefinition.html#PROPAGATION_NOT_SUPPORTED"><CODE>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/TransactionDefinition.html#PROPAGATION_NEVER"><CODE>TransactionDefinition.PROPAGATION_NEVER</CODE></A>, 
<A HREF="../../../../constant-values.html#org.springframework.transaction.support.AbstractPlatformTransactionManager.SYNCHRONIZATION_ALWAYS">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="SYNCHRONIZATION_ON_ACTUAL_TRANSACTION"><!-- --></A><H3>
SYNCHRONIZATION_ON_ACTUAL_TRANSACTION</H3>
<PRE>
public static final int <B>SYNCHRONIZATION_ON_ACTUAL_TRANSACTION</B></PRE>
<DL>
<DD>Activate transaction synchronization only for actual transactions,
 that is, not for empty ones that result from PROPAGATION_SUPPORTS with
 no existing backend transaction.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/TransactionDefinition.html#PROPAGATION_REQUIRED"><CODE>TransactionDefinition.PROPAGATION_REQUIRED</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/TransactionDefinition.html#PROPAGATION_MANDATORY"><CODE>TransactionDefinition.PROPAGATION_MANDATORY</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/TransactionDefinition.html#PROPAGATION_REQUIRES_NEW"><CODE>TransactionDefinition.PROPAGATION_REQUIRES_NEW</CODE></A>, 
<A HREF="../../../../constant-values.html#org.springframework.transaction.support.AbstractPlatformTransactionManager.SYNCHRONIZATION_ON_ACTUAL_TRANSACTION">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="SYNCHRONIZATION_NEVER"><!-- --></A><H3>
SYNCHRONIZATION_NEVER</H3>
<PRE>
public static final int <B>SYNCHRONIZATION_NEVER</B></PRE>
<DL>
<DD>Never active transaction synchronization, not even for actual transactions.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#org.springframework.transaction.support.AbstractPlatformTransactionManager.SYNCHRONIZATION_NEVER">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="logger"><!-- --></A><H3>
logger</H3>
<PRE>
protected transient <A HREF="http://jakarta.apache.org/commons/logging/apidocs/org/apache/commons/logging/Log.html?is-external=true" title="class or interface in org.apache.commons.logging">Log</A> <B>logger</B></PRE>
<DL>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="AbstractPlatformTransactionManager()"><!-- --></A><H3>
AbstractPlatformTransactionManager</H3>
<PRE>
public <B>AbstractPlatformTransactionManager</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="setTransactionSynchronizationName(java.lang.String)"><!-- --></A><H3>
setTransactionSynchronizationName</H3>
<PRE>
public final void <B>setTransactionSynchronizationName</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;constantName)</PRE>
<DL>
<DD>Set the transaction synchronization by the name of the corresponding constant
 in this class, e.g. "SYNCHRONIZATION_ALWAYS".
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>constantName</CODE> - name of the constant<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#SYNCHRONIZATION_ALWAYS"><CODE>SYNCHRONIZATION_ALWAYS</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setTransactionSynchronization(int)"><!-- --></A><H3>
setTransactionSynchronization</H3>
<PRE>
public final void <B>setTransactionSynchronization</B>(int&nbsp;transactionSynchronization)</PRE>
<DL>
<DD>Set when this transaction manager should activate the thread-bound
 transaction synchronization support. Default is "always".
 <p>Note that transaction synchronization isn't supported for
 multiple concurrent transactions by different transaction managers.
 Only one transaction manager is allowed to activate it at any time.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#SYNCHRONIZATION_ALWAYS"><CODE>SYNCHRONIZATION_ALWAYS</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#SYNCHRONIZATION_ON_ACTUAL_TRANSACTION"><CODE>SYNCHRONIZATION_ON_ACTUAL_TRANSACTION</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#SYNCHRONIZATION_NEVER"><CODE>SYNCHRONIZATION_NEVER</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/TransactionSynchronizationManager.html" title="class in org.springframework.transaction.support"><CODE>TransactionSynchronizationManager</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/TransactionSynchronization.html" title="interface in org.springframework.transaction.support"><CODE>TransactionSynchronization</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getTransactionSynchronization()"><!-- --></A><H3>
getTransactionSynchronization</H3>
<PRE>
public final int <B>getTransactionSynchronization</B>()</PRE>
<DL>
<DD>Return if this transaction manager should activate the thread-bound
 transaction synchronization support.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setDefaultTimeout(int)"><!-- --></A><H3>
setDefaultTimeout</H3>
<PRE>
public final void <B>setDefaultTimeout</B>(int&nbsp;defaultTimeout)</PRE>
<DL>
<DD>Specify the default timeout that this transaction manager should apply
 if there is no timeout specified at the transaction level, in seconds.
 <p>Default is the underlying transaction infrastructure's default timeout,
 e.g. typically 30 seconds in case of a JTA provider, indicated by the
 <code>TransactionDefinition.TIMEOUT_DEFAULT</code> value.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/TransactionDefinition.html#TIMEOUT_DEFAULT"><CODE>TransactionDefinition.TIMEOUT_DEFAULT</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getDefaultTimeout()"><!-- --></A><H3>
getDefaultTimeout</H3>
<PRE>
public final int <B>getDefaultTimeout</B>()</PRE>
<DL>
<DD>Return the default timeout that this transaction manager should apply
 if there is no timeout specified at the transaction level, in seconds.
 <p>Returns <code>TransactionDefinition.TIMEOUT_DEFAULT</code> to indicate
 the underlying transaction infrastructure's default timeout.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setNestedTransactionAllowed(boolean)"><!-- --></A><H3>
setNestedTransactionAllowed</H3>
<PRE>
public final void <B>setNestedTransactionAllowed</B>(boolean&nbsp;nestedTransactionAllowed)</PRE>
<DL>
<DD>Set whether nested transactions are allowed. Default is "false".
 <p>Typically initialized with an appropriate default by the
 concrete transaction manager subclass.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isNestedTransactionAllowed()"><!-- --></A><H3>
isNestedTransactionAllowed</H3>
<PRE>
public final boolean <B>isNestedTransactionAllowed</B>()</PRE>
<DL>
<DD>Return whether nested transactions are allowed.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setValidateExistingTransaction(boolean)"><!-- --></A><H3>
setValidateExistingTransaction</H3>
<PRE>
public final void <B>setValidateExistingTransaction</B>(boolean&nbsp;validateExistingTransaction)</PRE>
<DL>
<DD>Set whether existing transactions should be validated before participating
 in them.
 <p>When participating in an existing transaction (e.g. with
 PROPAGATION_REQUIRES or PROPAGATION_SUPPORTS encountering an existing
 transaction), this outer transaction's characteristics will apply even
 to the inner transaction scope. Validation will detect incompatible
 isolation level and read-only settings on the inner transaction definition
 and reject participation accordingly through throwing a corresponding exception.
 <p>Default is "false", leniently ignoring inner transaction settings,
 simply overriding them with the outer transaction's characteristics.
 Switch this flag to "true" in order to enforce strict validation.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isValidateExistingTransaction()"><!-- --></A><H3>
isValidateExistingTransaction</H3>
<PRE>
public final boolean <B>isValidateExistingTransaction</B>()</PRE>
<DL>
<DD>Return whether existing transactions should be validated before participating
 in them.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setGlobalRollbackOnParticipationFailure(boolean)"><!-- --></A><H3>
setGlobalRollbackOnParticipationFailure</H3>
<PRE>
public final void <B>setGlobalRollbackOnParticipationFailure</B>(boolean&nbsp;globalRollbackOnParticipationFailure)</PRE>
<DL>
<DD>Set whether to globally mark an existing transaction as rollback-only
 after a participating transaction failed.
 <p>Default is "true": If a participating transaction (e.g. with
 PROPAGATION_REQUIRES or PROPAGATION_SUPPORTS encountering an existing
 transaction) fails, the transaction will be globally marked as rollback-only.
 The only possible outcome of such a transaction is a rollback: The
 transaction originator <i>cannot</i> make the transaction commit anymore.
 <p>Switch this to "false" to let the transaction originator make the rollback
 decision. If a participating transaction fails with an exception, the caller
 can still decide to continue with a different path within the transaction.
 However, note that this will only work as long as all participating resources
 are capable of continuing towards a transaction commit even after a data access
 failure: This is generally not the case for a Hibernate Session, for example;
 neither is it for a sequence of JDBC insert/update/delete operations.
 <p><b>Note:</b>This flag only applies to an explicit rollback attempt for a
 subtransaction, typically caused by an exception thrown by a data access operation
 (where TransactionInterceptor will trigger a <code>PlatformTransactionManager.rollback()</code>
 call according to a rollback rule). If the flag is off, the caller can handle the exception
 and decide on a rollback, independent of the rollback rules of the subtransaction.
 This flag does, however, <i>not</i> apply to explicit <code>setRollbackOnly</code>
 calls on a <code>TransactionStatus</code>, which will always cause an eventual
 global rollback (as it might not throw an exception after the rollback-only call).
 <p>The recommended solution for handling failure of a subtransaction
 is a "nested transaction", where the global transaction can be rolled
 back to a savepoint taken at the beginning of the subtransaction.
 PROPAGATION_NESTED provides exactly those semantics; however, it will
 only work when nested transaction support is available. This is the case
 with DataSourceTransactionManager, but not with JtaTransactionManager.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#setNestedTransactionAllowed(boolean)"><CODE>setNestedTransactionAllowed(boolean)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/jta/JtaTransactionManager.html" title="class in org.springframework.transaction.jta"><CODE>JtaTransactionManager</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isGlobalRollbackOnParticipationFailure()"><!-- --></A><H3>
isGlobalRollbackOnParticipationFailure</H3>
<PRE>
public final boolean <B>isGlobalRollbackOnParticipationFailure</B>()</PRE>
<DL>
<DD>Return whether to globally mark an existing transaction as rollback-only
 after a participating transaction failed.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setFailEarlyOnGlobalRollbackOnly(boolean)"><!-- --></A><H3>
setFailEarlyOnGlobalRollbackOnly</H3>
<PRE>
public final void <B>setFailEarlyOnGlobalRollbackOnly</B>(boolean&nbsp;failEarlyOnGlobalRollbackOnly)</PRE>
<DL>
<DD>Set whether to fail early in case of the transaction being globally marked
 as rollback-only.
 <p>Default is "false", only causing an UnexpectedRollbackException at the
 outermost transaction boundary. Switch this flag on to cause an
 UnexpectedRollbackException as early as the global rollback-only marker
 has been first detected, even from within an inner transaction boundary.
 <p>Note that, as of Spring 2.0, the fail-early behavior for global
 rollback-only markers has been unified: All transaction managers will by
 default only cause UnexpectedRollbackException at the outermost transaction
 boundary. This allows, for example, to continue unit tests even after an
 operation failed and the transaction will never be completed. All transaction
 managers will only fail earlier if this flag has explicitly been set to "true".
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/UnexpectedRollbackException.html" title="class in org.springframework.transaction"><CODE>UnexpectedRollbackException</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isFailEarlyOnGlobalRollbackOnly()"><!-- --></A><H3>
isFailEarlyOnGlobalRollbackOnly</H3>
<PRE>
public final boolean <B>isFailEarlyOnGlobalRollbackOnly</B>()</PRE>
<DL>
<DD>Return whether to fail early in case of the transaction being globally marked
 as rollback-only.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setRollbackOnCommitFailure(boolean)"><!-- --></A><H3>
setRollbackOnCommitFailure</H3>
<PRE>
public final void <B>setRollbackOnCommitFailure</B>(boolean&nbsp;rollbackOnCommitFailure)</PRE>
<DL>
<DD>Set whether <code>doRollback</code> should be performed on failure of the
 <code>doCommit</code> call. Typically not necessary and thus to be avoided,
 as it can potentially override the commit exception with a subsequent
 rollback exception.
 <p>Default is "false".
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doCommit(org.springframework.transaction.support.DefaultTransactionStatus)"><CODE>doCommit(org.springframework.transaction.support.DefaultTransactionStatus)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doRollback(org.springframework.transaction.support.DefaultTransactionStatus)"><CODE>doRollback(org.springframework.transaction.support.DefaultTransactionStatus)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isRollbackOnCommitFailure()"><!-- --></A><H3>
isRollbackOnCommitFailure</H3>
<PRE>
public final boolean <B>isRollbackOnCommitFailure</B>()</PRE>
<DL>
<DD>Return whether <code>doRollback</code> should be performed on failure of the
 <code>doCommit</code> call.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getTransaction(org.springframework.transaction.TransactionDefinition)"><!-- --></A><H3>
getTransaction</H3>
<PRE>
public final <A HREF="../../../../org/springframework/transaction/TransactionStatus.html" title="interface in org.springframework.transaction">TransactionStatus</A> <B>getTransaction</B>(<A HREF="../../../../org/springframework/transaction/TransactionDefinition.html" title="interface in org.springframework.transaction">TransactionDefinition</A>&nbsp;definition)
                                       throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>This implementation handles propagation behavior. Delegates to
 <code>doGetTransaction</code>, <code>isExistingTransaction</code>
 and <code>doBegin</code>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/transaction/PlatformTransactionManager.html#getTransaction(org.springframework.transaction.TransactionDefinition)">getTransaction</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/transaction/PlatformTransactionManager.html" title="interface in org.springframework.transaction">PlatformTransactionManager</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>definition</CODE> - TransactionDefinition instance (can be <code>null</code> for defaults),
 describing propagation behavior, isolation level, timeout etc.
<DT><B>Returns:</B><DD>transaction status object representing the new or current transaction
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE> - in case of lookup, creation, or system errors
<DD><CODE><A HREF="../../../../org/springframework/transaction/IllegalTransactionStateException.html" title="class in org.springframework.transaction">IllegalTransactionStateException</A></CODE> - if the given transaction definition
 cannot be executed (for example, if a currently active transaction is in
 conflict with the specified propagation behavior)<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doGetTransaction()"><CODE>doGetTransaction()</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#isExistingTransaction(java.lang.Object)"><CODE>isExistingTransaction(java.lang.Object)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doBegin(java.lang.Object, org.springframework.transaction.TransactionDefinition)"><CODE>doBegin(java.lang.Object, org.springframework.transaction.TransactionDefinition)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="prepareTransactionStatus(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean, boolean, boolean, java.lang.Object)"><!-- --></A><H3>
prepareTransactionStatus</H3>
<PRE>
protected final <A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A> <B>prepareTransactionStatus</B>(<A HREF="../../../../org/springframework/transaction/TransactionDefinition.html" title="interface in org.springframework.transaction">TransactionDefinition</A>&nbsp;definition,
                                                                  <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction,
                                                                  boolean&nbsp;newTransaction,
                                                                  boolean&nbsp;newSynchronization,
                                                                  boolean&nbsp;debug,
                                                                  <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;suspendedResources)</PRE>
<DL>
<DD>Create a new TransactionStatus for the given arguments,
 also initializing transaction synchronization as appropriate.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#newTransactionStatus(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean, boolean, boolean, java.lang.Object)"><CODE>newTransactionStatus(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean, boolean, boolean, java.lang.Object)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#prepareTransactionStatus(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean, boolean, boolean, java.lang.Object)"><CODE>prepareTransactionStatus(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean, boolean, boolean, java.lang.Object)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="newTransactionStatus(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean, boolean, boolean, java.lang.Object)"><!-- --></A><H3>
newTransactionStatus</H3>
<PRE>
protected <A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A> <B>newTransactionStatus</B>(<A HREF="../../../../org/springframework/transaction/TransactionDefinition.html" title="interface in org.springframework.transaction">TransactionDefinition</A>&nbsp;definition,
                                                        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction,
                                                        boolean&nbsp;newTransaction,
                                                        boolean&nbsp;newSynchronization,
                                                        boolean&nbsp;debug,
                                                        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;suspendedResources)</PRE>
<DL>
<DD>Create a rae TransactionStatus instance for the given arguments.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="prepareSynchronization(org.springframework.transaction.support.DefaultTransactionStatus, org.springframework.transaction.TransactionDefinition)"><!-- --></A><H3>
prepareSynchronization</H3>
<PRE>
protected void <B>prepareSynchronization</B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status,
                                      <A HREF="../../../../org/springframework/transaction/TransactionDefinition.html" title="interface in org.springframework.transaction">TransactionDefinition</A>&nbsp;definition)</PRE>
<DL>
<DD>Initialize transaction synchronization as appropriate.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="determineTimeout(org.springframework.transaction.TransactionDefinition)"><!-- --></A><H3>
determineTimeout</H3>
<PRE>
protected int <B>determineTimeout</B>(<A HREF="../../../../org/springframework/transaction/TransactionDefinition.html" title="interface in org.springframework.transaction">TransactionDefinition</A>&nbsp;definition)</PRE>
<DL>
<DD>Determine the actual timeout to use for the given definition.
 Will fall back to this manager's default timeout if the
 transaction definition doesn't specify a non-default value.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>definition</CODE> - the transaction definition
<DT><B>Returns:</B><DD>the actual timeout to use<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/TransactionDefinition.html#getTimeout()"><CODE>TransactionDefinition.getTimeout()</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#setDefaultTimeout(int)"><CODE>setDefaultTimeout(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="suspend(java.lang.Object)"><!-- --></A><H3>
suspend</H3>
<PRE>
protected final <A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.SuspendedResourcesHolder.html" title="class in org.springframework.transaction.support">AbstractPlatformTransactionManager.SuspendedResourcesHolder</A> <B>suspend</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction)
                                                                             throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>Suspend the given transaction. Suspends transaction synchronization first,
 then delegates to the <code>doSuspend</code> template method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>transaction</CODE> - the current transaction object
 (or <code>null</code> to just suspend active synchronizations, if any)
<DT><B>Returns:</B><DD>an object that holds suspended resources
 (or <code>null</code> if neither transaction nor synchronization active)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE><DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doSuspend(java.lang.Object)"><CODE>doSuspend(java.lang.Object)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#resume(java.lang.Object, org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder)"><CODE>resume(java.lang.Object, org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="resume(java.lang.Object, org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder)"><!-- --></A><H3>
resume</H3>
<PRE>
protected final void <B>resume</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction,
                            <A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.SuspendedResourcesHolder.html" title="class in org.springframework.transaction.support">AbstractPlatformTransactionManager.SuspendedResourcesHolder</A>&nbsp;resourcesHolder)
                     throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>Resume the given transaction. Delegates to the <code>doResume</code>
 template method first, then resuming transaction synchronization.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>transaction</CODE> - the current transaction object<DD><CODE>resourcesHolder</CODE> - the object that holds suspended resources,
 as returned by <code>suspend</code> (or <code>null</code> to just
 resume synchronizations, if any)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE><DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doResume(java.lang.Object, java.lang.Object)"><CODE>doResume(java.lang.Object, java.lang.Object)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#suspend(java.lang.Object)"><CODE>suspend(java.lang.Object)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="commit(org.springframework.transaction.TransactionStatus)"><!-- --></A><H3>
commit</H3>
<PRE>
public final void <B>commit</B>(<A HREF="../../../../org/springframework/transaction/TransactionStatus.html" title="interface in org.springframework.transaction">TransactionStatus</A>&nbsp;status)
                  throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>This implementation of commit handles participating in existing
 transactions and programmatic rollback requests.
 Delegates to <code>isRollbackOnly</code>, <code>doCommit</code>
 and <code>rollback</code>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/transaction/PlatformTransactionManager.html#commit(org.springframework.transaction.TransactionStatus)">commit</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/transaction/PlatformTransactionManager.html" title="interface in org.springframework.transaction">PlatformTransactionManager</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>status</CODE> - object returned by the <code>getTransaction</code> method
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/UnexpectedRollbackException.html" title="class in org.springframework.transaction">UnexpectedRollbackException</A></CODE> - in case of an unexpected rollback
 that the transaction coordinator initiated
<DD><CODE><A HREF="../../../../org/springframework/transaction/HeuristicCompletionException.html" title="class in org.springframework.transaction">HeuristicCompletionException</A></CODE> - in case of a transaction failure
 caused by a heuristic decision on the side of the transaction coordinator
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionSystemException.html" title="class in org.springframework.transaction">TransactionSystemException</A></CODE> - in case of commit or system errors
 (typically caused by fundamental resource failures)
<DD><CODE><A HREF="../../../../org/springframework/transaction/IllegalTransactionStateException.html" title="class in org.springframework.transaction">IllegalTransactionStateException</A></CODE> - if the given transaction
 is already completed (that is, committed or rolled back)
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE><DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/TransactionStatus.html#isRollbackOnly()"><CODE>TransactionStatus.isRollbackOnly()</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doCommit(org.springframework.transaction.support.DefaultTransactionStatus)"><CODE>doCommit(org.springframework.transaction.support.DefaultTransactionStatus)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#rollback(org.springframework.transaction.TransactionStatus)"><CODE>rollback(org.springframework.transaction.TransactionStatus)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="rollback(org.springframework.transaction.TransactionStatus)"><!-- --></A><H3>
rollback</H3>
<PRE>
public final void <B>rollback</B>(<A HREF="../../../../org/springframework/transaction/TransactionStatus.html" title="interface in org.springframework.transaction">TransactionStatus</A>&nbsp;status)
                    throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>This implementation of rollback handles participating in existing
 transactions. Delegates to <code>doRollback</code> and
 <code>doSetRollbackOnly</code>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/transaction/PlatformTransactionManager.html#rollback(org.springframework.transaction.TransactionStatus)">rollback</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/transaction/PlatformTransactionManager.html" title="interface in org.springframework.transaction">PlatformTransactionManager</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>status</CODE> - object returned by the <code>getTransaction</code> method
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionSystemException.html" title="class in org.springframework.transaction">TransactionSystemException</A></CODE> - in case of rollback or system errors
 (typically caused by fundamental resource failures)
<DD><CODE><A HREF="../../../../org/springframework/transaction/IllegalTransactionStateException.html" title="class in org.springframework.transaction">IllegalTransactionStateException</A></CODE> - if the given transaction
 is already completed (that is, committed or rolled back)
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE><DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doRollback(org.springframework.transaction.support.DefaultTransactionStatus)"><CODE>doRollback(org.springframework.transaction.support.DefaultTransactionStatus)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doSetRollbackOnly(org.springframework.transaction.support.DefaultTransactionStatus)"><CODE>doSetRollbackOnly(org.springframework.transaction.support.DefaultTransactionStatus)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="triggerBeforeCommit(org.springframework.transaction.support.DefaultTransactionStatus)"><!-- --></A><H3>
triggerBeforeCommit</H3>
<PRE>
protected final void <B>triggerBeforeCommit</B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status)</PRE>
<DL>
<DD>Trigger <code>beforeCommit</code> callbacks.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>status</CODE> - object representing the transaction</DL>
</DD>
</DL>
<HR>

<A NAME="triggerBeforeCompletion(org.springframework.transaction.support.DefaultTransactionStatus)"><!-- --></A><H3>
triggerBeforeCompletion</H3>
<PRE>
protected final void <B>triggerBeforeCompletion</B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status)</PRE>
<DL>
<DD>Trigger <code>beforeCompletion</code> callbacks.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>status</CODE> - object representing the transaction</DL>
</DD>
</DL>
<HR>

<A NAME="invokeAfterCompletion(java.util.List, int)"><!-- --></A><H3>
invokeAfterCompletion</H3>
<PRE>
protected final void <B>invokeAfterCompletion</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../org/springframework/transaction/support/TransactionSynchronization.html" title="interface in org.springframework.transaction.support">TransactionSynchronization</A>&gt;&nbsp;synchronizations,
                                           int&nbsp;completionStatus)</PRE>
<DL>
<DD>Actually invoke the <code>afterCompletion</code> methods of the
 given Spring TransactionSynchronization objects.
 <p>To be called by this abstract manager itself, or by special implementations
 of the <code>registerAfterCompletionWithExistingTransaction</code> callback.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>synchronizations</CODE> - List of TransactionSynchronization objects<DD><CODE>completionStatus</CODE> - the completion status according to the
 constants in the TransactionSynchronization interface<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#registerAfterCompletionWithExistingTransaction(java.lang.Object, java.util.List)"><CODE>registerAfterCompletionWithExistingTransaction(Object, java.util.List)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/TransactionSynchronization.html#STATUS_COMMITTED"><CODE>TransactionSynchronization.STATUS_COMMITTED</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/TransactionSynchronization.html#STATUS_ROLLED_BACK"><CODE>TransactionSynchronization.STATUS_ROLLED_BACK</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/TransactionSynchronization.html#STATUS_UNKNOWN"><CODE>TransactionSynchronization.STATUS_UNKNOWN</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="doGetTransaction()"><!-- --></A><H3>
doGetTransaction</H3>
<PRE>
protected abstract <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>doGetTransaction</B>()
                                    throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>Return a transaction object for the current transaction state.
 <p>The returned object will usually be specific to the concrete transaction
 manager implementation, carrying corresponding transaction state in a
 modifiable fashion. This object will be passed into the other template
 methods (e.g. doBegin and doCommit), either directly or as part of a
 DefaultTransactionStatus instance.
 <p>The returned object should contain information about any existing
 transaction, that is, a transaction that has already started before the
 current <code>getTransaction</code> call on the transaction manager.
 Consequently, a <code>doGetTransaction</code> implementation will usually
 look for an existing transaction and store corresponding state in the
 returned transaction object.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the current transaction object
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/CannotCreateTransactionException.html" title="class in org.springframework.transaction">CannotCreateTransactionException</A></CODE> - if transaction support is not available
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE> - in case of lookup or system errors<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doBegin(java.lang.Object, org.springframework.transaction.TransactionDefinition)"><CODE>doBegin(java.lang.Object, org.springframework.transaction.TransactionDefinition)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doCommit(org.springframework.transaction.support.DefaultTransactionStatus)"><CODE>doCommit(org.springframework.transaction.support.DefaultTransactionStatus)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doRollback(org.springframework.transaction.support.DefaultTransactionStatus)"><CODE>doRollback(org.springframework.transaction.support.DefaultTransactionStatus)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html#getTransaction()"><CODE>DefaultTransactionStatus.getTransaction()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isExistingTransaction(java.lang.Object)"><!-- --></A><H3>
isExistingTransaction</H3>
<PRE>
protected boolean <B>isExistingTransaction</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction)
                                 throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>Check if the given transaction object indicates an existing transaction
 (that is, a transaction which has already started).
 <p>The result will be evaluated according to the specified propagation
 behavior for the new transaction. An existing transaction might get
 suspended (in case of PROPAGATION_REQUIRES_NEW), or the new transaction
 might participate in the existing one (in case of PROPAGATION_REQUIRED).
 <p>The default implementation returns <code>false</code>, assuming that
 participating in existing transactions is generally not supported.
 Subclasses are of course encouraged to provide such support.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>transaction</CODE> - transaction object returned by doGetTransaction
<DT><B>Returns:</B><DD>if there is an existing transaction
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE> - in case of system errors<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doGetTransaction()"><CODE>doGetTransaction()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="useSavepointForNestedTransaction()"><!-- --></A><H3>
useSavepointForNestedTransaction</H3>
<PRE>
protected boolean <B>useSavepointForNestedTransaction</B>()</PRE>
<DL>
<DD>Return whether to use a savepoint for a nested transaction.
 <p>Default is <code>true</code>, which causes delegation to DefaultTransactionStatus
 for creating and holding a savepoint. If the transaction object does not implement
 the SavepointManager interface, a NestedTransactionNotSupportedException will be
 thrown. Else, the SavepointManager will be asked to create a new savepoint to
 demarcate the start of the nested transaction.
 <p>Subclasses can override this to return <code>false</code>, causing a further
 call to <code>doBegin</code> - within the context of an already existing transaction.
 The <code>doBegin</code> implementation needs to handle this accordingly in such
 a scenario. This is appropriate for JTA, for example.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractTransactionStatus.html#createAndHoldSavepoint()"><CODE>AbstractTransactionStatus.createAndHoldSavepoint()</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractTransactionStatus.html#rollbackToHeldSavepoint()"><CODE>AbstractTransactionStatus.rollbackToHeldSavepoint()</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractTransactionStatus.html#releaseHeldSavepoint()"><CODE>AbstractTransactionStatus.releaseHeldSavepoint()</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doBegin(java.lang.Object, org.springframework.transaction.TransactionDefinition)"><CODE>doBegin(java.lang.Object, org.springframework.transaction.TransactionDefinition)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="doBegin(java.lang.Object, org.springframework.transaction.TransactionDefinition)"><!-- --></A><H3>
doBegin</H3>
<PRE>
protected abstract void <B>doBegin</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction,
                                <A HREF="../../../../org/springframework/transaction/TransactionDefinition.html" title="interface in org.springframework.transaction">TransactionDefinition</A>&nbsp;definition)
                         throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>Begin a new transaction with semantics according to the given transaction
 definition. Does not have to care about applying the propagation behavior,
 as this has already been handled by this abstract manager.
 <p>This method gets called when the transaction manager has decided to actually
 start a new transaction. Either there wasn't any transaction before, or the
 previous transaction has been suspended.
 <p>A special scenario is a nested transaction without savepoint: If
 <code>useSavepointForNestedTransaction()</code> returns "false", this method
 will be called to start a nested transaction when necessary. In such a context,
 there will be an active transaction: The implementation of this method has
 to detect this and start an appropriate nested transaction.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>transaction</CODE> - transaction object returned by <code>doGetTransaction</code><DD><CODE>definition</CODE> - TransactionDefinition instance, describing propagation
 behavior, isolation level, read-only flag, timeout, and transaction name
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE> - in case of creation or system errors</DL>
</DD>
</DL>
<HR>

<A NAME="doSuspend(java.lang.Object)"><!-- --></A><H3>
doSuspend</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>doSuspend</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction)
                    throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>Suspend the resources of the current transaction.
 Transaction synchronization will already have been suspended.
 <p>The default implementation throws a TransactionSuspensionNotSupportedException,
 assuming that transaction suspension is generally not supported.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>transaction</CODE> - transaction object returned by <code>doGetTransaction</code>
<DT><B>Returns:</B><DD>an object that holds suspended resources
 (will be kept unexamined for passing it into doResume)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionSuspensionNotSupportedException.html" title="class in org.springframework.transaction">TransactionSuspensionNotSupportedException</A></CODE> - if suspending is not supported by the transaction manager implementation
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE> - in case of system errors<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doResume(java.lang.Object, java.lang.Object)"><CODE>doResume(java.lang.Object, java.lang.Object)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="doResume(java.lang.Object, java.lang.Object)"><!-- --></A><H3>
doResume</H3>
<PRE>
protected void <B>doResume</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction,
                        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;suspendedResources)
                 throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>Resume the resources of the current transaction.
 Transaction synchronization will be resumed afterwards.
 <p>The default implementation throws a TransactionSuspensionNotSupportedException,
 assuming that transaction suspension is generally not supported.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>transaction</CODE> - transaction object returned by <code>doGetTransaction</code><DD><CODE>suspendedResources</CODE> - the object that holds suspended resources,
 as returned by doSuspend
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionSuspensionNotSupportedException.html" title="class in org.springframework.transaction">TransactionSuspensionNotSupportedException</A></CODE> - if resuming is not supported by the transaction manager implementation
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE> - in case of system errors<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doSuspend(java.lang.Object)"><CODE>doSuspend(java.lang.Object)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="shouldCommitOnGlobalRollbackOnly()"><!-- --></A><H3>
shouldCommitOnGlobalRollbackOnly</H3>
<PRE>
protected boolean <B>shouldCommitOnGlobalRollbackOnly</B>()</PRE>
<DL>
<DD>Return whether to call <code>doCommit</code> on a transaction that has been
 marked as rollback-only in a global fashion.
 <p>Does not apply if an application locally sets the transaction to rollback-only
 via the TransactionStatus, but only to the transaction itself being marked as
 rollback-only by the transaction coordinator.
 <p>Default is "false": Local transaction strategies usually don't hold the rollback-only
 marker in the transaction itself, therefore they can't handle rollback-only transactions
 as part of transaction commit. Hence, AbstractPlatformTransactionManager will trigger
 a rollback in that case, throwing an UnexpectedRollbackException afterwards.
 <p>Override this to return "true" if the concrete transaction manager expects a
 <code>doCommit</code> call even for a rollback-only transaction, allowing for
 special handling there. This will, for example, be the case for JTA, where
 <code>UserTransaction.commit</code> will check the read-only flag itself and
 throw a corresponding RollbackException, which might include the specific reason
 (such as a transaction timeout).
 <p>If this method returns "true" but the <code>doCommit</code> implementation does not
 throw an exception, this transaction manager will throw an UnexpectedRollbackException
 itself. This should not be the typical case; it is mainly checked to cover misbehaving
 JTA providers that silently roll back even when the rollback has not been requested
 by the calling code.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#doCommit(org.springframework.transaction.support.DefaultTransactionStatus)"><CODE>doCommit(org.springframework.transaction.support.DefaultTransactionStatus)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html#isGlobalRollbackOnly()"><CODE>DefaultTransactionStatus.isGlobalRollbackOnly()</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/AbstractTransactionStatus.html#isLocalRollbackOnly()"><CODE>AbstractTransactionStatus.isLocalRollbackOnly()</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/TransactionStatus.html#setRollbackOnly()"><CODE>TransactionStatus.setRollbackOnly()</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/UnexpectedRollbackException.html" title="class in org.springframework.transaction"><CODE>UnexpectedRollbackException</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/javax/transaction/UserTransaction.html?is-external=true#commit()" title="class or interface in javax.transaction"><CODE>UserTransaction.commit()</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/javax/transaction/RollbackException.html?is-external=true" title="class or interface in javax.transaction"><CODE>RollbackException</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="prepareForCommit(org.springframework.transaction.support.DefaultTransactionStatus)"><!-- --></A><H3>
prepareForCommit</H3>
<PRE>
protected void <B>prepareForCommit</B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status)</PRE>
<DL>
<DD>Make preparations for commit, to be performed before the
 <code>beforeCommit</code> synchronization callbacks occur.
 <p>Note that exceptions will get propagated to the commit caller
 and cause a rollback of the transaction.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>status</CODE> - the status representation of the transaction
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/RuntimeException.html?is-external=true" title="class or interface in java.lang">RuntimeException</A></CODE> - in case of errors; will be <b>propagated to the caller</b>
 (note: do not throw TransactionException subclasses here!)</DL>
</DD>
</DL>
<HR>

<A NAME="doCommit(org.springframework.transaction.support.DefaultTransactionStatus)"><!-- --></A><H3>
doCommit</H3>
<PRE>
protected abstract void <B>doCommit</B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status)
                          throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>Perform an actual commit of the given transaction.
 <p>An implementation does not need to check the "new transaction" flag
 or the rollback-only flag; this will already have been handled before.
 Usually, a straight commit will be performed on the transaction object
 contained in the passed-in status.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>status</CODE> - the status representation of the transaction
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE> - in case of commit or system errors<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html#getTransaction()"><CODE>DefaultTransactionStatus.getTransaction()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="doRollback(org.springframework.transaction.support.DefaultTransactionStatus)"><!-- --></A><H3>
doRollback</H3>
<PRE>
protected abstract void <B>doRollback</B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status)
                            throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>Perform an actual rollback of the given transaction.
 <p>An implementation does not need to check the "new transaction" flag;
 this will already have been handled before. Usually, a straight rollback
 will be performed on the transaction object contained in the passed-in status.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>status</CODE> - the status representation of the transaction
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE> - in case of system errors<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html#getTransaction()"><CODE>DefaultTransactionStatus.getTransaction()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="doSetRollbackOnly(org.springframework.transaction.support.DefaultTransactionStatus)"><!-- --></A><H3>
doSetRollbackOnly</H3>
<PRE>
protected void <B>doSetRollbackOnly</B>(<A HREF="../../../../org/springframework/transaction/support/DefaultTransactionStatus.html" title="class in org.springframework.transaction.support">DefaultTransactionStatus</A>&nbsp;status)
                          throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>Set the given transaction rollback-only. Only called on rollback
 if the current transaction participates in an existing one.
 <p>The default implementation throws an IllegalTransactionStateException,
 assuming that participating in existing transactions is generally not
 supported. Subclasses are of course encouraged to provide such support.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>status</CODE> - the status representation of the transaction
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE> - in case of system errors</DL>
</DD>
</DL>
<HR>

<A NAME="registerAfterCompletionWithExistingTransaction(java.lang.Object, java.util.List)"><!-- --></A><H3>
registerAfterCompletionWithExistingTransaction</H3>
<PRE>
protected void <B>registerAfterCompletionWithExistingTransaction</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction,
                                                              <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../org/springframework/transaction/support/TransactionSynchronization.html" title="interface in org.springframework.transaction.support">TransactionSynchronization</A>&gt;&nbsp;synchronizations)
                                                       throws <A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></PRE>
<DL>
<DD>Register the given list of transaction synchronizations with the existing transaction.
 <p>Invoked when the control of the Spring transaction manager and thus all Spring
 transaction synchronizations end, without the transaction being completed yet. This
 is for example the case when participating in an existing JTA or EJB CMT transaction.
 <p>The default implementation simply invokes the <code>afterCompletion</code> methods
 immediately, passing in "STATUS_UNKNOWN". This is the best we can do if there's no
 chance to determine the actual outcome of the outer transaction.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>transaction</CODE> - transaction object returned by <code>doGetTransaction</code><DD><CODE>synchronizations</CODE> - List of TransactionSynchronization objects
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/transaction/TransactionException.html" title="class in org.springframework.transaction">TransactionException</A></CODE> - in case of system errors<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.html#invokeAfterCompletion(java.util.List, int)"><CODE>invokeAfterCompletion(java.util.List, int)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/TransactionSynchronization.html#afterCompletion(int)"><CODE>TransactionSynchronization.afterCompletion(int)</CODE></A>, 
<A HREF="../../../../org/springframework/transaction/support/TransactionSynchronization.html#STATUS_UNKNOWN"><CODE>TransactionSynchronization.STATUS_UNKNOWN</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="doCleanupAfterCompletion(java.lang.Object)"><!-- --></A><H3>
doCleanupAfterCompletion</H3>
<PRE>
protected void <B>doCleanupAfterCompletion</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;transaction)</PRE>
<DL>
<DD>Cleanup resources after transaction completion.
 <p>Called after <code>doCommit</code> and <code>doRollback</code> execution,
 on any outcome. The default implementation does nothing.
 <p>Should not throw any exceptions but just issue warnings on errors.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>transaction</CODE> - transaction object returned by <code>doGetTransaction</code></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../../../../org/springframework/transaction/support/AbstractPlatformTransactionManager.SuspendedResourcesHolder.html" title="class in org.springframework.transaction.support"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/transaction/support/AbstractPlatformTransactionManager.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="AbstractPlatformTransactionManager.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
