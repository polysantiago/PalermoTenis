<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:22:39 BST 2010 -->
<TITLE>
BeanFactory
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="BeanFactory";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/springframework/beans/factory/BeanExpressionException.html" title="class in org.springframework.beans.factory"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/springframework/beans/factory/BeanFactoryAware.html" title="interface in org.springframework.beans.factory"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/beans/factory/BeanFactory.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="BeanFactory.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.beans.factory</FONT>
<BR>
Interface BeanFactory</H2>
<DL>
<DT><B>All Known Subinterfaces:</B> <DD><A HREF="../../../../org/springframework/context/ApplicationContext.html" title="interface in org.springframework.context">ApplicationContext</A>, <A HREF="../../../../org/springframework/beans/factory/config/AutowireCapableBeanFactory.html" title="interface in org.springframework.beans.factory.config">AutowireCapableBeanFactory</A>, <A HREF="../../../../org/springframework/context/ConfigurableApplicationContext.html" title="interface in org.springframework.context">ConfigurableApplicationContext</A>, <A HREF="../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A>, <A HREF="../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A>, <A HREF="../../../../org/springframework/web/portlet/context/ConfigurablePortletApplicationContext.html" title="interface in org.springframework.web.portlet.context">ConfigurablePortletApplicationContext</A>, <A HREF="../../../../org/springframework/web/context/ConfigurableWebApplicationContext.html" title="interface in org.springframework.web.context">ConfigurableWebApplicationContext</A>, <A HREF="../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html" title="interface in org.springframework.beans.factory">HierarchicalBeanFactory</A>, <A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory">ListableBeanFactory</A>, <A HREF="../../../../org/springframework/web/context/WebApplicationContext.html" title="interface in org.springframework.web.context">WebApplicationContext</A></DD>
</DL>
<DL>
<DT><B>All Known Implementing Classes:</B> <DD><A HREF="../../../../org/springframework/context/support/AbstractApplicationContext.html" title="class in org.springframework.context.support">AbstractApplicationContext</A>, <A HREF="../../../../org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.html" title="class in org.springframework.beans.factory.support">AbstractAutowireCapableBeanFactory</A>, <A HREF="../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html" title="class in org.springframework.beans.factory.support">AbstractBeanFactory</A>, <A HREF="../../../../org/springframework/context/support/AbstractRefreshableApplicationContext.html" title="class in org.springframework.context.support">AbstractRefreshableApplicationContext</A>, <A HREF="../../../../org/springframework/context/support/AbstractRefreshableConfigApplicationContext.html" title="class in org.springframework.context.support">AbstractRefreshableConfigApplicationContext</A>, <A HREF="../../../../org/springframework/web/portlet/context/AbstractRefreshablePortletApplicationContext.html" title="class in org.springframework.web.portlet.context">AbstractRefreshablePortletApplicationContext</A>, <A HREF="../../../../org/springframework/web/context/support/AbstractRefreshableWebApplicationContext.html" title="class in org.springframework.web.context.support">AbstractRefreshableWebApplicationContext</A>, <A HREF="../../../../org/springframework/context/support/AbstractXmlApplicationContext.html" title="class in org.springframework.context.support">AbstractXmlApplicationContext</A>, <A HREF="../../../../org/springframework/context/annotation/AnnotationConfigApplicationContext.html" title="class in org.springframework.context.annotation">AnnotationConfigApplicationContext</A>, <A HREF="../../../../org/springframework/web/context/support/AnnotationConfigWebApplicationContext.html" title="class in org.springframework.web.context.support">AnnotationConfigWebApplicationContext</A>, <A HREF="../../../../org/springframework/context/support/ClassPathXmlApplicationContext.html" title="class in org.springframework.context.support">ClassPathXmlApplicationContext</A>, <A HREF="../../../../org/springframework/beans/factory/support/DefaultListableBeanFactory.html" title="class in org.springframework.beans.factory.support">DefaultListableBeanFactory</A>, <A HREF="../../../../org/springframework/context/support/FileSystemXmlApplicationContext.html" title="class in org.springframework.context.support">FileSystemXmlApplicationContext</A>, <A HREF="../../../../org/springframework/context/support/GenericApplicationContext.html" title="class in org.springframework.context.support">GenericApplicationContext</A>, <A HREF="../../../../org/springframework/web/context/support/GenericWebApplicationContext.html" title="class in org.springframework.web.context.support">GenericWebApplicationContext</A>, <A HREF="../../../../org/springframework/context/support/GenericXmlApplicationContext.html" title="class in org.springframework.context.support">GenericXmlApplicationContext</A>, <A HREF="../../../../org/springframework/jca/context/ResourceAdapterApplicationContext.html" title="class in org.springframework.jca.context">ResourceAdapterApplicationContext</A>, <A HREF="../../../../org/springframework/jndi/support/SimpleJndiBeanFactory.html" title="class in org.springframework.jndi.support">SimpleJndiBeanFactory</A>, <A HREF="../../../../org/springframework/context/support/StaticApplicationContext.html" title="class in org.springframework.context.support">StaticApplicationContext</A>, <A HREF="../../../../org/springframework/beans/factory/support/StaticListableBeanFactory.html" title="class in org.springframework.beans.factory.support">StaticListableBeanFactory</A>, <A HREF="../../../../org/springframework/web/portlet/context/StaticPortletApplicationContext.html" title="class in org.springframework.web.portlet.context">StaticPortletApplicationContext</A>, <A HREF="../../../../org/springframework/web/context/support/StaticWebApplicationContext.html" title="class in org.springframework.web.context.support">StaticWebApplicationContext</A>, <A HREF="../../../../org/springframework/beans/factory/xml/XmlBeanFactory.html" title="class in org.springframework.beans.factory.xml">XmlBeanFactory</A>, <A HREF="../../../../org/springframework/web/portlet/context/XmlPortletApplicationContext.html" title="class in org.springframework.web.portlet.context">XmlPortletApplicationContext</A>, <A HREF="../../../../org/springframework/web/context/support/XmlWebApplicationContext.html" title="class in org.springframework.web.context.support">XmlWebApplicationContext</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public interface <B>BeanFactory</B></DL>
</PRE>

<P>
The root interface for accessing a Spring bean container.
 This is the basic client view of a bean container;
 further interfaces such as <A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>ListableBeanFactory</CODE></A> and
 <A HREF="../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config"><CODE>ConfigurableBeanFactory</CODE></A>
 are available for specific purposes.

 <p>This interface is implemented by objects that hold a number of bean definitions,
 each uniquely identified by a String name. Depending on the bean definition,
 the factory will return either an independent instance of a contained object
 (the Prototype design pattern), or a single shared instance (a superior
 alternative to the Singleton design pattern, in which the instance is a
 singleton in the scope of the factory). Which type of instance will be returned
 depends on the bean factory configuration: the API is the same. Since Spring
 2.0, further scopes are available depending on the concrete application
 context (e.g. "request" and "session" scopes in a web environment).

 <p>The point of this approach is that the BeanFactory is a central registry
 of application components, and centralizes configuration of application
 components (no more do individual objects need to read properties files,
 for example). See chapters 4 and 11 of "Expert One-on-One J2EE Design and
 Development" for a discussion of the benefits of this approach.

 <p>Note that it is generally better to rely on Dependency Injection
 ("push" configuration) to configure application objects through setters
 or constructors, rather than use any form of "pull" configuration like a
 BeanFactory lookup. Spring's Dependency Injection functionality is
 implemented using this BeanFactory interface and its subinterfaces.

 <p>Normally a BeanFactory will load bean definitions stored in a configuration
 source (such as an XML document), and use the <code>org.springframework.beans</code>
 package to configure the beans. However, an implementation could simply return
 Java objects it creates as necessary directly in Java code. There are no
 constraints on how the definitions could be stored: LDAP, RDBMS, XML,
 properties file, etc. Implementations are encouraged to support references
 amongst beans (Dependency Injection).

 <p>In contrast to the methods in <A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>ListableBeanFactory</CODE></A>, all of the
 operations in this interface will also check parent factories if this is a
 <A HREF="../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>HierarchicalBeanFactory</CODE></A>. If a bean is not found in this factory instance,
 the immediate parent factory will be asked. Beans in this factory instance
 are supposed to override beans of the same name in any parent factory.

 <p>Bean factory implementations should support the standard bean lifecycle interfaces
 as far as possible. The full set of initialization methods and their standard order is:<br>
 1. BeanNameAware's <code>setBeanName</code><br>
 2. BeanClassLoaderAware's <code>setBeanClassLoader</code><br>
 3. BeanFactoryAware's <code>setBeanFactory</code><br>
 4. ResourceLoaderAware's <code>setResourceLoader</code>
 (only applicable when running in an application context)<br>
 5. ApplicationEventPublisherAware's <code>setApplicationEventPublisher</code>
 (only applicable when running in an application context)<br>
 6. MessageSourceAware's <code>setMessageSource</code>
 (only applicable when running in an application context)<br>
 7. ApplicationContextAware's <code>setApplicationContext</code>
 (only applicable when running in an application context)<br>
 8. ServletContextAware's <code>setServletContext</code>
 (only applicable when running in a web application context)<br>
 9. <code>postProcessBeforeInitialization</code> methods of BeanPostProcessors<br>
 10. InitializingBean's <code>afterPropertiesSet</code><br>
 11. a custom init-method definition<br>
 12. <code>postProcessAfterInitialization</code> methods of BeanPostProcessors

 <p>On shutdown of a bean factory, the following lifecycle methods apply:<br>
 1. DisposableBean's <code>destroy</code><br>
 2. a custom destroy-method definition
<P>

<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>13 April 2001</DD>
<DT><B>Author:</B></DT>
  <DD>Rod Johnson, Juergen Hoeller</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/BeanNameAware.html#setBeanName(java.lang.String)"><CODE>BeanNameAware.setBeanName(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanClassLoaderAware.html#setBeanClassLoader(java.lang.ClassLoader)"><CODE>BeanClassLoaderAware.setBeanClassLoader(java.lang.ClassLoader)</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanFactoryAware.html#setBeanFactory(org.springframework.beans.factory.BeanFactory)"><CODE>BeanFactoryAware.setBeanFactory(org.springframework.beans.factory.BeanFactory)</CODE></A>, 
<A HREF="../../../../org/springframework/context/ResourceLoaderAware.html#setResourceLoader(org.springframework.core.io.ResourceLoader)"><CODE>ResourceLoaderAware.setResourceLoader(org.springframework.core.io.ResourceLoader)</CODE></A>, 
<A HREF="../../../../org/springframework/context/ApplicationEventPublisherAware.html#setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)"><CODE>ApplicationEventPublisherAware.setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)</CODE></A>, 
<A HREF="../../../../org/springframework/context/MessageSourceAware.html#setMessageSource(org.springframework.context.MessageSource)"><CODE>MessageSourceAware.setMessageSource(org.springframework.context.MessageSource)</CODE></A>, 
<A HREF="../../../../org/springframework/context/ApplicationContextAware.html#setApplicationContext(org.springframework.context.ApplicationContext)"><CODE>ApplicationContextAware.setApplicationContext(org.springframework.context.ApplicationContext)</CODE></A>, 
<A HREF="../../../../org/springframework/web/context/ServletContextAware.html#setServletContext(javax.servlet.ServletContext)"><CODE>ServletContextAware.setServletContext(javax.servlet.ServletContext)</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/config/BeanPostProcessor.html#postProcessBeforeInitialization(java.lang.Object, java.lang.String)"><CODE>BeanPostProcessor.postProcessBeforeInitialization(java.lang.Object, java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/InitializingBean.html#afterPropertiesSet()"><CODE>InitializingBean.afterPropertiesSet()</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/support/AbstractBeanDefinition.html#getInitMethodName()"><CODE>AbstractBeanDefinition.getInitMethodName()</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/config/BeanPostProcessor.html#postProcessAfterInitialization(java.lang.Object, java.lang.String)"><CODE>BeanPostProcessor.postProcessAfterInitialization(java.lang.Object, java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/DisposableBean.html#destroy()"><CODE>DisposableBean.destroy()</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/support/AbstractBeanDefinition.html#getDestroyMethodName()"><CODE>AbstractBeanDefinition.getDestroyMethodName()</CODE></A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#FACTORY_BEAN_PREFIX">FACTORY_BEAN_PREFIX</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to dereference a <A HREF="../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory"><CODE>FactoryBean</CODE></A> instance and distinguish it from
 beans <i>created</i> by the FactoryBean.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#containsBean(java.lang.String)">containsBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Does this bean factory contain a bean with the given name? More specifically,
 is <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A> able to obtain a bean instance for the given name?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getAliases(java.lang.String)">getAliases</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the aliases for the given bean name, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.Class)">getBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the bean instance that uniquely matches the given object type, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)">getBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an instance, which may be shared or independent, of the specified bean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String, java.lang.Class)">getBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an instance, which may be shared or independent, of the specified bean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String, java.lang.Object...)">getBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an instance, which may be shared or independent, of the specified bean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;?&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getType(java.lang.String)">getType</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine the type of the bean with the given name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isPrototype(java.lang.String)">isPrototype</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Is this bean a prototype? That is, will <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A> always return
 independent instances?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isSingleton(java.lang.String)">isSingleton</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Is this bean a shared singleton? That is, will <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A> always
 return the same instance?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isTypeMatch(java.lang.String, java.lang.Class)">isTypeMatch</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;targetType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check whether the bean with the given name matches the specified type.</TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="FACTORY_BEAN_PREFIX"><!-- --></A><H3>
FACTORY_BEAN_PREFIX</H3>
<PRE>
static final <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>FACTORY_BEAN_PREFIX</B></PRE>
<DL>
<DD>Used to dereference a <A HREF="../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory"><CODE>FactoryBean</CODE></A> instance and distinguish it from
 beans <i>created</i> by the FactoryBean. For example, if the bean named
 <code>myJndiObject</code> is a FactoryBean, getting <code>&myJndiObject</code>
 will return the factory, not the instance returned by the factory.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#org.springframework.beans.factory.BeanFactory.FACTORY_BEAN_PREFIX">Constant Field Values</A></DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getBean(java.lang.String)"><!-- --></A><H3>
getBean</H3>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>getBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
               throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD>Return an instance, which may be shared or independent, of the specified bean.
 <p>This method allows a Spring BeanFactory to be used as a replacement for the
 Singleton or Prototype design pattern. Callers may retain references to
 returned objects in the case of Singleton beans.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to retrieve
<DT><B>Returns:</B><DD>an instance of the bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean definition
 with the specified name
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if the bean could not be obtained</DL>
</DD>
</DL>
<HR>

<A NAME="getBean(java.lang.String, java.lang.Class)"><!-- --></A><H3>
getBean</H3>
<PRE>
&lt;T&gt; T <B>getBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
              <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)
          throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD>Return an instance, which may be shared or independent, of the specified bean.
 <p>Behaves the same as <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(String)</CODE></A>, but provides a measure of type
 safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the
 required type. This means that ClassCastException can't be thrown on casting
 the result correctly, as can happen with <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(String)</CODE></A>.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to retrieve<DD><CODE>requiredType</CODE> - type the bean must match. Can be an interface or superclass
 of the actual class, or <code>null</code> for any match. For example, if the value
 is <code>Object.class</code>, this method will succeed whatever the class of the
 returned instance.
<DT><B>Returns:</B><DD>an instance of the bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there's no such bean definition
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanNotOfRequiredTypeException.html" title="class in org.springframework.beans.factory">BeanNotOfRequiredTypeException</A></CODE> - if the bean is not of the required type
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if the bean could not be created</DL>
</DD>
</DL>
<HR>

<A NAME="getBean(java.lang.Class)"><!-- --></A><H3>
getBean</H3>
<PRE>
&lt;T&gt; T <B>getBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)
          throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD>Return the bean instance that uniquely matches the given object type, if any.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>requiredType</CODE> - type the bean must match; can be an interface or superclass.
 null is disallowed.
 <p>This method goes into <A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>ListableBeanFactory</CODE></A> by-type lookup territory
 but may also be translated into a conventional by-name lookup based on the name
 of the given type. For more extensive retrieval operations across sets of beans,
 use <A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>ListableBeanFactory</CODE></A> and/or <A HREF="../../../../org/springframework/beans/factory/BeanFactoryUtils.html" title="class in org.springframework.beans.factory"><CODE>BeanFactoryUtils</CODE></A>.
<DT><B>Returns:</B><DD>an instance of the single bean matching the required type
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is not exactly one matching bean found
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE><DT><B>Since:</B></DT>
  <DD>3.0</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>ListableBeanFactory</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getBean(java.lang.String, java.lang.Object...)"><!-- --></A><H3>
getBean</H3>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>getBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
               throws <A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD>Return an instance, which may be shared or independent, of the specified bean.
 <p>Allows for specifying explicit constructor arguments / factory method arguments,
 overriding the specified default arguments (if any) in the bean definition.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to retrieve<DD><CODE>args</CODE> - arguments to use if creating a prototype using explicit arguments to a
 static factory method. It is invalid to use a non-null args value in any other case.
<DT><B>Returns:</B><DD>an instance of the bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there's no such bean definition
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/BeanDefinitionStoreException.html" title="class in org.springframework.beans.factory">BeanDefinitionStoreException</A></CODE> - if arguments have been given but
 the affected bean isn't a prototype
<DD><CODE><A HREF="../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if the bean could not be created<DT><B>Since:</B></DT>
  <DD>2.5</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="containsBean(java.lang.String)"><!-- --></A><H3>
containsBean</H3>
<PRE>
boolean <B>containsBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
<DL>
<DD>Does this bean factory contain a bean with the given name? More specifically,
 is <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A> able to obtain a bean instance for the given name?
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>whether a bean with the given name is defined</DL>
</DD>
</DL>
<HR>

<A NAME="isSingleton(java.lang.String)"><!-- --></A><H3>
isSingleton</H3>
<PRE>
boolean <B>isSingleton</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
                    throws <A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD>Is this bean a shared singleton? That is, will <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A> always
 return the same instance?
 <p>Note: This method returning <code>false</code> does not clearly indicate
 independent instances. It indicates non-singleton instances, which may correspond
 to a scoped bean as well. Use the <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isPrototype(java.lang.String)"><CODE>isPrototype(java.lang.String)</CODE></A> operation to explicitly
 check for independent instances.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>whether this bean corresponds to a singleton instance
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isPrototype(java.lang.String)"><CODE>isPrototype(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isPrototype(java.lang.String)"><!-- --></A><H3>
isPrototype</H3>
<PRE>
boolean <B>isPrototype</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
                    throws <A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD>Is this bean a prototype? That is, will <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A> always return
 independent instances?
 <p>Note: This method returning <code>false</code> does not clearly indicate
 a singleton object. It indicates non-independent instances, which may correspond
 to a scoped bean as well. Use the <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isSingleton(java.lang.String)"><CODE>isSingleton(java.lang.String)</CODE></A> operation to explicitly
 check for a shared singleton instance.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>whether this bean will always deliver independent instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name<DT><B>Since:</B></DT>
  <DD>2.0.3</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isSingleton(java.lang.String)"><CODE>isSingleton(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isTypeMatch(java.lang.String, java.lang.Class)"><!-- --></A><H3>
isTypeMatch</H3>
<PRE>
boolean <B>isTypeMatch</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
                    <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;targetType)
                    throws <A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD>Check whether the bean with the given name matches the specified type.
 More specifically, check whether a <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A> call for the given name
 would return an object that is assignable to the specified target type.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query<DD><CODE>targetType</CODE> - the type to match against
<DT><B>Returns:</B><DD><code>true</code> if the bean type matches,
 <code>false</code> if it doesn't match or cannot be determined yet
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name<DT><B>Since:</B></DT>
  <DD>2.0.1</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getType(java.lang.String)"><CODE>getType(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getType(java.lang.String)"><!-- --></A><H3>
getType</H3>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;?&gt; <B>getType</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
                 throws <A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD>Determine the type of the bean with the given name. More specifically,
 determine the type of object that <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A> would return for the given name.
 <p>For a <A HREF="../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory"><CODE>FactoryBean</CODE></A>, return the type of object that the FactoryBean creates,
 as exposed by <A HREF="../../../../org/springframework/beans/factory/FactoryBean.html#getObjectType()"><CODE>FactoryBean.getObjectType()</CODE></A>.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>the type of the bean, or <code>null</code> if not determinable
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name<DT><B>Since:</B></DT>
  <DD>1.1.2</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A>, 
<A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#isTypeMatch(java.lang.String, java.lang.Class)"><CODE>isTypeMatch(java.lang.String, java.lang.Class)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getAliases(java.lang.String)"><!-- --></A><H3>
getAliases</H3>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getAliases</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
<DL>
<DD>Return the aliases for the given bean name, if any.
 All of those aliases point to the same bean when used in a <A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A> call.
 <p>If the given name is an alias, the corresponding original bean name
 and other aliases (if any) will be returned, with the original bean name
 being the first element in the array.
 <p>Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the bean name to check for aliases
<DT><B>Returns:</B><DD>the aliases, or an empty array if none<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/springframework/beans/factory/BeanExpressionException.html" title="class in org.springframework.beans.factory"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/springframework/beans/factory/BeanFactoryAware.html" title="interface in org.springframework.beans.factory"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/beans/factory/BeanFactory.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="BeanFactory.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
