<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:22:43 BST 2010 -->
<TITLE>
ConfigurableBeanFactory
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="ConfigurableBeanFactory";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../../org/springframework/beans/factory/config/CommonsLogFactoryBean.html" title="class in org.springframework.beans.factory.config"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../../index.html?org/springframework/beans/factory/config/ConfigurableBeanFactory.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="ConfigurableBeanFactory.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.beans.factory.config</FONT>
<BR>
Interface ConfigurableBeanFactory</H2>
<DL>
<DT><B>All Superinterfaces:</B> <DD><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A>, <A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html" title="interface in org.springframework.beans.factory">HierarchicalBeanFactory</A>, <A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html" title="interface in org.springframework.beans.factory.config">SingletonBeanRegistry</A></DD>
</DL>
<DL>
<DT><B>All Known Subinterfaces:</B> <DD><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableListableBeanFactory</A></DD>
</DL>
<DL>
<DT><B>All Known Implementing Classes:</B> <DD><A HREF="../../../../../org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.html" title="class in org.springframework.beans.factory.support">AbstractAutowireCapableBeanFactory</A>, <A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html" title="class in org.springframework.beans.factory.support">AbstractBeanFactory</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultListableBeanFactory.html" title="class in org.springframework.beans.factory.support">DefaultListableBeanFactory</A>, <A HREF="../../../../../org/springframework/beans/factory/xml/XmlBeanFactory.html" title="class in org.springframework.beans.factory.xml">XmlBeanFactory</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public interface <B>ConfigurableBeanFactory</B><DT>extends <A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html" title="interface in org.springframework.beans.factory">HierarchicalBeanFactory</A>, <A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html" title="interface in org.springframework.beans.factory.config">SingletonBeanRegistry</A></DL>
</PRE>

<P>
Configuration interface to be implemented by most bean factories. Provides
 facilities to configure a bean factory, in addition to the bean factory
 client methods in the <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>BeanFactory</CODE></A>
 interface.

 <p>This bean factory interface is not meant to be used in normal application
 code: Stick to <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>BeanFactory</CODE></A> or
 <A HREF="../../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>ListableBeanFactory</CODE></A> for typical
 needs. This extended interface is just meant to allow for framework-internal
 plug'n'play and for special access to bean factory configuration methods.
<P>

<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>03.11.2003</DD>
<DT><B>Author:</B></DT>
  <DD>Juergen Hoeller</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>BeanFactory</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/ListableBeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>ListableBeanFactory</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config"><CODE>ConfigurableListableBeanFactory</CODE></A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#SCOPE_PROTOTYPE">SCOPE_PROTOTYPE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scope identifier for the standard prototype scope: "prototype".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#SCOPE_SINGLETON">SCOPE_SINGLETON</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scope identifier for the standard singleton scope: "singleton".</TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.beans.factory.BeanFactory"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface org.springframework.beans.factory.<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#FACTORY_BEAN_PREFIX">FACTORY_BEAN_PREFIX</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)">addBeanPostProcessor</A></B>(<A HREF="../../../../../org/springframework/beans/factory/config/BeanPostProcessor.html" title="interface in org.springframework.beans.factory.config">BeanPostProcessor</A>&nbsp;beanPostProcessor)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add a new BeanPostProcessor that will get applied to beans created
 by this factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addEmbeddedValueResolver(org.springframework.util.StringValueResolver)">addEmbeddedValueResolver</A></B>(<A HREF="../../../../../org/springframework/util/StringValueResolver.html" title="interface in org.springframework.util">StringValueResolver</A>&nbsp;valueResolver)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add a String resolver for embedded values such as annotation attributes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)">addPropertyEditorRegistrar</A></B>(<A HREF="../../../../../org/springframework/beans/PropertyEditorRegistrar.html" title="interface in org.springframework.beans">PropertyEditorRegistrar</A>&nbsp;registrar)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add a PropertyEditorRegistrar to be applied to all bean creation processes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)">copyConfigurationFrom</A></B>(<A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A>&nbsp;otherFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copy all relevant configuration from the given other factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#copyRegisteredEditorsTo(org.springframework.beans.PropertyEditorRegistry)">copyRegisteredEditorsTo</A></B>(<A HREF="../../../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A>&nbsp;registry)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize the given PropertyEditorRegistry with the custom editors
 that have been registered with this BeanFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#destroyBean(java.lang.String, java.lang.Object)">destroyBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;beanInstance)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Destroy the given bean instance (usually a prototype instance
 obtained from this factory) according to its bean definition.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#destroyScopedBean(java.lang.String)">destroyScopedBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Destroy the specified scoped bean in the current target scope, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#destroySingletons()">destroySingletons</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Destroy all singleton beans in this factory, including inner beans that have
 been registered as disposable.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/security/AccessControlContext.html?is-external=true" title="class or interface in java.security">AccessControlContext</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getAccessControlContext()">getAccessControlContext</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provides a security access control context relevant to this factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getBeanClassLoader()">getBeanClassLoader</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return this factory's class loader for loading bean classes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/beans/factory/config/BeanExpressionResolver.html" title="interface in org.springframework.beans.factory.config">BeanExpressionResolver</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getBeanExpressionResolver()">getBeanExpressionResolver</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the resolution strategy for expressions in bean definition values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getBeanPostProcessorCount()">getBeanPostProcessorCount</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the current number of registered BeanPostProcessors, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/core/convert/ConversionService.html" title="interface in org.springframework.core.convert">ConversionService</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getConversionService()">getConversionService</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the associated ConversionService, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getDependenciesForBean(java.lang.String)">getDependenciesForBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the names of all beans that the specified bean depends on, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getDependentBeans(java.lang.String)">getDependentBeans</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the names of all beans which depend on the specified bean, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getMergedBeanDefinition(java.lang.String)">getMergedBeanDefinition</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a merged BeanDefinition for the given bean name,
 merging a child bean definition with its parent if necessary.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/beans/factory/config/Scope.html" title="interface in org.springframework.beans.factory.config">Scope</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getRegisteredScope(java.lang.String)">getRegisteredScope</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;scopeName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the Scope implementation for the given scope name, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getRegisteredScopeNames()">getRegisteredScopeNames</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the names of all currently registered scopes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getTempClassLoader()">getTempClassLoader</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the temporary ClassLoader to use for type matching purposes,
 if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getTypeConverter()">getTypeConverter</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Obtain a type converter as used by this BeanFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#isCacheBeanMetadata()">isCacheBeanMetadata</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether to cache bean metadata such as given bean definitions
 (in merged fashion) and resolved bean classes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#isCurrentlyInCreation(java.lang.String)">isCurrentlyInCreation</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether the specified bean is currently in creation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#isFactoryBean(java.lang.String)">isFactoryBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether the bean with the given name is a FactoryBean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerAlias(java.lang.String, java.lang.String)">registerAlias</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
              <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;alias)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given a bean name, create an alias.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerCustomEditor(java.lang.Class, java.lang.Class)">registerCustomEditor</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;requiredType,
                     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;? extends <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans">PropertyEditor</A>&gt;&nbsp;propertyEditorClass)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register the given custom property editor for all properties of the
 given type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerDependentBean(java.lang.String, java.lang.String)">registerDependentBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;dependentBeanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register a dependent bean for the given bean,
 to be destroyed before the given bean is destroyed.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)">registerScope</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;scopeName,
              <A HREF="../../../../../org/springframework/beans/factory/config/Scope.html" title="interface in org.springframework.beans.factory.config">Scope</A>&nbsp;scope)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register the given scope, backed by the given Scope implementation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#resolveAliases(org.springframework.util.StringValueResolver)">resolveAliases</A></B>(<A HREF="../../../../../org/springframework/util/StringValueResolver.html" title="interface in org.springframework.util">StringValueResolver</A>&nbsp;valueResolver)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resolve all alias target names and aliases registered in this
 factory, applying the given StringValueResolver to them.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#resolveEmbeddedValue(java.lang.String)">resolveEmbeddedValue</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resolve the given embedded value, e.g.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setBeanClassLoader(java.lang.ClassLoader)">setBeanClassLoader</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A>&nbsp;beanClassLoader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the class loader to use for loading bean classes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver)">setBeanExpressionResolver</A></B>(<A HREF="../../../../../org/springframework/beans/factory/config/BeanExpressionResolver.html" title="interface in org.springframework.beans.factory.config">BeanExpressionResolver</A>&nbsp;resolver)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify the resolution strategy for expressions in bean definition values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setCacheBeanMetadata(boolean)">setCacheBeanMetadata</A></B>(boolean&nbsp;cacheBeanMetadata)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether to cache bean metadata such as given bean definitions
 (in merged fashion) and resolved bean classes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setConversionService(org.springframework.core.convert.ConversionService)">setConversionService</A></B>(<A HREF="../../../../../org/springframework/core/convert/ConversionService.html" title="interface in org.springframework.core.convert">ConversionService</A>&nbsp;conversionService)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify a Spring 3.0 ConversionService to use for converting
 property values, as an alternative to JavaBeans PropertyEditors.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setParentBeanFactory(org.springframework.beans.factory.BeanFactory)">setParentBeanFactory</A></B>(<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A>&nbsp;parentBeanFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the parent of this bean factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setTempClassLoader(java.lang.ClassLoader)">setTempClassLoader</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A>&nbsp;tempClassLoader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify a temporary ClassLoader to use for type matching purposes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setTypeConverter(org.springframework.beans.TypeConverter)">setTypeConverter</A></B>(<A HREF="../../../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A>&nbsp;typeConverter)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set a custom type converter that this BeanFactory should use for converting
 bean property values, constructor argument values, etc.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.factory.HierarchicalBeanFactory"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from interface org.springframework.beans.factory.<A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html" title="interface in org.springframework.beans.factory">HierarchicalBeanFactory</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html#containsLocalBean(java.lang.String)">containsLocalBean</A>, <A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html#getParentBeanFactory()">getParentBeanFactory</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.factory.BeanFactory"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from interface org.springframework.beans.factory.<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#containsBean(java.lang.String)">containsBean</A>, <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getAliases(java.lang.String)">getAliases</A>, <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.Class)">getBean</A>, <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)">getBean</A>, <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String, java.lang.Class)">getBean</A>, <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String, java.lang.Object...)">getBean</A>, <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getType(java.lang.String)">getType</A>, <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isPrototype(java.lang.String)">isPrototype</A>, <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isSingleton(java.lang.String)">isSingleton</A>, <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isTypeMatch(java.lang.String, java.lang.Class)">isTypeMatch</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.factory.config.SingletonBeanRegistry"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from interface org.springframework.beans.factory.config.<A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html" title="interface in org.springframework.beans.factory.config">SingletonBeanRegistry</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html#containsSingleton(java.lang.String)">containsSingleton</A>, <A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html#getSingleton(java.lang.String)">getSingleton</A>, <A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html#getSingletonCount()">getSingletonCount</A>, <A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html#getSingletonNames()">getSingletonNames</A>, <A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html#registerSingleton(java.lang.String, java.lang.Object)">registerSingleton</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="SCOPE_SINGLETON"><!-- --></A><H3>
SCOPE_SINGLETON</H3>
<PRE>
static final <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>SCOPE_SINGLETON</B></PRE>
<DL>
<DD>Scope identifier for the standard singleton scope: "singleton".
 Custom scopes can be added via <code>registerScope</code>.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)"><CODE>registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)</CODE></A>, 
<A HREF="../../../../../constant-values.html#org.springframework.beans.factory.config.ConfigurableBeanFactory.SCOPE_SINGLETON">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="SCOPE_PROTOTYPE"><!-- --></A><H3>
SCOPE_PROTOTYPE</H3>
<PRE>
static final <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>SCOPE_PROTOTYPE</B></PRE>
<DL>
<DD>Scope identifier for the standard prototype scope: "prototype".
 Custom scopes can be added via <code>registerScope</code>.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)"><CODE>registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)</CODE></A>, 
<A HREF="../../../../../constant-values.html#org.springframework.beans.factory.config.ConfigurableBeanFactory.SCOPE_PROTOTYPE">Constant Field Values</A></DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="setParentBeanFactory(org.springframework.beans.factory.BeanFactory)"><!-- --></A><H3>
setParentBeanFactory</H3>
<PRE>
void <B>setParentBeanFactory</B>(<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A>&nbsp;parentBeanFactory)
                          throws <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></PRE>
<DL>
<DD>Set the parent of this bean factory.
 <p>Note that the parent cannot be changed: It should only be set outside
 a constructor if it isn't available at the time of factory instantiation.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>parentBeanFactory</CODE> - the parent BeanFactory
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html?is-external=true" title="class or interface in java.lang">IllegalStateException</A></CODE> - if this factory is already associated with
 a parent BeanFactory<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html#getParentBeanFactory()"><CODE>HierarchicalBeanFactory.getParentBeanFactory()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setBeanClassLoader(java.lang.ClassLoader)"><!-- --></A><H3>
setBeanClassLoader</H3>
<PRE>
void <B>setBeanClassLoader</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A>&nbsp;beanClassLoader)</PRE>
<DL>
<DD>Set the class loader to use for loading bean classes.
 Default is the thread context class loader.
 <p>Note that this class loader will only apply to bean definitions
 that do not carry a resolved bean class yet. This is the case as of
 Spring 2.0 by default: Bean definitions only carry bean class names,
 to be resolved once the factory processes the bean definition.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanClassLoader</CODE> - the class loader to use,
 or <code>null</code> to suggest the default class loader</DL>
</DD>
</DL>
<HR>

<A NAME="getBeanClassLoader()"><!-- --></A><H3>
getBeanClassLoader</H3>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A> <B>getBeanClassLoader</B>()</PRE>
<DL>
<DD>Return this factory's class loader for loading bean classes.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setTempClassLoader(java.lang.ClassLoader)"><!-- --></A><H3>
setTempClassLoader</H3>
<PRE>
void <B>setTempClassLoader</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A>&nbsp;tempClassLoader)</PRE>
<DL>
<DD>Specify a temporary ClassLoader to use for type matching purposes.
 Default is none, simply using the standard bean ClassLoader.
 <p>A temporary ClassLoader is usually just specified if
 <i>load-time weaving</i> is involved, to make sure that actual bean
 classes are loaded as lazily as possible. The temporary loader is
 then removed once the BeanFactory completes its bootstrap phase.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.5</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getTempClassLoader()"><!-- --></A><H3>
getTempClassLoader</H3>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A> <B>getTempClassLoader</B>()</PRE>
<DL>
<DD>Return the temporary ClassLoader to use for type matching purposes,
 if any.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.5</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setCacheBeanMetadata(boolean)"><!-- --></A><H3>
setCacheBeanMetadata</H3>
<PRE>
void <B>setCacheBeanMetadata</B>(boolean&nbsp;cacheBeanMetadata)</PRE>
<DL>
<DD>Set whether to cache bean metadata such as given bean definitions
 (in merged fashion) and resolved bean classes. Default is on.
 <p>Turn this flag off to enable hot-refreshing of bean definition objects
 and in particular bean classes. If this flag is off, any creation of a bean
 instance will re-query the bean class loader for newly resolved classes.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isCacheBeanMetadata()"><!-- --></A><H3>
isCacheBeanMetadata</H3>
<PRE>
boolean <B>isCacheBeanMetadata</B>()</PRE>
<DL>
<DD>Return whether to cache bean metadata such as given bean definitions
 (in merged fashion) and resolved bean classes.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver)"><!-- --></A><H3>
setBeanExpressionResolver</H3>
<PRE>
void <B>setBeanExpressionResolver</B>(<A HREF="../../../../../org/springframework/beans/factory/config/BeanExpressionResolver.html" title="interface in org.springframework.beans.factory.config">BeanExpressionResolver</A>&nbsp;resolver)</PRE>
<DL>
<DD>Specify the resolution strategy for expressions in bean definition values.
 <p>There is no expression support active in a BeanFactory by default.
 An ApplicationContext will typically set a standard expression strategy
 here, supporting "#{...}" expressions in a Unified EL compatible style.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>3.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getBeanExpressionResolver()"><!-- --></A><H3>
getBeanExpressionResolver</H3>
<PRE>
<A HREF="../../../../../org/springframework/beans/factory/config/BeanExpressionResolver.html" title="interface in org.springframework.beans.factory.config">BeanExpressionResolver</A> <B>getBeanExpressionResolver</B>()</PRE>
<DL>
<DD>Return the resolution strategy for expressions in bean definition values.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>3.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setConversionService(org.springframework.core.convert.ConversionService)"><!-- --></A><H3>
setConversionService</H3>
<PRE>
void <B>setConversionService</B>(<A HREF="../../../../../org/springframework/core/convert/ConversionService.html" title="interface in org.springframework.core.convert">ConversionService</A>&nbsp;conversionService)</PRE>
<DL>
<DD>Specify a Spring 3.0 ConversionService to use for converting
 property values, as an alternative to JavaBeans PropertyEditors.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>3.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getConversionService()"><!-- --></A><H3>
getConversionService</H3>
<PRE>
<A HREF="../../../../../org/springframework/core/convert/ConversionService.html" title="interface in org.springframework.core.convert">ConversionService</A> <B>getConversionService</B>()</PRE>
<DL>
<DD>Return the associated ConversionService, if any.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>3.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)"><!-- --></A><H3>
addPropertyEditorRegistrar</H3>
<PRE>
void <B>addPropertyEditorRegistrar</B>(<A HREF="../../../../../org/springframework/beans/PropertyEditorRegistrar.html" title="interface in org.springframework.beans">PropertyEditorRegistrar</A>&nbsp;registrar)</PRE>
<DL>
<DD>Add a PropertyEditorRegistrar to be applied to all bean creation processes.
 <p>Such a registrar creates new PropertyEditor instances and registers them
 on the given registry, fresh for each bean creation attempt. This avoids
 the need for synchronization on custom editors; hence, it is generally
 preferable to use this method instead of <A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerCustomEditor(java.lang.Class, java.lang.Class)"><CODE>registerCustomEditor(java.lang.Class, java.lang.Class<? extends java.beans.PropertyEditor>)</CODE></A>.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>registrar</CODE> - the PropertyEditorRegistrar to register</DL>
</DD>
</DL>
<HR>

<A NAME="registerCustomEditor(java.lang.Class, java.lang.Class)"><!-- --></A><H3>
registerCustomEditor</H3>
<PRE>
void <B>registerCustomEditor</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;requiredType,
                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;? extends <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans">PropertyEditor</A>&gt;&nbsp;propertyEditorClass)</PRE>
<DL>
<DD>Register the given custom property editor for all properties of the
 given type. To be invoked during factory configuration.
 <p>Note that this method will register a shared custom editor instance;
 access to that instance will be synchronized for thread-safety. It is
 generally preferable to use <A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)"><CODE>addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)</CODE></A> instead
 of this method, to avoid for the need for synchronization on custom editors.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>requiredType</CODE> - type of the property<DD><CODE>propertyEditorClass</CODE> - the <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans"><CODE>PropertyEditor</CODE></A> class to register</DL>
</DD>
</DL>
<HR>

<A NAME="copyRegisteredEditorsTo(org.springframework.beans.PropertyEditorRegistry)"><!-- --></A><H3>
copyRegisteredEditorsTo</H3>
<PRE>
void <B>copyRegisteredEditorsTo</B>(<A HREF="../../../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A>&nbsp;registry)</PRE>
<DL>
<DD>Initialize the given PropertyEditorRegistry with the custom editors
 that have been registered with this BeanFactory.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>registry</CODE> - the PropertyEditorRegistry to initialize</DL>
</DD>
</DL>
<HR>

<A NAME="setTypeConverter(org.springframework.beans.TypeConverter)"><!-- --></A><H3>
setTypeConverter</H3>
<PRE>
void <B>setTypeConverter</B>(<A HREF="../../../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A>&nbsp;typeConverter)</PRE>
<DL>
<DD>Set a custom type converter that this BeanFactory should use for converting
 bean property values, constructor argument values, etc.
 <p>This will override the default PropertyEditor mechanism and hence make
 any custom editors or custom editor registrars irrelevant.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.5</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)"><CODE>addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerCustomEditor(java.lang.Class, java.lang.Class)"><CODE>registerCustomEditor(java.lang.Class, java.lang.Class<? extends java.beans.PropertyEditor>)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getTypeConverter()"><!-- --></A><H3>
getTypeConverter</H3>
<PRE>
<A HREF="../../../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A> <B>getTypeConverter</B>()</PRE>
<DL>
<DD>Obtain a type converter as used by this BeanFactory. This may be a fresh
 instance for each call, since TypeConverters are usually <i>not</i> thread-safe.
 <p>If the default PropertyEditor mechanism is active, the returned
 TypeConverter will be aware of all custom editors that have been registered.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.5</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="addEmbeddedValueResolver(org.springframework.util.StringValueResolver)"><!-- --></A><H3>
addEmbeddedValueResolver</H3>
<PRE>
void <B>addEmbeddedValueResolver</B>(<A HREF="../../../../../org/springframework/util/StringValueResolver.html" title="interface in org.springframework.util">StringValueResolver</A>&nbsp;valueResolver)</PRE>
<DL>
<DD>Add a String resolver for embedded values such as annotation attributes.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>valueResolver</CODE> - the String resolver to apply to embedded values<DT><B>Since:</B></DT>
  <DD>3.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="resolveEmbeddedValue(java.lang.String)"><!-- --></A><H3>
resolveEmbeddedValue</H3>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>resolveEmbeddedValue</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;value)</PRE>
<DL>
<DD>Resolve the given embedded value, e.g. an annotation attribute.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - the value to resolve
<DT><B>Returns:</B><DD>the resolved value (may be the original value as-is)<DT><B>Since:</B></DT>
  <DD>3.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)"><!-- --></A><H3>
addBeanPostProcessor</H3>
<PRE>
void <B>addBeanPostProcessor</B>(<A HREF="../../../../../org/springframework/beans/factory/config/BeanPostProcessor.html" title="interface in org.springframework.beans.factory.config">BeanPostProcessor</A>&nbsp;beanPostProcessor)</PRE>
<DL>
<DD>Add a new BeanPostProcessor that will get applied to beans created
 by this factory. To be invoked during factory configuration.
 <p>Note: Post-processors submitted here will be applied in the order of
 registration; any ordering semantics expressed through implementing the
 <A HREF="../../../../../org/springframework/core/Ordered.html" title="interface in org.springframework.core"><CODE>Ordered</CODE></A> interface will be ignored. Note
 that autodetected post-processors (e.g. as beans in an ApplicationContext)
 will always be applied after programmatically registered ones.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanPostProcessor</CODE> - the post-processor to register</DL>
</DD>
</DL>
<HR>

<A NAME="getBeanPostProcessorCount()"><!-- --></A><H3>
getBeanPostProcessorCount</H3>
<PRE>
int <B>getBeanPostProcessorCount</B>()</PRE>
<DL>
<DD>Return the current number of registered BeanPostProcessors, if any.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)"><!-- --></A><H3>
registerScope</H3>
<PRE>
void <B>registerScope</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;scopeName,
                   <A HREF="../../../../../org/springframework/beans/factory/config/Scope.html" title="interface in org.springframework.beans.factory.config">Scope</A>&nbsp;scope)</PRE>
<DL>
<DD>Register the given scope, backed by the given Scope implementation.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>scopeName</CODE> - the scope identifier<DD><CODE>scope</CODE> - the backing Scope implementation</DL>
</DD>
</DL>
<HR>

<A NAME="getRegisteredScopeNames()"><!-- --></A><H3>
getRegisteredScopeNames</H3>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getRegisteredScopeNames</B>()</PRE>
<DL>
<DD>Return the names of all currently registered scopes.
 <p>This will only return the names of explicitly registered scopes.
 Built-in scopes such as "singleton" and "prototype" won't be exposed.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the array of scope names, or an empty array if none<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)"><CODE>registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getRegisteredScope(java.lang.String)"><!-- --></A><H3>
getRegisteredScope</H3>
<PRE>
<A HREF="../../../../../org/springframework/beans/factory/config/Scope.html" title="interface in org.springframework.beans.factory.config">Scope</A> <B>getRegisteredScope</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;scopeName)</PRE>
<DL>
<DD>Return the Scope implementation for the given scope name, if any.
 <p>This will only return explicitly registered scopes.
 Built-in scopes such as "singleton" and "prototype" won't be exposed.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>scopeName</CODE> - the name of the scope
<DT><B>Returns:</B><DD>the registered Scope implementation, or <code>null</code> if none<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)"><CODE>registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getAccessControlContext()"><!-- --></A><H3>
getAccessControlContext</H3>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/security/AccessControlContext.html?is-external=true" title="class or interface in java.security">AccessControlContext</A> <B>getAccessControlContext</B>()</PRE>
<DL>
<DD>Provides a security access control context relevant to this factory.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the applicable AccessControlContext (never <code>null</code>)<DT><B>Since:</B></DT>
  <DD>3.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)"><!-- --></A><H3>
copyConfigurationFrom</H3>
<PRE>
void <B>copyConfigurationFrom</B>(<A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A>&nbsp;otherFactory)</PRE>
<DL>
<DD>Copy all relevant configuration from the given other factory.
 <p>Should include all standard configuration settings as well as
 BeanPostProcessors, Scopes, and factory-specific internal settings.
 Should not include any metadata of actual bean definitions,
 such as BeanDefinition objects and bean name aliases.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>otherFactory</CODE> - the other BeanFactory to copy from</DL>
</DD>
</DL>
<HR>

<A NAME="registerAlias(java.lang.String, java.lang.String)"><!-- --></A><H3>
registerAlias</H3>
<PRE>
void <B>registerAlias</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;alias)
                   throws <A HREF="../../../../../org/springframework/beans/factory/BeanDefinitionStoreException.html" title="class in org.springframework.beans.factory">BeanDefinitionStoreException</A></PRE>
<DL>
<DD>Given a bean name, create an alias. We typically use this method to
 support names that are illegal within XML ids (used for bean names).
 <p>Typically invoked during factory configuration, but can also be
 used for runtime registration of aliases. Therefore, a factory
 implementation should synchronize alias access.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the canonical name of the target bean<DD><CODE>alias</CODE> - the alias to be registered for the bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanDefinitionStoreException.html" title="class in org.springframework.beans.factory">BeanDefinitionStoreException</A></CODE> - if the alias is already in use</DL>
</DD>
</DL>
<HR>

<A NAME="resolveAliases(org.springframework.util.StringValueResolver)"><!-- --></A><H3>
resolveAliases</H3>
<PRE>
void <B>resolveAliases</B>(<A HREF="../../../../../org/springframework/util/StringValueResolver.html" title="interface in org.springframework.util">StringValueResolver</A>&nbsp;valueResolver)</PRE>
<DL>
<DD>Resolve all alias target names and aliases registered in this
 factory, applying the given StringValueResolver to them.
 <p>The value resolver may for example resolve placeholders
 in target bean names and even in alias names.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>valueResolver</CODE> - the StringValueResolver to apply<DT><B>Since:</B></DT>
  <DD>2.5</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getMergedBeanDefinition(java.lang.String)"><!-- --></A><H3>
getMergedBeanDefinition</H3>
<PRE>
<A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A> <B>getMergedBeanDefinition</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)
                                       throws <A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD>Return a merged BeanDefinition for the given bean name,
 merging a child bean definition with its parent if necessary.
 Considers bean definitions in ancestor factories as well.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean to retrieve the merged definition for
<DT><B>Returns:</B><DD>a (potentially merged) BeanDefinition for the given bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean definition with the given name<DT><B>Since:</B></DT>
  <DD>2.5</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="isFactoryBean(java.lang.String)"><!-- --></A><H3>
isFactoryBean</H3>
<PRE>
boolean <B>isFactoryBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
                      throws <A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD>Determine whether the bean with the given name is a FactoryBean.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to check
<DT><B>Returns:</B><DD>whether the bean is a FactoryBean
 (<code>false</code> means the bean exists but is not a FactoryBean)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name<DT><B>Since:</B></DT>
  <DD>2.5</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="isCurrentlyInCreation(java.lang.String)"><!-- --></A><H3>
isCurrentlyInCreation</H3>
<PRE>
boolean <B>isCurrentlyInCreation</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD>Determine whether the specified bean is currently in creation.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean
<DT><B>Returns:</B><DD>whether the bean is currently in creation<DT><B>Since:</B></DT>
  <DD>2.5</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="registerDependentBean(java.lang.String, java.lang.String)"><!-- --></A><H3>
registerDependentBean</H3>
<PRE>
void <B>registerDependentBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;dependentBeanName)</PRE>
<DL>
<DD>Register a dependent bean for the given bean,
 to be destroyed before the given bean is destroyed.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean<DD><CODE>dependentBeanName</CODE> - the name of the dependent bean<DT><B>Since:</B></DT>
  <DD>2.5</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getDependentBeans(java.lang.String)"><!-- --></A><H3>
getDependentBeans</H3>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getDependentBeans</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD>Return the names of all beans which depend on the specified bean, if any.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean
<DT><B>Returns:</B><DD>the array of dependent bean names, or an empty array if none<DT><B>Since:</B></DT>
  <DD>2.5</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getDependenciesForBean(java.lang.String)"><!-- --></A><H3>
getDependenciesForBean</H3>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getDependenciesForBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD>Return the names of all beans that the specified bean depends on, if any.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean
<DT><B>Returns:</B><DD>the array of names of beans which the bean depends on,
 or an empty array if none<DT><B>Since:</B></DT>
  <DD>2.5</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="destroyBean(java.lang.String, java.lang.Object)"><!-- --></A><H3>
destroyBean</H3>
<PRE>
void <B>destroyBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;beanInstance)</PRE>
<DL>
<DD>Destroy the given bean instance (usually a prototype instance
 obtained from this factory) according to its bean definition.
 <p>Any exception that arises during destruction should be caught
 and logged instead of propagated to the caller of this method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean definition<DD><CODE>beanInstance</CODE> - the bean instance to destroy</DL>
</DD>
</DL>
<HR>

<A NAME="destroyScopedBean(java.lang.String)"><!-- --></A><H3>
destroyScopedBean</H3>
<PRE>
void <B>destroyScopedBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD>Destroy the specified scoped bean in the current target scope, if any.
 <p>Any exception that arises during destruction should be caught
 and logged instead of propagated to the caller of this method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the scoped bean</DL>
</DD>
</DL>
<HR>

<A NAME="destroySingletons()"><!-- --></A><H3>
destroySingletons</H3>
<PRE>
void <B>destroySingletons</B>()</PRE>
<DL>
<DD>Destroy all singleton beans in this factory, including inner beans that have
 been registered as disposable. To be called on shutdown of a factory.
 <p>Any exception that arises during destruction should be caught
 and logged instead of propagated to the caller of this method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../../org/springframework/beans/factory/config/CommonsLogFactoryBean.html" title="class in org.springframework.beans.factory.config"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html" title="interface in org.springframework.beans.factory.config"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../../index.html?org/springframework/beans/factory/config/ConfigurableBeanFactory.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="ConfigurableBeanFactory.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
