<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:22:49 BST 2010 -->
<TITLE>
AbstractBeanFactory
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="AbstractBeanFactory";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanDefinitionReader.html" title="class in org.springframework.beans.factory.support"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../../org/springframework/beans/factory/support/AutowireCandidateQualifier.html" title="class in org.springframework.beans.factory.support"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../../index.html?org/springframework/beans/factory/support/AbstractBeanFactory.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="AbstractBeanFactory.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_org.springframework.beans.factory.support.DefaultSingletonBeanRegistry">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.beans.factory.support</FONT>
<BR>
Class AbstractBeanFactory</H2>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../../../org/springframework/core/SimpleAliasRegistry.html" title="class in org.springframework.core">org.springframework.core.SimpleAliasRegistry</A>
      <IMG SRC="../../../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html" title="class in org.springframework.beans.factory.support">org.springframework.beans.factory.support.DefaultSingletonBeanRegistry</A>
          <IMG SRC="../../../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../../../org/springframework/beans/factory/support/FactoryBeanRegistrySupport.html" title="class in org.springframework.beans.factory.support">org.springframework.beans.factory.support.FactoryBeanRegistrySupport</A>
              <IMG SRC="../../../../../resources/inherit.gif" ALT="extended by "><B>org.springframework.beans.factory.support.AbstractBeanFactory</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A>, <A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A>, <A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html" title="interface in org.springframework.beans.factory.config">SingletonBeanRegistry</A>, <A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html" title="interface in org.springframework.beans.factory">HierarchicalBeanFactory</A>, <A HREF="../../../../../org/springframework/core/AliasRegistry.html" title="interface in org.springframework.core">AliasRegistry</A></DD>
</DL>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../../org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.html" title="class in org.springframework.beans.factory.support">AbstractAutowireCapableBeanFactory</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public abstract class <B>AbstractBeanFactory</B><DT>extends <A HREF="../../../../../org/springframework/beans/factory/support/FactoryBeanRegistrySupport.html" title="class in org.springframework.beans.factory.support">FactoryBeanRegistrySupport</A><DT>implements <A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></DL>
</PRE>

<P>
Abstract base class for <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>BeanFactory</CODE></A>
 implementations, providing the full capabilities of the
 <A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config"><CODE>ConfigurableBeanFactory</CODE></A> SPI.
 Does <i>not</i> assume a listable bean factory: can therefore also be used
 as base class for bean factory implementations which obtain bean definitions
 from some backend resource (where bean definition access is an expensive operation).

 <p>This class provides a singleton cache (through its base class
 <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html" title="class in org.springframework.beans.factory.support"><CODE>DefaultSingletonBeanRegistry</CODE></A>,
 singleton/prototype determination, <A HREF="../../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory"><CODE>FactoryBean</CODE></A>
 handling, aliases, bean definition merging for child bean definitions,
 and bean destruction (<A HREF="../../../../../org/springframework/beans/factory/DisposableBean.html" title="interface in org.springframework.beans.factory"><CODE>DisposableBean</CODE></A>
 interface, custom destroy methods). Furthermore, it can manage a bean factory
 hierarchy (delegating to the parent in case of an unknown bean), through implementing
 the <A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html" title="interface in org.springframework.beans.factory"><CODE>HierarchicalBeanFactory</CODE></A> interface.

 <p>The main template methods to be implemented by subclasses are
 <A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getBeanDefinition(java.lang.String)"><CODE>getBeanDefinition(java.lang.String)</CODE></A> and <A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])"><CODE>createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])</CODE></A>, retrieving a bean definition
 for a given bean name and creating a bean instance for a given bean definition,
 respectively. Default implementations of those operations can be found in
 <A HREF="../../../../../org/springframework/beans/factory/support/DefaultListableBeanFactory.html" title="class in org.springframework.beans.factory.support"><CODE>DefaultListableBeanFactory</CODE></A> and <A HREF="../../../../../org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.html" title="class in org.springframework.beans.factory.support"><CODE>AbstractAutowireCapableBeanFactory</CODE></A>.
<P>

<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>15 April 2001</DD>
<DT><B>Author:</B></DT>
  <DD>Rod Johnson, Juergen Hoeller, Costin Leau</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getBeanDefinition(java.lang.String)"><CODE>getBeanDefinition(java.lang.String)</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])"><CODE>createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.html#createBean(java.lang.Class)"><CODE>AbstractAutowireCapableBeanFactory.createBean(java.lang.Class<T>)</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/support/DefaultListableBeanFactory.html#getBeanDefinition(java.lang.String)"><CODE>DefaultListableBeanFactory.getBeanDefinition(java.lang.String)</CODE></A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.beans.factory.support.DefaultSingletonBeanRegistry"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from class org.springframework.beans.factory.support.<A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html" title="class in org.springframework.beans.factory.support">DefaultSingletonBeanRegistry</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#logger">logger</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#NULL_OBJECT">NULL_OBJECT</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.beans.factory.config.ConfigurableBeanFactory"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface org.springframework.beans.factory.config.<A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#SCOPE_PROTOTYPE">SCOPE_PROTOTYPE</A>, <A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#SCOPE_SINGLETON">SCOPE_SINGLETON</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.beans.factory.BeanFactory"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface org.springframework.beans.factory.<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#FACTORY_BEAN_PREFIX">FACTORY_BEAN_PREFIX</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#AbstractBeanFactory()">AbstractBeanFactory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new AbstractBeanFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#AbstractBeanFactory(org.springframework.beans.factory.BeanFactory)">AbstractBeanFactory</A></B>(<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A>&nbsp;parentBeanFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new AbstractBeanFactory with the given parent.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)">addBeanPostProcessor</A></B>(<A HREF="../../../../../org/springframework/beans/factory/config/BeanPostProcessor.html" title="interface in org.springframework.beans.factory.config">BeanPostProcessor</A>&nbsp;beanPostProcessor)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add a new BeanPostProcessor that will get applied to beans created
 by this factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#addEmbeddedValueResolver(org.springframework.util.StringValueResolver)">addEmbeddedValueResolver</A></B>(<A HREF="../../../../../org/springframework/util/StringValueResolver.html" title="interface in org.springframework.util">StringValueResolver</A>&nbsp;valueResolver)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add a String resolver for embedded values such as annotation attributes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)">addPropertyEditorRegistrar</A></B>(<A HREF="../../../../../org/springframework/beans/PropertyEditorRegistrar.html" title="interface in org.springframework.beans">PropertyEditorRegistrar</A>&nbsp;registrar)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add a PropertyEditorRegistrar to be applied to all bean creation processes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#afterPrototypeCreation(java.lang.String)">afterPrototypeCreation</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Callback after prototype creation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#beforePrototypeCreation(java.lang.String)">beforePrototypeCreation</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Callback before prototype creation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#checkMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, java.lang.Object[])">checkMergedBeanDefinition</A></B>(<A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd,
                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check the given merged bean definition,
 potentially throwing validation exceptions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#clearMergedBeanDefinition(java.lang.String)">clearMergedBeanDefinition</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Remove the merged bean definition for the specified bean,
 recreating it on next access.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#containsBean(java.lang.String)">containsBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Does this bean factory contain a bean with the given name? More specifically,
 is <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> able to obtain a bean instance for the given name?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected abstract &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#containsBeanDefinition(java.lang.String)">containsBeanDefinition</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check if this bean factory contains a bean definition with the given name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#containsLocalBean(java.lang.String)">containsLocalBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether the local bean factory contains a bean of the given name,
 ignoring beans defined in ancestor contexts.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)">copyConfigurationFrom</A></B>(<A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A>&nbsp;otherFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copy all relevant configuration from the given other factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#copyRegisteredEditorsTo(org.springframework.beans.PropertyEditorRegistry)">copyRegisteredEditorsTo</A></B>(<A HREF="../../../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A>&nbsp;registry)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize the given PropertyEditorRegistry with the custom editors
 that have been registered with this BeanFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected abstract &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])">createBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
           <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd,
           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a bean instance for the given bean definition.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#destroyBean(java.lang.String, java.lang.Object)">destroyBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;beanInstance)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Destroy the given bean instance (usually a prototype instance
 obtained from this factory) according to its bean definition.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#destroyBean(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)">destroyBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;beanInstance,
            <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Destroy the given bean instance (usually a prototype instance
 obtained from this factory) according to the given bean definition.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#destroyScopedBean(java.lang.String)">destroyScopedBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Destroy the specified scoped bean in the current target scope, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected 
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#doGetBean(java.lang.String, java.lang.Class, java.lang.Object[], boolean)">doGetBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType,
          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
          boolean&nbsp;typeCheckOnly)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an instance, which may be shared or independent, of the specified bean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#evaluateBeanDefinitionString(java.lang.String, org.springframework.beans.factory.config.BeanDefinition)">evaluateBeanDefinitionString</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;value,
                             <A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A>&nbsp;beanDefinition)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evaluate the given String as contained in a bean definition,
 potentially resolving it as an expression.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/security/AccessControlContext.html?is-external=true" title="class or interface in java.security">AccessControlContext</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getAccessControlContext()">getAccessControlContext</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delegate the creation of the access control context to the
 <A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#setSecurityContextProvider(org.springframework.beans.factory.support.SecurityContextProvider)"><CODE>SecurityContextProvider</CODE></A>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getAliases(java.lang.String)">getAliases</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the aliases for the given name, if defined.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getBean(java.lang.String)">getBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an instance, which may be shared or independent, of the specified bean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getBean(java.lang.String, java.lang.Class)">getBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an instance, which may be shared or independent, of the specified bean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getBean(java.lang.String, java.lang.Class, java.lang.Object...)">getBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType,
        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an instance, which may be shared or independent, of the specified bean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getBean(java.lang.String, java.lang.Object...)">getBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an instance, which may be shared or independent, of the specified bean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getBeanClassLoader()">getBeanClassLoader</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return this factory's class loader for loading bean classes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected abstract &nbsp;<A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getBeanDefinition(java.lang.String)">getBeanDefinition</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the bean definition for the given bean name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/beans/factory/config/BeanExpressionResolver.html" title="interface in org.springframework.beans.factory.config">BeanExpressionResolver</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getBeanExpressionResolver()">getBeanExpressionResolver</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the resolution strategy for expressions in bean definition values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getBeanPostProcessorCount()">getBeanPostProcessorCount</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the current number of registered BeanPostProcessors, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../../org/springframework/beans/factory/config/BeanPostProcessor.html" title="interface in org.springframework.beans.factory.config">BeanPostProcessor</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getBeanPostProcessors()">getBeanPostProcessors</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the list of BeanPostProcessors that will get applied
 to beans created with this factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/core/convert/ConversionService.html" title="interface in org.springframework.core.convert">ConversionService</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getConversionService()">getConversionService</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the associated ConversionService, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;? extends <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans">PropertyEditor</A>&gt;&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getCustomEditors()">getCustomEditors</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the map of custom editors, with Classes as keys and PropertyEditor classes as values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getCustomTypeConverter()">getCustomTypeConverter</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the custom TypeConverter to use, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getMergedBeanDefinition(java.lang.String)">getMergedBeanDefinition</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a 'merged' BeanDefinition for the given bean name,
 merging a child bean definition with its parent if necessary.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getMergedBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition)">getMergedBeanDefinition</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                        <A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A>&nbsp;bd)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a RootBeanDefinition for the given top-level bean, by merging with
 the parent if the given bean's definition is a child bean definition.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getMergedBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.config.BeanDefinition)">getMergedBeanDefinition</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                        <A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A>&nbsp;bd,
                        <A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A>&nbsp;containingBd)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a RootBeanDefinition for the given bean, by merging with the
 parent if the given bean's definition is a child bean definition.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getMergedLocalBeanDefinition(java.lang.String)">getMergedLocalBeanDefinition</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a merged RootBeanDefinition, traversing the parent bean definition
 if the specified bean corresponds to a child bean definition.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getObjectForBeanInstance(java.lang.Object, java.lang.String, java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)">getObjectForBeanInstance</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;beanInstance,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                         <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the object for the given bean instance, either the bean
 instance itself or its created object in case of a FactoryBean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getParentBeanFactory()">getParentBeanFactory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the parent bean factory, or <code>null</code> if there is none.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true" title="class or interface in java.util">Set</A>&lt;<A HREF="../../../../../org/springframework/beans/PropertyEditorRegistrar.html" title="interface in org.springframework.beans">PropertyEditorRegistrar</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getPropertyEditorRegistrars()">getPropertyEditorRegistrars</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the set of PropertyEditorRegistrars.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/beans/factory/config/Scope.html" title="interface in org.springframework.beans.factory.config">Scope</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getRegisteredScope(java.lang.String)">getRegisteredScope</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;scopeName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the Scope implementation for the given scope name, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getRegisteredScopeNames()">getRegisteredScopeNames</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the names of all currently registered scopes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getTempClassLoader()">getTempClassLoader</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the temporary ClassLoader to use for type matching purposes,
 if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;?&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getType(java.lang.String)">getType</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine the type of the bean with the given name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getTypeConverter()">getTypeConverter</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Obtain a type converter as used by this BeanFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getTypeForFactoryBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)">getTypeForFactoryBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                      <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine the bean type for the given FactoryBean definition, as far as possible.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#hasDestructionAwareBeanPostProcessors()">hasDestructionAwareBeanPostProcessors</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether this factory holds a DestructionAwareBeanPostProcessor
 that will get applied to singleton beans on shutdown.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#hasInstantiationAwareBeanPostProcessors()">hasInstantiationAwareBeanPostProcessors</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether this factory holds a InstantiationAwareBeanPostProcessor
 that will get applied to singleton beans on shutdown.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#initBeanWrapper(org.springframework.beans.BeanWrapper)">initBeanWrapper</A></B>(<A HREF="../../../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans">BeanWrapper</A>&nbsp;bw)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize the given BeanWrapper with the custom editors registered
 with this factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#isBeanEligibleForMetadataCaching(java.lang.String)">isBeanEligibleForMetadataCaching</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether the specified bean is eligible for having
 its bean definition metadata cached.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#isBeanNameInUse(java.lang.String)">isBeanNameInUse</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether the given bean name is already in use within this factory,
 i.e.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#isCacheBeanMetadata()">isCacheBeanMetadata</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether to cache bean metadata such as given bean definitions
 (in merged fashion) and resolved bean classes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#isCurrentlyInCreation(java.lang.String)">isCurrentlyInCreation</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether the specified bean is currently in creation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#isFactoryBean(java.lang.String)">isFactoryBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether the bean with the given name is a FactoryBean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#isFactoryBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)">isFactoryBean</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
              <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check whether the given bean is defined as a <A HREF="../../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory"><CODE>FactoryBean</CODE></A>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#isPrototype(java.lang.String)">isPrototype</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Is this bean a prototype? That is, will <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> always return
 independent instances?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#isPrototypeCurrentlyInCreation(java.lang.String)">isPrototypeCurrentlyInCreation</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether the specified prototype bean is currently in creation
 (within the current thread).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#isSingleton(java.lang.String)">isSingleton</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Is this bean a shared singleton? That is, will <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> always
 return the same instance?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#isTypeMatch(java.lang.String, java.lang.Class)">isTypeMatch</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;targetType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check whether the bean with the given name matches the specified type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#markBeanAsCreated(java.lang.String)">markBeanAsCreated</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mark the specified bean as already created (or about to be created).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#originalBeanName(java.lang.String)">originalBeanName</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine the original bean name, resolving locally defined aliases to canonical names.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#predictBeanType(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class...)">predictBeanType</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd,
                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>...&nbsp;typesToMatch)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Predict the eventual bean type (of the processed bean instance) for the
 specified bean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#registerCustomEditor(java.lang.Class, java.lang.Class)">registerCustomEditor</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;requiredType,
                     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;? extends <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans">PropertyEditor</A>&gt;&nbsp;propertyEditorClass)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register the given custom property editor for all properties of the
 given type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#registerCustomEditors(org.springframework.beans.PropertyEditorRegistry)">registerCustomEditors</A></B>(<A HREF="../../../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A>&nbsp;registry)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize the given PropertyEditorRegistry with the custom editors
 that have been registered with this BeanFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#registerDisposableBeanIfNecessary(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)">registerDisposableBeanIfNecessary</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                                  <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;bean,
                                  <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add the given bean to the list of disposable beans in this factory,
 registering its DisposableBean interface and/or the given destroy method
 to be called on factory shutdown (if applicable).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)">registerScope</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;scopeName,
              <A HREF="../../../../../org/springframework/beans/factory/config/Scope.html" title="interface in org.springframework.beans.factory.config">Scope</A>&nbsp;scope)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register the given scope, backed by the given Scope implementation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#removeSingletonIfCreatedForTypeCheckOnly(java.lang.String)">removeSingletonIfCreatedForTypeCheckOnly</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Remove the singleton instance (if any) for the given bean name,
 but only if it hasn't been used for other purposes than type checking.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#requiresDestruction(java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)">requiresDestruction</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;bean,
                    <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether the given bean requires destruction on shutdown.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#resolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, java.lang.Class...)">resolveBeanClass</A></B>(<A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>...&nbsp;typesToMatch)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resolve the bean class for the specified bean definition,
 resolving a bean class name into a Class reference (if necessary)
 and storing the resolved Class in the bean definition for further use.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#resolveEmbeddedValue(java.lang.String)">resolveEmbeddedValue</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resolve the given embedded value, e.g.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#setBeanClassLoader(java.lang.ClassLoader)">setBeanClassLoader</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A>&nbsp;beanClassLoader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the class loader to use for loading bean classes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver)">setBeanExpressionResolver</A></B>(<A HREF="../../../../../org/springframework/beans/factory/config/BeanExpressionResolver.html" title="interface in org.springframework.beans.factory.config">BeanExpressionResolver</A>&nbsp;resolver)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify the resolution strategy for expressions in bean definition values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#setCacheBeanMetadata(boolean)">setCacheBeanMetadata</A></B>(boolean&nbsp;cacheBeanMetadata)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether to cache bean metadata such as given bean definitions
 (in merged fashion) and resolved bean classes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#setConversionService(org.springframework.core.convert.ConversionService)">setConversionService</A></B>(<A HREF="../../../../../org/springframework/core/convert/ConversionService.html" title="interface in org.springframework.core.convert">ConversionService</A>&nbsp;conversionService)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify a Spring 3.0 ConversionService to use for converting
 property values, as an alternative to JavaBeans PropertyEditors.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#setParentBeanFactory(org.springframework.beans.factory.BeanFactory)">setParentBeanFactory</A></B>(<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A>&nbsp;parentBeanFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the parent of this bean factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#setSecurityContextProvider(org.springframework.beans.factory.support.SecurityContextProvider)">setSecurityContextProvider</A></B>(<A HREF="../../../../../org/springframework/beans/factory/support/SecurityContextProvider.html" title="interface in org.springframework.beans.factory.support">SecurityContextProvider</A>&nbsp;securityProvider)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the security context provider for this bean factory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#setTempClassLoader(java.lang.ClassLoader)">setTempClassLoader</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A>&nbsp;tempClassLoader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify a temporary ClassLoader to use for type matching purposes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#setTypeConverter(org.springframework.beans.TypeConverter)">setTypeConverter</A></B>(<A HREF="../../../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A>&nbsp;typeConverter)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set a custom type converter that this BeanFactory should use for converting
 bean property values, constructor argument values, etc.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#transformedBeanName(java.lang.String)">transformedBeanName</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the bean name, stripping out the factory dereference prefix if necessary,
 and resolving aliases to canonical names.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.factory.support.FactoryBeanRegistrySupport"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class org.springframework.beans.factory.support.<A HREF="../../../../../org/springframework/beans/factory/support/FactoryBeanRegistrySupport.html" title="class in org.springframework.beans.factory.support">FactoryBeanRegistrySupport</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/beans/factory/support/FactoryBeanRegistrySupport.html#getCachedObjectForFactoryBean(java.lang.String)">getCachedObjectForFactoryBean</A>, <A HREF="../../../../../org/springframework/beans/factory/support/FactoryBeanRegistrySupport.html#getFactoryBean(java.lang.String, java.lang.Object)">getFactoryBean</A>, <A HREF="../../../../../org/springframework/beans/factory/support/FactoryBeanRegistrySupport.html#getObjectFromFactoryBean(org.springframework.beans.factory.FactoryBean, java.lang.String, boolean)">getObjectFromFactoryBean</A>, <A HREF="../../../../../org/springframework/beans/factory/support/FactoryBeanRegistrySupport.html#getTypeForFactoryBean(org.springframework.beans.factory.FactoryBean)">getTypeForFactoryBean</A>, <A HREF="../../../../../org/springframework/beans/factory/support/FactoryBeanRegistrySupport.html#postProcessObjectFromFactoryBean(java.lang.Object, java.lang.String)">postProcessObjectFromFactoryBean</A>, <A HREF="../../../../../org/springframework/beans/factory/support/FactoryBeanRegistrySupport.html#removeSingleton(java.lang.String)">removeSingleton</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.factory.support.DefaultSingletonBeanRegistry"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class org.springframework.beans.factory.support.<A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html" title="class in org.springframework.beans.factory.support">DefaultSingletonBeanRegistry</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#addSingleton(java.lang.String, java.lang.Object)">addSingleton</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#addSingletonFactory(java.lang.String, org.springframework.beans.factory.ObjectFactory)">addSingletonFactory</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#afterSingletonCreation(java.lang.String)">afterSingletonCreation</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#beforeSingletonCreation(java.lang.String)">beforeSingletonCreation</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#containsSingleton(java.lang.String)">containsSingleton</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#destroyBean(java.lang.String, org.springframework.beans.factory.DisposableBean)">destroyBean</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#destroySingleton(java.lang.String)">destroySingleton</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#destroySingletons()">destroySingletons</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#getDependenciesForBean(java.lang.String)">getDependenciesForBean</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#getDependentBeans(java.lang.String)">getDependentBeans</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#getSingleton(java.lang.String)">getSingleton</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#getSingleton(java.lang.String, boolean)">getSingleton</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#getSingleton(java.lang.String, org.springframework.beans.factory.ObjectFactory)">getSingleton</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#getSingletonCount()">getSingletonCount</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#getSingletonMutex()">getSingletonMutex</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#getSingletonNames()">getSingletonNames</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#hasDependentBean(java.lang.String)">hasDependentBean</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#isSingletonCurrentlyInCreation(java.lang.String)">isSingletonCurrentlyInCreation</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#onSuppressedException(java.lang.Exception)">onSuppressedException</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#registerContainedBean(java.lang.String, java.lang.String)">registerContainedBean</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#registerDependentBean(java.lang.String, java.lang.String)">registerDependentBean</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#registerDisposableBean(java.lang.String, org.springframework.beans.factory.DisposableBean)">registerDisposableBean</A>, <A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#registerSingleton(java.lang.String, java.lang.Object)">registerSingleton</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.core.SimpleAliasRegistry"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class org.springframework.core.<A HREF="../../../../../org/springframework/core/SimpleAliasRegistry.html" title="class in org.springframework.core">SimpleAliasRegistry</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/core/SimpleAliasRegistry.html#allowAliasOverriding()">allowAliasOverriding</A>, <A HREF="../../../../../org/springframework/core/SimpleAliasRegistry.html#canonicalName(java.lang.String)">canonicalName</A>, <A HREF="../../../../../org/springframework/core/SimpleAliasRegistry.html#checkForAliasCircle(java.lang.String, java.lang.String)">checkForAliasCircle</A>, <A HREF="../../../../../org/springframework/core/SimpleAliasRegistry.html#isAlias(java.lang.String)">isAlias</A>, <A HREF="../../../../../org/springframework/core/SimpleAliasRegistry.html#registerAlias(java.lang.String, java.lang.String)">registerAlias</A>, <A HREF="../../../../../org/springframework/core/SimpleAliasRegistry.html#removeAlias(java.lang.String)">removeAlias</A>, <A HREF="../../../../../org/springframework/core/SimpleAliasRegistry.html#resolveAliases(org.springframework.util.StringValueResolver)">resolveAliases</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.factory.config.ConfigurableBeanFactory"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from interface org.springframework.beans.factory.config.<A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#destroySingletons()">destroySingletons</A>, <A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getDependenciesForBean(java.lang.String)">getDependenciesForBean</A>, <A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getDependentBeans(java.lang.String)">getDependentBeans</A>, <A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerAlias(java.lang.String, java.lang.String)">registerAlias</A>, <A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerDependentBean(java.lang.String, java.lang.String)">registerDependentBean</A>, <A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#resolveAliases(org.springframework.util.StringValueResolver)">resolveAliases</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.factory.BeanFactory"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from interface org.springframework.beans.factory.<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.Class)">getBean</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.factory.config.SingletonBeanRegistry"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from interface org.springframework.beans.factory.config.<A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html" title="interface in org.springframework.beans.factory.config">SingletonBeanRegistry</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html#containsSingleton(java.lang.String)">containsSingleton</A>, <A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html#getSingleton(java.lang.String)">getSingleton</A>, <A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html#getSingletonCount()">getSingletonCount</A>, <A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html#getSingletonNames()">getSingletonNames</A>, <A HREF="../../../../../org/springframework/beans/factory/config/SingletonBeanRegistry.html#registerSingleton(java.lang.String, java.lang.Object)">registerSingleton</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="AbstractBeanFactory()"><!-- --></A><H3>
AbstractBeanFactory</H3>
<PRE>
public <B>AbstractBeanFactory</B>()</PRE>
<DL>
<DD>Create a new AbstractBeanFactory.
<P>
</DL>
<HR>

<A NAME="AbstractBeanFactory(org.springframework.beans.factory.BeanFactory)"><!-- --></A><H3>
AbstractBeanFactory</H3>
<PRE>
public <B>AbstractBeanFactory</B>(<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A>&nbsp;parentBeanFactory)</PRE>
<DL>
<DD>Create a new AbstractBeanFactory with the given parent.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>parentBeanFactory</CODE> - parent bean factory, or <code>null</code> if none<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getBean(java.lang.String)"><CODE>getBean(java.lang.String)</CODE></A></DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getBean(java.lang.String)"><!-- --></A><H3>
getBean</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>getBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
               throws <A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)">BeanFactory</A></CODE></B></DD>
<DD>Return an instance, which may be shared or independent, of the specified bean.
 <p>This method allows a Spring BeanFactory to be used as a replacement for the
 Singleton or Prototype design pattern. Callers may retain references to
 returned objects in the case of Singleton beans.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)">getBean</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to retrieve
<DT><B>Returns:</B><DD>an instance of the bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean definition
 with the specified name
<DD><CODE><A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if the bean could not be obtained</DL>
</DD>
</DL>
<HR>

<A NAME="getBean(java.lang.String, java.lang.Class)"><!-- --></A><H3>
getBean</H3>
<PRE>
public &lt;T&gt; T <B>getBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
                     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)
          throws <A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String, java.lang.Class)">BeanFactory</A></CODE></B></DD>
<DD>Return an instance, which may be shared or independent, of the specified bean.
 <p>Behaves the same as <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(String)</CODE></A>, but provides a measure of type
 safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the
 required type. This means that ClassCastException can't be thrown on casting
 the result correctly, as can happen with <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(String)</CODE></A>.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String, java.lang.Class)">getBean</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to retrieve<DD><CODE>requiredType</CODE> - type the bean must match. Can be an interface or superclass
 of the actual class, or <code>null</code> for any match. For example, if the value
 is <code>Object.class</code>, this method will succeed whatever the class of the
 returned instance.
<DT><B>Returns:</B><DD>an instance of the bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there's no such bean definition
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanNotOfRequiredTypeException.html" title="class in org.springframework.beans.factory">BeanNotOfRequiredTypeException</A></CODE> - if the bean is not of the required type
<DD><CODE><A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if the bean could not be created</DL>
</DD>
</DL>
<HR>

<A NAME="getBean(java.lang.String, java.lang.Object...)"><!-- --></A><H3>
getBean</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>getBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
                      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
               throws <A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String, java.lang.Object...)">BeanFactory</A></CODE></B></DD>
<DD>Return an instance, which may be shared or independent, of the specified bean.
 <p>Allows for specifying explicit constructor arguments / factory method arguments,
 overriding the specified default arguments (if any) in the bean definition.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String, java.lang.Object...)">getBean</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to retrieve<DD><CODE>args</CODE> - arguments to use if creating a prototype using explicit arguments to a
 static factory method. It is invalid to use a non-null args value in any other case.
<DT><B>Returns:</B><DD>an instance of the bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there's no such bean definition
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanDefinitionStoreException.html" title="class in org.springframework.beans.factory">BeanDefinitionStoreException</A></CODE> - if arguments have been given but
 the affected bean isn't a prototype
<DD><CODE><A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if the bean could not be created</DL>
</DD>
</DL>
<HR>

<A NAME="getBean(java.lang.String, java.lang.Class, java.lang.Object...)"><!-- --></A><H3>
getBean</H3>
<PRE>
public &lt;T&gt; T <B>getBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
                     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType,
                     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
          throws <A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD>Return an instance, which may be shared or independent, of the specified bean.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to retrieve<DD><CODE>requiredType</CODE> - the required type of the bean to retrieve<DD><CODE>args</CODE> - arguments to use if creating a prototype using explicit arguments to a
 static factory method. It is invalid to use a non-null args value in any other case.
<DT><B>Returns:</B><DD>an instance of the bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if the bean could not be created</DL>
</DD>
</DL>
<HR>

<A NAME="doGetBean(java.lang.String, java.lang.Class, java.lang.Object[], boolean)"><!-- --></A><H3>
doGetBean</H3>
<PRE>
protected &lt;T&gt; T <B>doGetBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType,
                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                          boolean&nbsp;typeCheckOnly)
               throws <A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD>Return an instance, which may be shared or independent, of the specified bean.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to retrieve<DD><CODE>requiredType</CODE> - the required type of the bean to retrieve<DD><CODE>args</CODE> - arguments to use if creating a prototype using explicit arguments to a
 static factory method. It is invalid to use a non-null args value in any other case.<DD><CODE>typeCheckOnly</CODE> - whether the instance is obtained for a type check,
 not for actual use
<DT><B>Returns:</B><DD>an instance of the bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - if the bean could not be created</DL>
</DD>
</DL>
<HR>

<A NAME="containsBean(java.lang.String)"><!-- --></A><H3>
containsBean</H3>
<PRE>
public boolean <B>containsBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#containsBean(java.lang.String)">BeanFactory</A></CODE></B></DD>
<DD>Does this bean factory contain a bean with the given name? More specifically,
 is <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> able to obtain a bean instance for the given name?
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#containsBean(java.lang.String)">containsBean</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>whether a bean with the given name is defined</DL>
</DD>
</DL>
<HR>

<A NAME="isSingleton(java.lang.String)"><!-- --></A><H3>
isSingleton</H3>
<PRE>
public boolean <B>isSingleton</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
                    throws <A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isSingleton(java.lang.String)">BeanFactory</A></CODE></B></DD>
<DD>Is this bean a shared singleton? That is, will <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> always
 return the same instance?
 <p>Note: This method returning <code>false</code> does not clearly indicate
 independent instances. It indicates non-singleton instances, which may correspond
 to a scoped bean as well. Use the <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isPrototype(java.lang.String)"><CODE>BeanFactory.isPrototype(java.lang.String)</CODE></A> operation to explicitly
 check for independent instances.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isSingleton(java.lang.String)">isSingleton</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>whether this bean corresponds to a singleton instance
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isPrototype(java.lang.String)"><CODE>BeanFactory.isPrototype(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isPrototype(java.lang.String)"><!-- --></A><H3>
isPrototype</H3>
<PRE>
public boolean <B>isPrototype</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
                    throws <A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isPrototype(java.lang.String)">BeanFactory</A></CODE></B></DD>
<DD>Is this bean a prototype? That is, will <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> always return
 independent instances?
 <p>Note: This method returning <code>false</code> does not clearly indicate
 a singleton object. It indicates non-independent instances, which may correspond
 to a scoped bean as well. Use the <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isSingleton(java.lang.String)"><CODE>BeanFactory.isSingleton(java.lang.String)</CODE></A> operation to explicitly
 check for a shared singleton instance.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isPrototype(java.lang.String)">isPrototype</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>whether this bean will always deliver independent instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isSingleton(java.lang.String)"><CODE>BeanFactory.isSingleton(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isTypeMatch(java.lang.String, java.lang.Class)"><!-- --></A><H3>
isTypeMatch</H3>
<PRE>
public boolean <B>isTypeMatch</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
                           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;targetType)
                    throws <A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isTypeMatch(java.lang.String, java.lang.Class)">BeanFactory</A></CODE></B></DD>
<DD>Check whether the bean with the given name matches the specified type.
 More specifically, check whether a <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> call for the given name
 would return an object that is assignable to the specified target type.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isTypeMatch(java.lang.String, java.lang.Class)">isTypeMatch</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query<DD><CODE>targetType</CODE> - the type to match against
<DT><B>Returns:</B><DD><code>true</code> if the bean type matches,
 <code>false</code> if it doesn't match or cannot be determined yet
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getType(java.lang.String)"><CODE>BeanFactory.getType(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getType(java.lang.String)"><!-- --></A><H3>
getType</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;?&gt; <B>getType</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
                 throws <A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getType(java.lang.String)">BeanFactory</A></CODE></B></DD>
<DD>Determine the type of the bean with the given name. More specifically,
 determine the type of object that <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A> would return for the given name.
 <p>For a <A HREF="../../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory"><CODE>FactoryBean</CODE></A>, return the type of object that the FactoryBean creates,
 as exposed by <A HREF="../../../../../org/springframework/beans/factory/FactoryBean.html#getObjectType()"><CODE>FactoryBean.getObjectType()</CODE></A>.
 <p>Translates aliases back to the corresponding canonical bean name.
 Will ask the parent factory if the bean cannot be found in this factory instance.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getType(java.lang.String)">getType</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>the type of the bean, or <code>null</code> if not determinable
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#isTypeMatch(java.lang.String, java.lang.Class)"><CODE>BeanFactory.isTypeMatch(java.lang.String, java.lang.Class)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getAliases(java.lang.String)"><!-- --></A><H3>
getAliases</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getAliases</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/core/AliasRegistry.html#getAliases(java.lang.String)">AliasRegistry</A></CODE></B></DD>
<DD>Return the aliases for the given name, if defined.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getAliases(java.lang.String)">getAliases</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A></CODE><DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/core/AliasRegistry.html#getAliases(java.lang.String)">getAliases</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/core/AliasRegistry.html" title="interface in org.springframework.core">AliasRegistry</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../../org/springframework/core/SimpleAliasRegistry.html#getAliases(java.lang.String)">getAliases</A></CODE> in class <CODE><A HREF="../../../../../org/springframework/core/SimpleAliasRegistry.html" title="class in org.springframework.core">SimpleAliasRegistry</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name to check for aliases
<DT><B>Returns:</B><DD>the aliases, or an empty array if none<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#getBean(java.lang.String)"><CODE>BeanFactory.getBean(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getParentBeanFactory()"><!-- --></A><H3>
getParentBeanFactory</H3>
<PRE>
public <A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A> <B>getParentBeanFactory</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html#getParentBeanFactory()">HierarchicalBeanFactory</A></CODE></B></DD>
<DD>Return the parent bean factory, or <code>null</code> if there is none.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html#getParentBeanFactory()">getParentBeanFactory</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html" title="interface in org.springframework.beans.factory">HierarchicalBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="containsLocalBean(java.lang.String)"><!-- --></A><H3>
containsLocalBean</H3>
<PRE>
public boolean <B>containsLocalBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html#containsLocalBean(java.lang.String)">HierarchicalBeanFactory</A></CODE></B></DD>
<DD>Return whether the local bean factory contains a bean of the given name,
 ignoring beans defined in ancestor contexts.
 <p>This is an alternative to <code>containsBean</code>, ignoring a bean
 of the given name from an ancestor bean factory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html#containsLocalBean(java.lang.String)">containsLocalBean</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html" title="interface in org.springframework.beans.factory">HierarchicalBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to query
<DT><B>Returns:</B><DD>whether a bean with the given name is defined in the local factory<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html#containsBean(java.lang.String)"><CODE>BeanFactory.containsBean(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setParentBeanFactory(org.springframework.beans.factory.BeanFactory)"><!-- --></A><H3>
setParentBeanFactory</H3>
<PRE>
public void <B>setParentBeanFactory</B>(<A HREF="../../../../../org/springframework/beans/factory/BeanFactory.html" title="interface in org.springframework.beans.factory">BeanFactory</A>&nbsp;parentBeanFactory)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setParentBeanFactory(org.springframework.beans.factory.BeanFactory)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Set the parent of this bean factory.
 <p>Note that the parent cannot be changed: It should only be set outside
 a constructor if it isn't available at the time of factory instantiation.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setParentBeanFactory(org.springframework.beans.factory.BeanFactory)">setParentBeanFactory</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>parentBeanFactory</CODE> - the parent BeanFactory<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/HierarchicalBeanFactory.html#getParentBeanFactory()"><CODE>HierarchicalBeanFactory.getParentBeanFactory()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setBeanClassLoader(java.lang.ClassLoader)"><!-- --></A><H3>
setBeanClassLoader</H3>
<PRE>
public void <B>setBeanClassLoader</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A>&nbsp;beanClassLoader)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setBeanClassLoader(java.lang.ClassLoader)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Set the class loader to use for loading bean classes.
 Default is the thread context class loader.
 <p>Note that this class loader will only apply to bean definitions
 that do not carry a resolved bean class yet. This is the case as of
 Spring 2.0 by default: Bean definitions only carry bean class names,
 to be resolved once the factory processes the bean definition.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setBeanClassLoader(java.lang.ClassLoader)">setBeanClassLoader</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanClassLoader</CODE> - the class loader to use,
 or <code>null</code> to suggest the default class loader</DL>
</DD>
</DL>
<HR>

<A NAME="getBeanClassLoader()"><!-- --></A><H3>
getBeanClassLoader</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A> <B>getBeanClassLoader</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getBeanClassLoader()">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Return this factory's class loader for loading bean classes.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getBeanClassLoader()">getBeanClassLoader</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setTempClassLoader(java.lang.ClassLoader)"><!-- --></A><H3>
setTempClassLoader</H3>
<PRE>
public void <B>setTempClassLoader</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A>&nbsp;tempClassLoader)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setTempClassLoader(java.lang.ClassLoader)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Specify a temporary ClassLoader to use for type matching purposes.
 Default is none, simply using the standard bean ClassLoader.
 <p>A temporary ClassLoader is usually just specified if
 <i>load-time weaving</i> is involved, to make sure that actual bean
 classes are loaded as lazily as possible. The temporary loader is
 then removed once the BeanFactory completes its bootstrap phase.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setTempClassLoader(java.lang.ClassLoader)">setTempClassLoader</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getTempClassLoader()"><!-- --></A><H3>
getTempClassLoader</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A> <B>getTempClassLoader</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getTempClassLoader()">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Return the temporary ClassLoader to use for type matching purposes,
 if any.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getTempClassLoader()">getTempClassLoader</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setCacheBeanMetadata(boolean)"><!-- --></A><H3>
setCacheBeanMetadata</H3>
<PRE>
public void <B>setCacheBeanMetadata</B>(boolean&nbsp;cacheBeanMetadata)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setCacheBeanMetadata(boolean)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Set whether to cache bean metadata such as given bean definitions
 (in merged fashion) and resolved bean classes. Default is on.
 <p>Turn this flag off to enable hot-refreshing of bean definition objects
 and in particular bean classes. If this flag is off, any creation of a bean
 instance will re-query the bean class loader for newly resolved classes.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setCacheBeanMetadata(boolean)">setCacheBeanMetadata</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isCacheBeanMetadata()"><!-- --></A><H3>
isCacheBeanMetadata</H3>
<PRE>
public boolean <B>isCacheBeanMetadata</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#isCacheBeanMetadata()">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Return whether to cache bean metadata such as given bean definitions
 (in merged fashion) and resolved bean classes.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#isCacheBeanMetadata()">isCacheBeanMetadata</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver)"><!-- --></A><H3>
setBeanExpressionResolver</H3>
<PRE>
public void <B>setBeanExpressionResolver</B>(<A HREF="../../../../../org/springframework/beans/factory/config/BeanExpressionResolver.html" title="interface in org.springframework.beans.factory.config">BeanExpressionResolver</A>&nbsp;resolver)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Specify the resolution strategy for expressions in bean definition values.
 <p>There is no expression support active in a BeanFactory by default.
 An ApplicationContext will typically set a standard expression strategy
 here, supporting "#{...}" expressions in a Unified EL compatible style.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver)">setBeanExpressionResolver</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getBeanExpressionResolver()"><!-- --></A><H3>
getBeanExpressionResolver</H3>
<PRE>
public <A HREF="../../../../../org/springframework/beans/factory/config/BeanExpressionResolver.html" title="interface in org.springframework.beans.factory.config">BeanExpressionResolver</A> <B>getBeanExpressionResolver</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getBeanExpressionResolver()">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Return the resolution strategy for expressions in bean definition values.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getBeanExpressionResolver()">getBeanExpressionResolver</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setConversionService(org.springframework.core.convert.ConversionService)"><!-- --></A><H3>
setConversionService</H3>
<PRE>
public void <B>setConversionService</B>(<A HREF="../../../../../org/springframework/core/convert/ConversionService.html" title="interface in org.springframework.core.convert">ConversionService</A>&nbsp;conversionService)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setConversionService(org.springframework.core.convert.ConversionService)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Specify a Spring 3.0 ConversionService to use for converting
 property values, as an alternative to JavaBeans PropertyEditors.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setConversionService(org.springframework.core.convert.ConversionService)">setConversionService</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getConversionService()"><!-- --></A><H3>
getConversionService</H3>
<PRE>
public <A HREF="../../../../../org/springframework/core/convert/ConversionService.html" title="interface in org.springframework.core.convert">ConversionService</A> <B>getConversionService</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getConversionService()">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Return the associated ConversionService, if any.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getConversionService()">getConversionService</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)"><!-- --></A><H3>
addPropertyEditorRegistrar</H3>
<PRE>
public void <B>addPropertyEditorRegistrar</B>(<A HREF="../../../../../org/springframework/beans/PropertyEditorRegistrar.html" title="interface in org.springframework.beans">PropertyEditorRegistrar</A>&nbsp;registrar)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Add a PropertyEditorRegistrar to be applied to all bean creation processes.
 <p>Such a registrar creates new PropertyEditor instances and registers them
 on the given registry, fresh for each bean creation attempt. This avoids
 the need for synchronization on custom editors; hence, it is generally
 preferable to use this method instead of <A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerCustomEditor(java.lang.Class, java.lang.Class)"><CODE>ConfigurableBeanFactory.registerCustomEditor(java.lang.Class, java.lang.Class<? extends java.beans.PropertyEditor>)</CODE></A>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)">addPropertyEditorRegistrar</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>registrar</CODE> - the PropertyEditorRegistrar to register</DL>
</DD>
</DL>
<HR>

<A NAME="getPropertyEditorRegistrars()"><!-- --></A><H3>
getPropertyEditorRegistrars</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true" title="class or interface in java.util">Set</A>&lt;<A HREF="../../../../../org/springframework/beans/PropertyEditorRegistrar.html" title="interface in org.springframework.beans">PropertyEditorRegistrar</A>&gt; <B>getPropertyEditorRegistrars</B>()</PRE>
<DL>
<DD>Return the set of PropertyEditorRegistrars.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="registerCustomEditor(java.lang.Class, java.lang.Class)"><!-- --></A><H3>
registerCustomEditor</H3>
<PRE>
public void <B>registerCustomEditor</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;requiredType,
                                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;? extends <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans">PropertyEditor</A>&gt;&nbsp;propertyEditorClass)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerCustomEditor(java.lang.Class, java.lang.Class)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Register the given custom property editor for all properties of the
 given type. To be invoked during factory configuration.
 <p>Note that this method will register a shared custom editor instance;
 access to that instance will be synchronized for thread-safety. It is
 generally preferable to use <A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)"><CODE>ConfigurableBeanFactory.addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)</CODE></A> instead
 of this method, to avoid for the need for synchronization on custom editors.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerCustomEditor(java.lang.Class, java.lang.Class)">registerCustomEditor</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>requiredType</CODE> - type of the property<DD><CODE>propertyEditorClass</CODE> - the <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans"><CODE>PropertyEditor</CODE></A> class to register</DL>
</DD>
</DL>
<HR>

<A NAME="copyRegisteredEditorsTo(org.springframework.beans.PropertyEditorRegistry)"><!-- --></A><H3>
copyRegisteredEditorsTo</H3>
<PRE>
public void <B>copyRegisteredEditorsTo</B>(<A HREF="../../../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A>&nbsp;registry)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#copyRegisteredEditorsTo(org.springframework.beans.PropertyEditorRegistry)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Initialize the given PropertyEditorRegistry with the custom editors
 that have been registered with this BeanFactory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#copyRegisteredEditorsTo(org.springframework.beans.PropertyEditorRegistry)">copyRegisteredEditorsTo</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>registry</CODE> - the PropertyEditorRegistry to initialize</DL>
</DD>
</DL>
<HR>

<A NAME="getCustomEditors()"><!-- --></A><H3>
getCustomEditors</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;? extends <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans">PropertyEditor</A>&gt;&gt; <B>getCustomEditors</B>()</PRE>
<DL>
<DD>Return the map of custom editors, with Classes as keys and PropertyEditor classes as values.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setTypeConverter(org.springframework.beans.TypeConverter)"><!-- --></A><H3>
setTypeConverter</H3>
<PRE>
public void <B>setTypeConverter</B>(<A HREF="../../../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A>&nbsp;typeConverter)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setTypeConverter(org.springframework.beans.TypeConverter)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Set a custom type converter that this BeanFactory should use for converting
 bean property values, constructor argument values, etc.
 <p>This will override the default PropertyEditor mechanism and hence make
 any custom editors or custom editor registrars irrelevant.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#setTypeConverter(org.springframework.beans.TypeConverter)">setTypeConverter</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)"><CODE>ConfigurableBeanFactory.addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerCustomEditor(java.lang.Class, java.lang.Class)"><CODE>ConfigurableBeanFactory.registerCustomEditor(java.lang.Class, java.lang.Class<? extends java.beans.PropertyEditor>)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getCustomTypeConverter()"><!-- --></A><H3>
getCustomTypeConverter</H3>
<PRE>
protected <A HREF="../../../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A> <B>getCustomTypeConverter</B>()</PRE>
<DL>
<DD>Return the custom TypeConverter to use, if any.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the custom TypeConverter, or <code>null</code> if none specified</DL>
</DD>
</DL>
<HR>

<A NAME="getTypeConverter()"><!-- --></A><H3>
getTypeConverter</H3>
<PRE>
public <A HREF="../../../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A> <B>getTypeConverter</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getTypeConverter()">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Obtain a type converter as used by this BeanFactory. This may be a fresh
 instance for each call, since TypeConverters are usually <i>not</i> thread-safe.
 <p>If the default PropertyEditor mechanism is active, the returned
 TypeConverter will be aware of all custom editors that have been registered.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getTypeConverter()">getTypeConverter</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="addEmbeddedValueResolver(org.springframework.util.StringValueResolver)"><!-- --></A><H3>
addEmbeddedValueResolver</H3>
<PRE>
public void <B>addEmbeddedValueResolver</B>(<A HREF="../../../../../org/springframework/util/StringValueResolver.html" title="interface in org.springframework.util">StringValueResolver</A>&nbsp;valueResolver)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addEmbeddedValueResolver(org.springframework.util.StringValueResolver)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Add a String resolver for embedded values such as annotation attributes.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addEmbeddedValueResolver(org.springframework.util.StringValueResolver)">addEmbeddedValueResolver</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>valueResolver</CODE> - the String resolver to apply to embedded values</DL>
</DD>
</DL>
<HR>

<A NAME="resolveEmbeddedValue(java.lang.String)"><!-- --></A><H3>
resolveEmbeddedValue</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>resolveEmbeddedValue</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;value)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#resolveEmbeddedValue(java.lang.String)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Resolve the given embedded value, e.g. an annotation attribute.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#resolveEmbeddedValue(java.lang.String)">resolveEmbeddedValue</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - the value to resolve
<DT><B>Returns:</B><DD>the resolved value (may be the original value as-is)</DL>
</DD>
</DL>
<HR>

<A NAME="addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)"><!-- --></A><H3>
addBeanPostProcessor</H3>
<PRE>
public void <B>addBeanPostProcessor</B>(<A HREF="../../../../../org/springframework/beans/factory/config/BeanPostProcessor.html" title="interface in org.springframework.beans.factory.config">BeanPostProcessor</A>&nbsp;beanPostProcessor)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Add a new BeanPostProcessor that will get applied to beans created
 by this factory. To be invoked during factory configuration.
 <p>Note: Post-processors submitted here will be applied in the order of
 registration; any ordering semantics expressed through implementing the
 <A HREF="../../../../../org/springframework/core/Ordered.html" title="interface in org.springframework.core"><CODE>Ordered</CODE></A> interface will be ignored. Note
 that autodetected post-processors (e.g. as beans in an ApplicationContext)
 will always be applied after programmatically registered ones.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)">addBeanPostProcessor</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanPostProcessor</CODE> - the post-processor to register</DL>
</DD>
</DL>
<HR>

<A NAME="getBeanPostProcessorCount()"><!-- --></A><H3>
getBeanPostProcessorCount</H3>
<PRE>
public int <B>getBeanPostProcessorCount</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getBeanPostProcessorCount()">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Return the current number of registered BeanPostProcessors, if any.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getBeanPostProcessorCount()">getBeanPostProcessorCount</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getBeanPostProcessors()"><!-- --></A><H3>
getBeanPostProcessors</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../../org/springframework/beans/factory/config/BeanPostProcessor.html" title="interface in org.springframework.beans.factory.config">BeanPostProcessor</A>&gt; <B>getBeanPostProcessors</B>()</PRE>
<DL>
<DD>Return the list of BeanPostProcessors that will get applied
 to beans created with this factory.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="hasInstantiationAwareBeanPostProcessors()"><!-- --></A><H3>
hasInstantiationAwareBeanPostProcessors</H3>
<PRE>
protected boolean <B>hasInstantiationAwareBeanPostProcessors</B>()</PRE>
<DL>
<DD>Return whether this factory holds a InstantiationAwareBeanPostProcessor
 that will get applied to singleton beans on shutdown.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)"><CODE>addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/config/InstantiationAwareBeanPostProcessor.html" title="interface in org.springframework.beans.factory.config"><CODE>InstantiationAwareBeanPostProcessor</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="hasDestructionAwareBeanPostProcessors()"><!-- --></A><H3>
hasDestructionAwareBeanPostProcessors</H3>
<PRE>
protected boolean <B>hasDestructionAwareBeanPostProcessors</B>()</PRE>
<DL>
<DD>Return whether this factory holds a DestructionAwareBeanPostProcessor
 that will get applied to singleton beans on shutdown.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)"><CODE>addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/config/DestructionAwareBeanPostProcessor.html" title="interface in org.springframework.beans.factory.config"><CODE>DestructionAwareBeanPostProcessor</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)"><!-- --></A><H3>
registerScope</H3>
<PRE>
public void <B>registerScope</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;scopeName,
                          <A HREF="../../../../../org/springframework/beans/factory/config/Scope.html" title="interface in org.springframework.beans.factory.config">Scope</A>&nbsp;scope)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Register the given scope, backed by the given Scope implementation.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)">registerScope</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>scopeName</CODE> - the scope identifier<DD><CODE>scope</CODE> - the backing Scope implementation</DL>
</DD>
</DL>
<HR>

<A NAME="getRegisteredScopeNames()"><!-- --></A><H3>
getRegisteredScopeNames</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getRegisteredScopeNames</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getRegisteredScopeNames()">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Return the names of all currently registered scopes.
 <p>This will only return the names of explicitly registered scopes.
 Built-in scopes such as "singleton" and "prototype" won't be exposed.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getRegisteredScopeNames()">getRegisteredScopeNames</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the array of scope names, or an empty array if none<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)"><CODE>ConfigurableBeanFactory.registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getRegisteredScope(java.lang.String)"><!-- --></A><H3>
getRegisteredScope</H3>
<PRE>
public <A HREF="../../../../../org/springframework/beans/factory/config/Scope.html" title="interface in org.springframework.beans.factory.config">Scope</A> <B>getRegisteredScope</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;scopeName)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getRegisteredScope(java.lang.String)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Return the Scope implementation for the given scope name, if any.
 <p>This will only return explicitly registered scopes.
 Built-in scopes such as "singleton" and "prototype" won't be exposed.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getRegisteredScope(java.lang.String)">getRegisteredScope</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>scopeName</CODE> - the name of the scope
<DT><B>Returns:</B><DD>the registered Scope implementation, or <code>null</code> if none<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)"><CODE>ConfigurableBeanFactory.registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setSecurityContextProvider(org.springframework.beans.factory.support.SecurityContextProvider)"><!-- --></A><H3>
setSecurityContextProvider</H3>
<PRE>
public void <B>setSecurityContextProvider</B>(<A HREF="../../../../../org/springframework/beans/factory/support/SecurityContextProvider.html" title="interface in org.springframework.beans.factory.support">SecurityContextProvider</A>&nbsp;securityProvider)</PRE>
<DL>
<DD>Set the security context provider for this bean factory. If a security manager
 is set, interaction with the user code will be executed using the privileged
 of the provided security context.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getAccessControlContext()"><!-- --></A><H3>
getAccessControlContext</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/security/AccessControlContext.html?is-external=true" title="class or interface in java.security">AccessControlContext</A> <B>getAccessControlContext</B>()</PRE>
<DL>
<DD>Delegate the creation of the access control context to the
 <A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#setSecurityContextProvider(org.springframework.beans.factory.support.SecurityContextProvider)"><CODE>SecurityContextProvider</CODE></A>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getAccessControlContext()">getAccessControlContext</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/support/FactoryBeanRegistrySupport.html#getAccessControlContext()">getAccessControlContext</A></CODE> in class <CODE><A HREF="../../../../../org/springframework/beans/factory/support/FactoryBeanRegistrySupport.html" title="class in org.springframework.beans.factory.support">FactoryBeanRegistrySupport</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the applicable AccessControlContext (never <code>null</code>)<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/security/AccessController.html?is-external=true#getContext()" title="class or interface in java.security"><CODE>AccessController.getContext()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)"><!-- --></A><H3>
copyConfigurationFrom</H3>
<PRE>
public void <B>copyConfigurationFrom</B>(<A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A>&nbsp;otherFactory)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Copy all relevant configuration from the given other factory.
 <p>Should include all standard configuration settings as well as
 BeanPostProcessors, Scopes, and factory-specific internal settings.
 Should not include any metadata of actual bean definitions,
 such as BeanDefinition objects and bean name aliases.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)">copyConfigurationFrom</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>otherFactory</CODE> - the other BeanFactory to copy from</DL>
</DD>
</DL>
<HR>

<A NAME="getMergedBeanDefinition(java.lang.String)"><!-- --></A><H3>
getMergedBeanDefinition</H3>
<PRE>
public <A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A> <B>getMergedBeanDefinition</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
                                       throws <A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD>Return a 'merged' BeanDefinition for the given bean name,
 merging a child bean definition with its parent if necessary.
 <p>This <code>getMergedBeanDefinition</code> considers bean definition
 in ancestors as well.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#getMergedBeanDefinition(java.lang.String)">getMergedBeanDefinition</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to retrieve the merged definition for
 (may be an alias)
<DT><B>Returns:</B><DD>a (potentially merged) RootBeanDefinition for the given bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanDefinitionStoreException.html" title="class in org.springframework.beans.factory">BeanDefinitionStoreException</A></CODE> - in case of an invalid bean definition
<DD><CODE><A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="isFactoryBean(java.lang.String)"><!-- --></A><H3>
isFactoryBean</H3>
<PRE>
public boolean <B>isFactoryBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
                      throws <A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#isFactoryBean(java.lang.String)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Determine whether the bean with the given name is a FactoryBean.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#isFactoryBean(java.lang.String)">isFactoryBean</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the bean to check
<DT><B>Returns:</B><DD>whether the bean is a FactoryBean
 (<code>false</code> means the bean exists but is not a FactoryBean)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name</DL>
</DD>
</DL>
<HR>

<A NAME="beforePrototypeCreation(java.lang.String)"><!-- --></A><H3>
beforePrototypeCreation</H3>
<PRE>
protected void <B>beforePrototypeCreation</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD>Callback before prototype creation.
 <p>The default implementation register the prototype as currently in creation.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the prototype about to be created<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#isPrototypeCurrentlyInCreation(java.lang.String)"><CODE>isPrototypeCurrentlyInCreation(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="afterPrototypeCreation(java.lang.String)"><!-- --></A><H3>
afterPrototypeCreation</H3>
<PRE>
protected void <B>afterPrototypeCreation</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD>Callback after prototype creation.
 <p>The default implementation marks the prototype as not in creation anymore.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the prototype that has been created<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#isPrototypeCurrentlyInCreation(java.lang.String)"><CODE>isPrototypeCurrentlyInCreation(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isPrototypeCurrentlyInCreation(java.lang.String)"><!-- --></A><H3>
isPrototypeCurrentlyInCreation</H3>
<PRE>
protected final boolean <B>isPrototypeCurrentlyInCreation</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD>Return whether the specified prototype bean is currently in creation
 (within the current thread).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean</DL>
</DD>
</DL>
<HR>

<A NAME="isCurrentlyInCreation(java.lang.String)"><!-- --></A><H3>
isCurrentlyInCreation</H3>
<PRE>
public boolean <B>isCurrentlyInCreation</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#isCurrentlyInCreation(java.lang.String)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Determine whether the specified bean is currently in creation.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#isCurrentlyInCreation(java.lang.String)">isCurrentlyInCreation</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean
<DT><B>Returns:</B><DD>whether the bean is currently in creation</DL>
</DD>
</DL>
<HR>

<A NAME="destroyBean(java.lang.String, java.lang.Object)"><!-- --></A><H3>
destroyBean</H3>
<PRE>
public void <B>destroyBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;beanInstance)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#destroyBean(java.lang.String, java.lang.Object)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Destroy the given bean instance (usually a prototype instance
 obtained from this factory) according to its bean definition.
 <p>Any exception that arises during destruction should be caught
 and logged instead of propagated to the caller of this method.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#destroyBean(java.lang.String, java.lang.Object)">destroyBean</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean definition<DD><CODE>beanInstance</CODE> - the bean instance to destroy</DL>
</DD>
</DL>
<HR>

<A NAME="destroyBean(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)"><!-- --></A><H3>
destroyBean</H3>
<PRE>
protected void <B>destroyBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;beanInstance,
                           <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd)</PRE>
<DL>
<DD>Destroy the given bean instance (usually a prototype instance
 obtained from this factory) according to the given bean definition.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean definition<DD><CODE>beanInstance</CODE> - the bean instance to destroy<DD><CODE>mbd</CODE> - the merged bean definition</DL>
</DD>
</DL>
<HR>

<A NAME="destroyScopedBean(java.lang.String)"><!-- --></A><H3>
destroyScopedBean</H3>
<PRE>
public void <B>destroyScopedBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#destroyScopedBean(java.lang.String)">ConfigurableBeanFactory</A></CODE></B></DD>
<DD>Destroy the specified scoped bean in the current target scope, if any.
 <p>Any exception that arises during destruction should be caught
 and logged instead of propagated to the caller of this method.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html#destroyScopedBean(java.lang.String)">destroyScopedBean</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableBeanFactory.html" title="interface in org.springframework.beans.factory.config">ConfigurableBeanFactory</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the scoped bean</DL>
</DD>
</DL>
<HR>

<A NAME="transformedBeanName(java.lang.String)"><!-- --></A><H3>
transformedBeanName</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>transformedBeanName</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
<DL>
<DD>Return the bean name, stripping out the factory dereference prefix if necessary,
 and resolving aliases to canonical names.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the user-specified name
<DT><B>Returns:</B><DD>the transformed bean name</DL>
</DD>
</DL>
<HR>

<A NAME="originalBeanName(java.lang.String)"><!-- --></A><H3>
originalBeanName</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>originalBeanName</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
<DL>
<DD>Determine the original bean name, resolving locally defined aliases to canonical names.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the user-specified name
<DT><B>Returns:</B><DD>the original bean name</DL>
</DD>
</DL>
<HR>

<A NAME="initBeanWrapper(org.springframework.beans.BeanWrapper)"><!-- --></A><H3>
initBeanWrapper</H3>
<PRE>
protected void <B>initBeanWrapper</B>(<A HREF="../../../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans">BeanWrapper</A>&nbsp;bw)</PRE>
<DL>
<DD>Initialize the given BeanWrapper with the custom editors registered
 with this factory. To be called for BeanWrappers that will create
 and populate bean instances.
 <p>The default implementation delegates to <A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#registerCustomEditors(org.springframework.beans.PropertyEditorRegistry)"><CODE>registerCustomEditors(org.springframework.beans.PropertyEditorRegistry)</CODE></A>.
 Can be overridden in subclasses.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>bw</CODE> - the BeanWrapper to initialize</DL>
</DD>
</DL>
<HR>

<A NAME="registerCustomEditors(org.springframework.beans.PropertyEditorRegistry)"><!-- --></A><H3>
registerCustomEditors</H3>
<PRE>
protected void <B>registerCustomEditors</B>(<A HREF="../../../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A>&nbsp;registry)</PRE>
<DL>
<DD>Initialize the given PropertyEditorRegistry with the custom editors
 that have been registered with this BeanFactory.
 <p>To be called for BeanWrappers that will create and populate bean
 instances, and for SimpleTypeConverter used for constructor argument
 and factory method type conversion.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>registry</CODE> - the PropertyEditorRegistry to initialize</DL>
</DD>
</DL>
<HR>

<A NAME="getMergedLocalBeanDefinition(java.lang.String)"><!-- --></A><H3>
getMergedLocalBeanDefinition</H3>
<PRE>
protected <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A> <B>getMergedLocalBeanDefinition</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)
                                                   throws <A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD>Return a merged RootBeanDefinition, traversing the parent bean definition
 if the specified bean corresponds to a child bean definition.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean to retrieve the merged definition for
<DT><B>Returns:</B><DD>a (potentially merged) RootBeanDefinition for the given bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if there is no bean with the given name
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanDefinitionStoreException.html" title="class in org.springframework.beans.factory">BeanDefinitionStoreException</A></CODE> - in case of an invalid bean definition
<DD><CODE><A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getMergedBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition)"><!-- --></A><H3>
getMergedBeanDefinition</H3>
<PRE>
protected <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A> <B>getMergedBeanDefinition</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                                                     <A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A>&nbsp;bd)
                                              throws <A HREF="../../../../../org/springframework/beans/factory/BeanDefinitionStoreException.html" title="class in org.springframework.beans.factory">BeanDefinitionStoreException</A></PRE>
<DL>
<DD>Return a RootBeanDefinition for the given top-level bean, by merging with
 the parent if the given bean's definition is a child bean definition.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean definition<DD><CODE>bd</CODE> - the original bean definition (Root/ChildBeanDefinition)
<DT><B>Returns:</B><DD>a (potentially merged) RootBeanDefinition for the given bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanDefinitionStoreException.html" title="class in org.springframework.beans.factory">BeanDefinitionStoreException</A></CODE> - in case of an invalid bean definition</DL>
</DD>
</DL>
<HR>

<A NAME="getMergedBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.config.BeanDefinition)"><!-- --></A><H3>
getMergedBeanDefinition</H3>
<PRE>
protected <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A> <B>getMergedBeanDefinition</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                                                     <A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A>&nbsp;bd,
                                                     <A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A>&nbsp;containingBd)
                                              throws <A HREF="../../../../../org/springframework/beans/factory/BeanDefinitionStoreException.html" title="class in org.springframework.beans.factory">BeanDefinitionStoreException</A></PRE>
<DL>
<DD>Return a RootBeanDefinition for the given bean, by merging with the
 parent if the given bean's definition is a child bean definition.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean definition<DD><CODE>bd</CODE> - the original bean definition (Root/ChildBeanDefinition)<DD><CODE>containingBd</CODE> - the containing bean definition in case of inner bean,
 or <code>null</code> in case of a top-level bean
<DT><B>Returns:</B><DD>a (potentially merged) RootBeanDefinition for the given bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanDefinitionStoreException.html" title="class in org.springframework.beans.factory">BeanDefinitionStoreException</A></CODE> - in case of an invalid bean definition</DL>
</DD>
</DL>
<HR>

<A NAME="checkMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, java.lang.Object[])"><!-- --></A><H3>
checkMergedBeanDefinition</H3>
<PRE>
protected void <B>checkMergedBeanDefinition</B>(<A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd,
                                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args)
                                  throws <A HREF="../../../../../org/springframework/beans/factory/BeanDefinitionStoreException.html" title="class in org.springframework.beans.factory">BeanDefinitionStoreException</A></PRE>
<DL>
<DD>Check the given merged bean definition,
 potentially throwing validation exceptions.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>mbd</CODE> - the merged bean definition to check<DD><CODE>beanName</CODE> - the name of the bean<DD><CODE>args</CODE> - the arguments for bean creation, if any
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanDefinitionStoreException.html" title="class in org.springframework.beans.factory">BeanDefinitionStoreException</A></CODE> - in case of validation failure</DL>
</DD>
</DL>
<HR>

<A NAME="clearMergedBeanDefinition(java.lang.String)"><!-- --></A><H3>
clearMergedBeanDefinition</H3>
<PRE>
protected void <B>clearMergedBeanDefinition</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD>Remove the merged bean definition for the specified bean,
 recreating it on next access.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the bean name to clear the merged definition for</DL>
</DD>
</DL>
<HR>

<A NAME="resolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, java.lang.Class...)"><!-- --></A><H3>
resolveBeanClass</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A> <B>resolveBeanClass</B>(<A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd,
                                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>...&nbsp;typesToMatch)
                          throws <A HREF="../../../../../org/springframework/beans/factory/CannotLoadBeanClassException.html" title="class in org.springframework.beans.factory">CannotLoadBeanClassException</A></PRE>
<DL>
<DD>Resolve the bean class for the specified bean definition,
 resolving a bean class name into a Class reference (if necessary)
 and storing the resolved Class in the bean definition for further use.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>mbd</CODE> - the merged bean definition to determine the class for<DD><CODE>beanName</CODE> - the name of the bean (for error handling purposes)<DD><CODE>typesToMatch</CODE> - the types to match in case of internal type matching purposes
 (also signals that the returned <code>Class</code> will never be exposed to application code)
<DT><B>Returns:</B><DD>the resolved bean class (or <code>null</code> if none)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/CannotLoadBeanClassException.html" title="class in org.springframework.beans.factory">CannotLoadBeanClassException</A></CODE> - if we failed to load the class</DL>
</DD>
</DL>
<HR>

<A NAME="evaluateBeanDefinitionString(java.lang.String, org.springframework.beans.factory.config.BeanDefinition)"><!-- --></A><H3>
evaluateBeanDefinitionString</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>evaluateBeanDefinitionString</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;value,
                                              <A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A>&nbsp;beanDefinition)</PRE>
<DL>
<DD>Evaluate the given String as contained in a bean definition,
 potentially resolving it as an expression.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - the value to check<DD><CODE>beanDefinition</CODE> - the bean definition that the value comes from
<DT><B>Returns:</B><DD>the resolved value<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver)"><CODE>setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="predictBeanType(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class...)"><!-- --></A><H3>
predictBeanType</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A> <B>predictBeanType</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                                <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>...&nbsp;typesToMatch)</PRE>
<DL>
<DD>Predict the eventual bean type (of the processed bean instance) for the
 specified bean. Called by <A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getType(java.lang.String)"><CODE>getType(java.lang.String)</CODE></A> and <A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#isTypeMatch(java.lang.String, java.lang.Class)"><CODE>isTypeMatch(java.lang.String, java.lang.Class)</CODE></A>.
 Does not need to handle FactoryBeans specifically, since it is only
 supposed to operate on the raw bean type.
 <p>This implementation is simplistic in that it is not able to
 handle factory methods and InstantiationAwareBeanPostProcessors.
 It only predicts the bean type correctly for a standard bean.
 To be overridden in subclasses, applying more sophisticated type detection.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean<DD><CODE>mbd</CODE> - the merged bean definition to determine the type for<DD><CODE>typesToMatch</CODE> - the types to match in case of internal type matching purposes
 (also signals that the returned <code>Class</code> will never be exposed to application code)
<DT><B>Returns:</B><DD>the type of the bean, or <code>null</code> if not predictable</DL>
</DD>
</DL>
<HR>

<A NAME="isFactoryBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)"><!-- --></A><H3>
isFactoryBean</H3>
<PRE>
protected boolean <B>isFactoryBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                                <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd)</PRE>
<DL>
<DD>Check whether the given bean is defined as a <A HREF="../../../../../org/springframework/beans/factory/FactoryBean.html" title="interface in org.springframework.beans.factory"><CODE>FactoryBean</CODE></A>.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean<DD><CODE>mbd</CODE> - the corresponding bean definition</DL>
</DD>
</DL>
<HR>

<A NAME="getTypeForFactoryBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)"><!-- --></A><H3>
getTypeForFactoryBean</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A> <B>getTypeForFactoryBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                                      <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd)</PRE>
<DL>
<DD>Determine the bean type for the given FactoryBean definition, as far as possible.
 Only called if there is no singleton instance registered for the target bean already.
 <p>The default implementation creates the FactoryBean via <code>getBean</code>
 to call its <code>getObjectType</code> method. Subclasses are encouraged to optimize
 this, typically by just instantiating the FactoryBean but not populating it yet,
 trying whether its <code>getObjectType</code> method already returns a type.
 If no type found, a full FactoryBean creation as performed by this implementation
 should be used as fallback.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean<DD><CODE>mbd</CODE> - the merged bean definition for the bean
<DT><B>Returns:</B><DD>the type for the bean if determinable, or <code>null</code> else<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/FactoryBean.html#getObjectType()"><CODE>FactoryBean.getObjectType()</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#getBean(java.lang.String)"><CODE>getBean(String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="markBeanAsCreated(java.lang.String)"><!-- --></A><H3>
markBeanAsCreated</H3>
<PRE>
protected void <B>markBeanAsCreated</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD>Mark the specified bean as already created (or about to be created).
 <p>This allows the bean factory to optimize its caching for repeated
 creation of the specified bean.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean</DL>
</DD>
</DL>
<HR>

<A NAME="isBeanEligibleForMetadataCaching(java.lang.String)"><!-- --></A><H3>
isBeanEligibleForMetadataCaching</H3>
<PRE>
protected boolean <B>isBeanEligibleForMetadataCaching</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD>Determine whether the specified bean is eligible for having
 its bean definition metadata cached.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean
<DT><B>Returns:</B><DD><code>true</code> if the bean's metadata may be cached
 at this point already</DL>
</DD>
</DL>
<HR>

<A NAME="removeSingletonIfCreatedForTypeCheckOnly(java.lang.String)"><!-- --></A><H3>
removeSingletonIfCreatedForTypeCheckOnly</H3>
<PRE>
protected boolean <B>removeSingletonIfCreatedForTypeCheckOnly</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD>Remove the singleton instance (if any) for the given bean name,
 but only if it hasn't been used for other purposes than type checking.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean
<DT><B>Returns:</B><DD><code>true</code> if actually removed, <code>false</code> otherwise</DL>
</DD>
</DL>
<HR>

<A NAME="getObjectForBeanInstance(java.lang.Object, java.lang.String, java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)"><!-- --></A><H3>
getObjectForBeanInstance</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>getObjectForBeanInstance</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;beanInstance,
                                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name,
                                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                                          <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd)</PRE>
<DL>
<DD>Get the object for the given bean instance, either the bean
 instance itself or its created object in case of a FactoryBean.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanInstance</CODE> - the shared bean instance<DD><CODE>name</CODE> - name that may include factory dereference prefix<DD><CODE>beanName</CODE> - the canonical bean name<DD><CODE>mbd</CODE> - the merged bean definition
<DT><B>Returns:</B><DD>the object to expose for the bean</DL>
</DD>
</DL>
<HR>

<A NAME="isBeanNameInUse(java.lang.String)"><!-- --></A><H3>
isBeanNameInUse</H3>
<PRE>
public boolean <B>isBeanNameInUse</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD>Determine whether the given bean name is already in use within this factory,
 i.e. whether there is a local bean or alias registered under this name or
 an inner bean created with this name.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name to check</DL>
</DD>
</DL>
<HR>

<A NAME="requiresDestruction(java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)"><!-- --></A><H3>
requiresDestruction</H3>
<PRE>
protected boolean <B>requiresDestruction</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;bean,
                                      <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd)</PRE>
<DL>
<DD>Determine whether the given bean requires destruction on shutdown.
 <p>The default implementation checks the DisposableBean interface as well as
 a specified destroy method and registered DestructionAwareBeanPostProcessors.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>bean</CODE> - the bean instance to check<DD><CODE>mbd</CODE> - the corresponding bean definition<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/DisposableBean.html" title="interface in org.springframework.beans.factory"><CODE>DisposableBean</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanDefinition.html#getDestroyMethodName()"><CODE>AbstractBeanDefinition.getDestroyMethodName()</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/config/DestructionAwareBeanPostProcessor.html" title="interface in org.springframework.beans.factory.config"><CODE>DestructionAwareBeanPostProcessor</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="registerDisposableBeanIfNecessary(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)"><!-- --></A><H3>
registerDisposableBeanIfNecessary</H3>
<PRE>
protected void <B>registerDisposableBeanIfNecessary</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                                                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;bean,
                                                 <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd)</PRE>
<DL>
<DD>Add the given bean to the list of disposable beans in this factory,
 registering its DisposableBean interface and/or the given destroy method
 to be called on factory shutdown (if applicable). Only applies to singletons.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean<DD><CODE>bean</CODE> - the bean instance<DD><CODE>mbd</CODE> - the bean definition for the bean<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanDefinition.html#isSingleton()"><CODE>AbstractBeanDefinition.isSingleton()</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanDefinition.html#getDependsOn()"><CODE>AbstractBeanDefinition.getDependsOn()</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#registerDisposableBean(java.lang.String, org.springframework.beans.factory.DisposableBean)"><CODE>DefaultSingletonBeanRegistry.registerDisposableBean(java.lang.String, org.springframework.beans.factory.DisposableBean)</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html#registerDependentBean(java.lang.String, java.lang.String)"><CODE>DefaultSingletonBeanRegistry.registerDependentBean(java.lang.String, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="containsBeanDefinition(java.lang.String)"><!-- --></A><H3>
containsBeanDefinition</H3>
<PRE>
protected abstract boolean <B>containsBeanDefinition</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)</PRE>
<DL>
<DD>Check if this bean factory contains a bean definition with the given name.
 Does not consider any hierarchy this factory may participate in.
 Invoked by <code>containsBean</code> when no cached singleton instance is found.
 <p>Depending on the nature of the concrete bean factory implementation,
 this operation might be expensive (for example, because of directory lookups
 in external registries). However, for listable bean factories, this usually
 just amounts to a local hash lookup: The operation is therefore part of the
 public interface there. The same implementation can serve for both this
 template method and the public interface method in that case.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean to look for
<DT><B>Returns:</B><DD>if this bean factory contains a bean definition with the given name<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanFactory.html#containsBean(java.lang.String)"><CODE>containsBean(java.lang.String)</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/ListableBeanFactory.html#containsBeanDefinition(java.lang.String)"><CODE>ListableBeanFactory.containsBeanDefinition(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getBeanDefinition(java.lang.String)"><!-- --></A><H3>
getBeanDefinition</H3>
<PRE>
protected abstract <A HREF="../../../../../org/springframework/beans/factory/config/BeanDefinition.html" title="interface in org.springframework.beans.factory.config">BeanDefinition</A> <B>getBeanDefinition</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName)
                                             throws <A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD>Return the bean definition for the given bean name.
 Subclasses should normally implement caching, as this method is invoked
 by this class every time bean definition metadata is needed.
 <p>Depending on the nature of the concrete bean factory implementation,
 this operation might be expensive (for example, because of directory lookups
 in external registries). However, for listable bean factories, this usually
 just amounts to a local hash lookup: The operation is therefore part of the
 public interface there. The same implementation can serve for both this
 template method and the public interface method in that case.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean to find a definition for
<DT><B>Returns:</B><DD>the BeanDefinition for this prototype name (never <code>null</code>)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/NoSuchBeanDefinitionException.html" title="class in org.springframework.beans.factory">NoSuchBeanDefinitionException</A></CODE> - if the bean definition cannot be resolved
<DD><CODE><A HREF="../../../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - in case of errors<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support"><CODE>RootBeanDefinition</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/support/ChildBeanDefinition.html" title="class in org.springframework.beans.factory.support"><CODE>ChildBeanDefinition</CODE></A>, 
<A HREF="../../../../../org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html#getBeanDefinition(java.lang.String)"><CODE>ConfigurableListableBeanFactory.getBeanDefinition(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])"><!-- --></A><H3>
createBean</H3>
<PRE>
protected abstract <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>createBean</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;beanName,
                                     <A HREF="../../../../../org/springframework/beans/factory/support/RootBeanDefinition.html" title="class in org.springframework.beans.factory.support">RootBeanDefinition</A>&nbsp;mbd,
                                     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args)
                              throws <A HREF="../../../../../org/springframework/beans/factory/BeanCreationException.html" title="class in org.springframework.beans.factory">BeanCreationException</A></PRE>
<DL>
<DD>Create a bean instance for the given bean definition.
 The bean definition will already have been merged with the parent
 definition in case of a child definition.
 <p>All the other methods in this class invoke this method, although
 beans may be cached after being instantiated by this method. All bean
 instantiation within this class is performed by this method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beanName</CODE> - the name of the bean<DD><CODE>mbd</CODE> - the merged bean definition for the bean<DD><CODE>args</CODE> - arguments to use if creating a prototype using explicit arguments to a
 static factory method. This parameter must be <code>null</code> except in this case.
<DT><B>Returns:</B><DD>a new instance of the bean
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../org/springframework/beans/factory/BeanCreationException.html" title="class in org.springframework.beans.factory">BeanCreationException</A></CODE> - if the bean could not be created</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../../org/springframework/beans/factory/support/AbstractBeanDefinitionReader.html" title="class in org.springframework.beans.factory.support"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../../org/springframework/beans/factory/support/AutowireCandidateQualifier.html" title="class in org.springframework.beans.factory.support"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../../index.html?org/springframework/beans/factory/support/AbstractBeanFactory.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="AbstractBeanFactory.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_org.springframework.beans.factory.support.DefaultSingletonBeanRegistry">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
