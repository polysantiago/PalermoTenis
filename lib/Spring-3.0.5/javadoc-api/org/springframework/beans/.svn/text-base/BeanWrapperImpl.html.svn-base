<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:22:36 BST 2010 -->
<TITLE>
BeanWrapperImpl
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="BeanWrapperImpl";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../org/springframework/beans/CachedIntrospectionResults.html" title="class in org.springframework.beans"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?org/springframework/beans/BeanWrapperImpl.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="BeanWrapperImpl.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.beans</FONT>
<BR>
Class BeanWrapperImpl</H2>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html" title="class in org.springframework.beans">org.springframework.beans.PropertyEditorRegistrySupport</A>
      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html" title="class in org.springframework.beans">org.springframework.beans.AbstractPropertyAccessor</A>
          <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>org.springframework.beans.BeanWrapperImpl</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans">BeanWrapper</A>, <A HREF="../../../org/springframework/beans/ConfigurablePropertyAccessor.html" title="interface in org.springframework.beans">ConfigurablePropertyAccessor</A>, <A HREF="../../../org/springframework/beans/PropertyAccessor.html" title="interface in org.springframework.beans">PropertyAccessor</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A>, <A HREF="../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>BeanWrapperImpl</B><DT>extends <A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html" title="class in org.springframework.beans">AbstractPropertyAccessor</A><DT>implements <A HREF="../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans">BeanWrapper</A></DL>
</PRE>

<P>
Default <A HREF="../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans"><CODE>BeanWrapper</CODE></A> implementation that should be sufficient
 for all typical use cases. Caches introspection results for efficiency.

 <p>Note: Auto-registers default property editors from the
 <code>org.springframework.beans.propertyeditors</code> package, which apply
 in addition to the JDK's standard PropertyEditors. Applications can call
 the <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#registerCustomEditor(java.lang.Class, java.beans.PropertyEditor)"><CODE>PropertyEditorRegistrySupport.registerCustomEditor(Class, java.beans.PropertyEditor)</CODE></A> method
 to register an editor for a particular instance (i.e. they are not shared
 across the application). See the base class
 <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html" title="class in org.springframework.beans"><CODE>PropertyEditorRegistrySupport</CODE></A> for details.

 <p><code>BeanWrapperImpl</code> will convert collection and array values
 to the corresponding target collections or arrays, if necessary. Custom
 property editors that deal with collections or arrays can either be
 written via PropertyEditor's <code>setValue</code>, or against a
 comma-delimited String via <code>setAsText</code>, as String arrays are
 converted in such a format if the array itself is not assignable.

 <p><b>NOTE: As of Spring 2.5, this is - for almost all purposes - an
 internal class.</b> It is just public in order to allow for access from
 other framework packages. For standard application access purposes, use the
 <A HREF="../../../org/springframework/beans/PropertyAccessorFactory.html#forBeanPropertyAccess(java.lang.Object)"><CODE>PropertyAccessorFactory.forBeanPropertyAccess(java.lang.Object)</CODE></A> factory method instead.
<P>

<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>15 April 2001</DD>
<DT><B>Author:</B></DT>
  <DD>Rod Johnson, Juergen Hoeller, Rob Harrop</DD>
<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#registerCustomEditor(java.lang.Class, java.beans.PropertyEditor)"><CODE>PropertyEditorRegistrySupport.registerCustomEditor(java.lang.Class, java.beans.PropertyEditor)</CODE></A>, 
<A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#setPropertyValues(java.util.Map)"><CODE>AbstractPropertyAccessor.setPropertyValues(java.util.Map<?, ?>)</CODE></A>, 
<A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#setPropertyValue(java.lang.String, java.lang.Object)"><CODE>setPropertyValue(java.lang.String, java.lang.Object)</CODE></A>, 
<A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getPropertyValue(java.lang.String)"><CODE>getPropertyValue(java.lang.String)</CODE></A>, 
<A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getPropertyType(java.lang.String)"><CODE>getPropertyType(java.lang.String)</CODE></A>, 
<A HREF="../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans"><CODE>BeanWrapper</CODE></A>, 
<A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html" title="class in org.springframework.beans"><CODE>PropertyEditorRegistrySupport</CODE></A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.beans.PropertyAccessor"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface org.springframework.beans.<A HREF="../../../org/springframework/beans/PropertyAccessor.html" title="interface in org.springframework.beans">PropertyAccessor</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html#NESTED_PROPERTY_SEPARATOR">NESTED_PROPERTY_SEPARATOR</A>, <A HREF="../../../org/springframework/beans/PropertyAccessor.html#NESTED_PROPERTY_SEPARATOR_CHAR">NESTED_PROPERTY_SEPARATOR_CHAR</A>, <A HREF="../../../org/springframework/beans/PropertyAccessor.html#PROPERTY_KEY_PREFIX">PROPERTY_KEY_PREFIX</A>, <A HREF="../../../org/springframework/beans/PropertyAccessor.html#PROPERTY_KEY_PREFIX_CHAR">PROPERTY_KEY_PREFIX_CHAR</A>, <A HREF="../../../org/springframework/beans/PropertyAccessor.html#PROPERTY_KEY_SUFFIX">PROPERTY_KEY_SUFFIX</A>, <A HREF="../../../org/springframework/beans/PropertyAccessor.html#PROPERTY_KEY_SUFFIX_CHAR">PROPERTY_KEY_SUFFIX_CHAR</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#BeanWrapperImpl()">BeanWrapperImpl</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create new empty BeanWrapperImpl.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#BeanWrapperImpl(boolean)">BeanWrapperImpl</A></B>(boolean&nbsp;registerDefaultEditors)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create new empty BeanWrapperImpl.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#BeanWrapperImpl(java.lang.Class)">BeanWrapperImpl</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;?&gt;&nbsp;clazz)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create new BeanWrapperImpl, wrapping a new instance of the specified class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#BeanWrapperImpl(java.lang.Object)">BeanWrapperImpl</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;object)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create new BeanWrapperImpl for the given object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#BeanWrapperImpl(java.lang.Object, java.lang.String, java.lang.Object)">BeanWrapperImpl</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;object,
                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;nestedPath,
                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;rootObject)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create new BeanWrapperImpl for the given object,
 registering a nested path that the object is in.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#convertForProperty(java.lang.Object, java.lang.String)">convertForProperty</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convert the given value for the specified property to the latter's type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter)">convertIfNecessary</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType,
                   <A HREF="../../../org/springframework/core/MethodParameter.html" title="class in org.springframework.core">MethodParameter</A>&nbsp;methodParam)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convert the value to the required type (if necessary from a String).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../org/springframework/beans/BeanWrapperImpl.html" title="class in org.springframework.beans">BeanWrapperImpl</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getBeanWrapperForPropertyPath(java.lang.String)">getBeanWrapperForPropertyPath</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyPath)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Recursively navigate to return a BeanWrapper for the nested property path.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getNestedPath()">getNestedPath</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the nested path of the object wrapped by this BeanWrapper.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyDescriptor.html?is-external=true" title="class or interface in java.beans">PropertyDescriptor</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getPropertyDescriptor(java.lang.String)">getPropertyDescriptor</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Obtain the property descriptor for a specific property
 of the wrapped object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyDescriptor.html?is-external=true" title="class or interface in java.beans">PropertyDescriptor</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getPropertyDescriptorInternal(java.lang.String)">getPropertyDescriptorInternal</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Internal version of <A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getPropertyDescriptor(java.lang.String)"><CODE>getPropertyDescriptor(java.lang.String)</CODE></A>:
 Returns <code>null</code> if not found rather than throwing an exception.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyDescriptor.html?is-external=true" title="class or interface in java.beans">PropertyDescriptor</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getPropertyDescriptors()">getPropertyDescriptors</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Obtain the PropertyDescriptors for the wrapped object
 (as determined by standard JavaBeans introspection).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getPropertyType(java.lang.String)">getPropertyType</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine the property type for the given property path.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../org/springframework/core/convert/TypeDescriptor.html" title="class in org.springframework.core.convert">TypeDescriptor</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getPropertyTypeDescriptor(java.lang.String)">getPropertyTypeDescriptor</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a type descriptor for the specified property:
 preferably from the read method, falling back to the write method.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getPropertyValue(java.lang.String)">getPropertyValue</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Actually get the value of a property.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getRootClass()">getRootClass</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the class of the root object at the top of the path of this BeanWrapper.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getRootInstance()">getRootInstance</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the root object at the top of the path of this BeanWrapper.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/security/AccessControlContext.html?is-external=true" title="class or interface in java.security">AccessControlContext</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getSecurityContext()">getSecurityContext</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the security context used during the invocation of the wrapped instance methods.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getWrappedClass()">getWrappedClass</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the type of the wrapped JavaBean object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getWrappedInstance()">getWrappedInstance</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the bean instance wrapped by this object, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#isAutoGrowNestedPaths()">isAutoGrowNestedPaths</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If this BeanWrapper should "auto grow" nested paths.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#isReadableProperty(java.lang.String)">isReadableProperty</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether the specified property is readable.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#isWritableProperty(java.lang.String)">isWritableProperty</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether the specified property is writable.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../org/springframework/beans/BeanWrapperImpl.html" title="class in org.springframework.beans">BeanWrapperImpl</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#newNestedBeanWrapper(java.lang.Object, java.lang.String)">newNestedBeanWrapper</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;object,
                     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;nestedPath)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new nested BeanWrapper instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#setAutoGrowNestedPaths(boolean)">setAutoGrowNestedPaths</A></B>(boolean&nbsp;autoGrowNestedPaths)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If this BeanWrapper should "auto grow" nested paths.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#setIntrospectionClass(java.lang.Class)">setIntrospectionClass</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;clazz)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the class to introspect.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#setPropertyValue(org.springframework.beans.PropertyValue)">setPropertyValue</A></B>(<A HREF="../../../org/springframework/beans/PropertyValue.html" title="class in org.springframework.beans">PropertyValue</A>&nbsp;pv)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the specified value as current property value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#setPropertyValue(java.lang.String, java.lang.Object)">setPropertyValue</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Actually set a property value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#setSecurityContext(java.security.AccessControlContext)">setSecurityContext</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/security/AccessControlContext.html?is-external=true" title="class or interface in java.security">AccessControlContext</A>&nbsp;acc)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the security context used during the invocation of the wrapped instance methods.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#setWrappedInstance(java.lang.Object)">setWrappedInstance</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;object)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Switch the target object, replacing the cached introspection results only
 if the class of the new object is different to that of the replaced object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#setWrappedInstance(java.lang.Object, java.lang.String, java.lang.Object)">setWrappedInstance</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;object,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;nestedPath,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;rootObject)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Switch the target object, replacing the cached introspection results only
 if the class of the new object is different to that of the replaced object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#toString()">toString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.AbstractPropertyAccessor"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class org.springframework.beans.<A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html" title="class in org.springframework.beans">AbstractPropertyAccessor</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#convertIfNecessary(java.lang.Object, java.lang.Class)">convertIfNecessary</A>, <A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#isExtractOldValueForEditor()">isExtractOldValueForEditor</A>, <A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#setExtractOldValueForEditor(boolean)">setExtractOldValueForEditor</A>, <A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#setPropertyValues(java.util.Map)">setPropertyValues</A>, <A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#setPropertyValues(org.springframework.beans.PropertyValues)">setPropertyValues</A>, <A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#setPropertyValues(org.springframework.beans.PropertyValues, boolean)">setPropertyValues</A>, <A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#setPropertyValues(org.springframework.beans.PropertyValues, boolean, boolean)">setPropertyValues</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.PropertyEditorRegistrySupport"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class org.springframework.beans.<A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html" title="class in org.springframework.beans">PropertyEditorRegistrySupport</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#copyCustomEditorsTo(org.springframework.beans.PropertyEditorRegistry, java.lang.String)">copyCustomEditorsTo</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#copyDefaultEditorsTo(org.springframework.beans.PropertyEditorRegistrySupport)">copyDefaultEditorsTo</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#findCustomEditor(java.lang.Class, java.lang.String)">findCustomEditor</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#getConversionService()">getConversionService</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#getDefaultEditor(java.lang.Class)">getDefaultEditor</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#guessPropertyTypeFromEditors(java.lang.String)">guessPropertyTypeFromEditors</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#hasCustomEditorForElement(java.lang.Class, java.lang.String)">hasCustomEditorForElement</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#isSharedEditor(java.beans.PropertyEditor)">isSharedEditor</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#overrideDefaultEditor(java.lang.Class, java.beans.PropertyEditor)">overrideDefaultEditor</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#registerCustomEditor(java.lang.Class, java.beans.PropertyEditor)">registerCustomEditor</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#registerCustomEditor(java.lang.Class, java.lang.String, java.beans.PropertyEditor)">registerCustomEditor</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#registerDefaultEditors()">registerDefaultEditors</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#registerSharedEditor(java.lang.Class, java.beans.PropertyEditor)">registerSharedEditor</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#setConversionService(org.springframework.core.convert.ConversionService)">setConversionService</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#useConfigValueEditors()">useConfigValueEditors</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.ConfigurablePropertyAccessor"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from interface org.springframework.beans.<A HREF="../../../org/springframework/beans/ConfigurablePropertyAccessor.html" title="interface in org.springframework.beans">ConfigurablePropertyAccessor</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../org/springframework/beans/ConfigurablePropertyAccessor.html#getConversionService()">getConversionService</A>, <A HREF="../../../org/springframework/beans/ConfigurablePropertyAccessor.html#isExtractOldValueForEditor()">isExtractOldValueForEditor</A>, <A HREF="../../../org/springframework/beans/ConfigurablePropertyAccessor.html#setConversionService(org.springframework.core.convert.ConversionService)">setConversionService</A>, <A HREF="../../../org/springframework/beans/ConfigurablePropertyAccessor.html#setExtractOldValueForEditor(boolean)">setExtractOldValueForEditor</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.PropertyAccessor"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from interface org.springframework.beans.<A HREF="../../../org/springframework/beans/PropertyAccessor.html" title="interface in org.springframework.beans">PropertyAccessor</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html#setPropertyValues(java.util.Map)">setPropertyValues</A>, <A HREF="../../../org/springframework/beans/PropertyAccessor.html#setPropertyValues(org.springframework.beans.PropertyValues)">setPropertyValues</A>, <A HREF="../../../org/springframework/beans/PropertyAccessor.html#setPropertyValues(org.springframework.beans.PropertyValues, boolean)">setPropertyValues</A>, <A HREF="../../../org/springframework/beans/PropertyAccessor.html#setPropertyValues(org.springframework.beans.PropertyValues, boolean, boolean)">setPropertyValues</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.PropertyEditorRegistry"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from interface org.springframework.beans.<A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html#findCustomEditor(java.lang.Class, java.lang.String)">findCustomEditor</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html#registerCustomEditor(java.lang.Class, java.beans.PropertyEditor)">registerCustomEditor</A>, <A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html#registerCustomEditor(java.lang.Class, java.lang.String, java.beans.PropertyEditor)">registerCustomEditor</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.beans.TypeConverter"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from interface org.springframework.beans.<A HREF="../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../org/springframework/beans/TypeConverter.html#convertIfNecessary(java.lang.Object, java.lang.Class)">convertIfNecessary</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="BeanWrapperImpl()"><!-- --></A><H3>
BeanWrapperImpl</H3>
<PRE>
public <B>BeanWrapperImpl</B>()</PRE>
<DL>
<DD>Create new empty BeanWrapperImpl. Wrapped instance needs to be set afterwards.
 Registers default editors.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#setWrappedInstance(java.lang.Object)"><CODE>setWrappedInstance(java.lang.Object)</CODE></A></DL>
</DL>
<HR>

<A NAME="BeanWrapperImpl(boolean)"><!-- --></A><H3>
BeanWrapperImpl</H3>
<PRE>
public <B>BeanWrapperImpl</B>(boolean&nbsp;registerDefaultEditors)</PRE>
<DL>
<DD>Create new empty BeanWrapperImpl. Wrapped instance needs to be set afterwards.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>registerDefaultEditors</CODE> - whether to register default editors
 (can be suppressed if the BeanWrapper won't need any type conversion)<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#setWrappedInstance(java.lang.Object)"><CODE>setWrappedInstance(java.lang.Object)</CODE></A></DL>
</DL>
<HR>

<A NAME="BeanWrapperImpl(java.lang.Object)"><!-- --></A><H3>
BeanWrapperImpl</H3>
<PRE>
public <B>BeanWrapperImpl</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;object)</PRE>
<DL>
<DD>Create new BeanWrapperImpl for the given object.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>object</CODE> - object wrapped by this BeanWrapper</DL>
</DL>
<HR>

<A NAME="BeanWrapperImpl(java.lang.Class)"><!-- --></A><H3>
BeanWrapperImpl</H3>
<PRE>
public <B>BeanWrapperImpl</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;?&gt;&nbsp;clazz)</PRE>
<DL>
<DD>Create new BeanWrapperImpl, wrapping a new instance of the specified class.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>clazz</CODE> - class to instantiate and wrap</DL>
</DL>
<HR>

<A NAME="BeanWrapperImpl(java.lang.Object, java.lang.String, java.lang.Object)"><!-- --></A><H3>
BeanWrapperImpl</H3>
<PRE>
public <B>BeanWrapperImpl</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;object,
                       <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;nestedPath,
                       <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;rootObject)</PRE>
<DL>
<DD>Create new BeanWrapperImpl for the given object,
 registering a nested path that the object is in.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>object</CODE> - object wrapped by this BeanWrapper<DD><CODE>nestedPath</CODE> - the nested path of the object<DD><CODE>rootObject</CODE> - the root object at the top of the path</DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="setWrappedInstance(java.lang.Object)"><!-- --></A><H3>
setWrappedInstance</H3>
<PRE>
public void <B>setWrappedInstance</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;object)</PRE>
<DL>
<DD>Switch the target object, replacing the cached introspection results only
 if the class of the new object is different to that of the replaced object.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>object</CODE> - the new target object</DL>
</DD>
</DL>
<HR>

<A NAME="setWrappedInstance(java.lang.Object, java.lang.String, java.lang.Object)"><!-- --></A><H3>
setWrappedInstance</H3>
<PRE>
public void <B>setWrappedInstance</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;object,
                               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;nestedPath,
                               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;rootObject)</PRE>
<DL>
<DD>Switch the target object, replacing the cached introspection results only
 if the class of the new object is different to that of the replaced object.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>object</CODE> - the new target object<DD><CODE>nestedPath</CODE> - the nested path of the object<DD><CODE>rootObject</CODE> - the root object at the top of the path</DL>
</DD>
</DL>
<HR>

<A NAME="getWrappedInstance()"><!-- --></A><H3>
getWrappedInstance</H3>
<PRE>
public final <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>getWrappedInstance</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html#getWrappedInstance()">BeanWrapper</A></CODE></B></DD>
<DD>Return the bean instance wrapped by this object, if any.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html#getWrappedInstance()">getWrappedInstance</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans">BeanWrapper</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the bean instance, or <code>null</code> if none set</DL>
</DD>
</DL>
<HR>

<A NAME="getWrappedClass()"><!-- --></A><H3>
getWrappedClass</H3>
<PRE>
public final <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A> <B>getWrappedClass</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html#getWrappedClass()">BeanWrapper</A></CODE></B></DD>
<DD>Return the type of the wrapped JavaBean object.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html#getWrappedClass()">getWrappedClass</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans">BeanWrapper</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the type of the wrapped bean instance,
 or <code>null</code> if no wrapped object has been set</DL>
</DD>
</DL>
<HR>

<A NAME="getNestedPath()"><!-- --></A><H3>
getNestedPath</H3>
<PRE>
public final <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>getNestedPath</B>()</PRE>
<DL>
<DD>Return the nested path of the object wrapped by this BeanWrapper.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getRootInstance()"><!-- --></A><H3>
getRootInstance</H3>
<PRE>
public final <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>getRootInstance</B>()</PRE>
<DL>
<DD>Return the root object at the top of the path of this BeanWrapper.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getNestedPath()"><CODE>getNestedPath()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getRootClass()"><!-- --></A><H3>
getRootClass</H3>
<PRE>
public final <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A> <B>getRootClass</B>()</PRE>
<DL>
<DD>Return the class of the root object at the top of the path of this BeanWrapper.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getNestedPath()"><CODE>getNestedPath()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setAutoGrowNestedPaths(boolean)"><!-- --></A><H3>
setAutoGrowNestedPaths</H3>
<PRE>
public void <B>setAutoGrowNestedPaths</B>(boolean&nbsp;autoGrowNestedPaths)</PRE>
<DL>
<DD>If this BeanWrapper should "auto grow" nested paths.
 When true, auto growth is triggered on nested paths when null values are encountered.
 When true, auto growth is triggered on collection properties when out of bounds indexes are accessed.
 Default is false.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html#setAutoGrowNestedPaths(boolean)">setAutoGrowNestedPaths</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans">BeanWrapper</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isAutoGrowNestedPaths()"><!-- --></A><H3>
isAutoGrowNestedPaths</H3>
<PRE>
public boolean <B>isAutoGrowNestedPaths</B>()</PRE>
<DL>
<DD>If this BeanWrapper should "auto grow" nested paths.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html#isAutoGrowNestedPaths()">isAutoGrowNestedPaths</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans">BeanWrapper</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setSecurityContext(java.security.AccessControlContext)"><!-- --></A><H3>
setSecurityContext</H3>
<PRE>
public void <B>setSecurityContext</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/security/AccessControlContext.html?is-external=true" title="class or interface in java.security">AccessControlContext</A>&nbsp;acc)</PRE>
<DL>
<DD>Set the security context used during the invocation of the wrapped instance methods.
 Can be null.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getSecurityContext()"><!-- --></A><H3>
getSecurityContext</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/security/AccessControlContext.html?is-external=true" title="class or interface in java.security">AccessControlContext</A> <B>getSecurityContext</B>()</PRE>
<DL>
<DD>Return the security context used during the invocation of the wrapped instance methods.
 Can be null.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setIntrospectionClass(java.lang.Class)"><!-- --></A><H3>
setIntrospectionClass</H3>
<PRE>
protected void <B>setIntrospectionClass</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;clazz)</PRE>
<DL>
<DD>Set the class to introspect.
 Needs to be called when the target object changes.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>clazz</CODE> - the class to introspect</DL>
</DD>
</DL>
<HR>

<A NAME="getPropertyDescriptors()"><!-- --></A><H3>
getPropertyDescriptors</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyDescriptor.html?is-external=true" title="class or interface in java.beans">PropertyDescriptor</A>[] <B>getPropertyDescriptors</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html#getPropertyDescriptors()">BeanWrapper</A></CODE></B></DD>
<DD>Obtain the PropertyDescriptors for the wrapped object
 (as determined by standard JavaBeans introspection).
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html#getPropertyDescriptors()">getPropertyDescriptors</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans">BeanWrapper</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the PropertyDescriptors for the wrapped object</DL>
</DD>
</DL>
<HR>

<A NAME="getPropertyDescriptor(java.lang.String)"><!-- --></A><H3>
getPropertyDescriptor</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyDescriptor.html?is-external=true" title="class or interface in java.beans">PropertyDescriptor</A> <B>getPropertyDescriptor</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)
                                         throws <A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html#getPropertyDescriptor(java.lang.String)">BeanWrapper</A></CODE></B></DD>
<DD>Obtain the property descriptor for a specific property
 of the wrapped object.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html#getPropertyDescriptor(java.lang.String)">getPropertyDescriptor</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans">BeanWrapper</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>propertyName</CODE> - the property to obtain the descriptor for
 (may be a nested path, but no indexed/mapped property)
<DT><B>Returns:</B><DD>the property descriptor for the specified property
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../org/springframework/beans/InvalidPropertyException.html" title="class in org.springframework.beans">InvalidPropertyException</A></CODE> - if there is no such property
<DD><CODE><A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getPropertyDescriptorInternal(java.lang.String)"><!-- --></A><H3>
getPropertyDescriptorInternal</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyDescriptor.html?is-external=true" title="class or interface in java.beans">PropertyDescriptor</A> <B>getPropertyDescriptorInternal</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)
                                                    throws <A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD>Internal version of <A HREF="../../../org/springframework/beans/BeanWrapperImpl.html#getPropertyDescriptor(java.lang.String)"><CODE>getPropertyDescriptor(java.lang.String)</CODE></A>:
 Returns <code>null</code> if not found rather than throwing an exception.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>propertyName</CODE> - the property to obtain the descriptor for
<DT><B>Returns:</B><DD>the property descriptor for the specified property,
 or <code>null</code> if not found
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE> - in case of introspection failure</DL>
</DD>
</DL>
<HR>

<A NAME="getPropertyType(java.lang.String)"><!-- --></A><H3>
getPropertyType</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A> <B>getPropertyType</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)
                      throws <A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#getPropertyType(java.lang.String)">PropertyEditorRegistrySupport</A></CODE></B></DD>
<DD>Determine the property type for the given property path.
 <p>Called by <A HREF="../../../org/springframework/beans/PropertyEditorRegistrySupport.html#findCustomEditor(java.lang.Class, java.lang.String)"><CODE>PropertyEditorRegistrySupport.findCustomEditor(java.lang.Class, java.lang.String)</CODE></A> if no required type has been specified,
 to be able to find a type-specific editor even if just given a property path.
 <p>The default implementation always returns <code>null</code>.
 BeanWrapperImpl overrides this with the standard <code>getPropertyType</code>
 method as defined by the BeanWrapper interface.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html#getPropertyType(java.lang.String)">getPropertyType</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html" title="interface in org.springframework.beans">PropertyAccessor</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#getPropertyType(java.lang.String)">getPropertyType</A></CODE> in class <CODE><A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html" title="class in org.springframework.beans">AbstractPropertyAccessor</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>propertyName</CODE> - the property path to determine the type for
<DT><B>Returns:</B><DD>the type of the property, or <code>null</code> if not determinable
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../org/springframework/beans/InvalidPropertyException.html" title="class in org.springframework.beans">InvalidPropertyException</A></CODE> - if there is no such property or
 if the property isn't readable
<DD><CODE><A HREF="../../../org/springframework/beans/PropertyAccessException.html" title="class in org.springframework.beans">PropertyAccessException</A></CODE> - if the property was valid but the
 accessor method failed
<DD><CODE><A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE><DT><B>See Also:</B><DD><A HREF="../../../org/springframework/beans/PropertyAccessor.html#getPropertyType(java.lang.String)"><CODE>PropertyAccessor.getPropertyType(String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getPropertyTypeDescriptor(java.lang.String)"><!-- --></A><H3>
getPropertyTypeDescriptor</H3>
<PRE>
public <A HREF="../../../org/springframework/core/convert/TypeDescriptor.html" title="class in org.springframework.core.convert">TypeDescriptor</A> <B>getPropertyTypeDescriptor</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)
                                         throws <A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html#getPropertyTypeDescriptor(java.lang.String)">PropertyAccessor</A></CODE></B></DD>
<DD>Return a type descriptor for the specified property:
 preferably from the read method, falling back to the write method.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html#getPropertyTypeDescriptor(java.lang.String)">getPropertyTypeDescriptor</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html" title="interface in org.springframework.beans">PropertyAccessor</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>propertyName</CODE> - the property to check
 (may be a nested path and/or an indexed/mapped property)
<DT><B>Returns:</B><DD>the property type for the particular property,
 or <code>null</code> if not determinable
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../org/springframework/beans/InvalidPropertyException.html" title="class in org.springframework.beans">InvalidPropertyException</A></CODE> - if there is no such property or
 if the property isn't readable
<DD><CODE><A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="isReadableProperty(java.lang.String)"><!-- --></A><H3>
isReadableProperty</H3>
<PRE>
public boolean <B>isReadableProperty</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html#isReadableProperty(java.lang.String)">PropertyAccessor</A></CODE></B></DD>
<DD>Determine whether the specified property is readable.
 <p>Returns <code>false</code> if the property doesn't exist.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html#isReadableProperty(java.lang.String)">isReadableProperty</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html" title="interface in org.springframework.beans">PropertyAccessor</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>propertyName</CODE> - the property to check
 (may be a nested path and/or an indexed/mapped property)
<DT><B>Returns:</B><DD>whether the property is readable</DL>
</DD>
</DL>
<HR>

<A NAME="isWritableProperty(java.lang.String)"><!-- --></A><H3>
isWritableProperty</H3>
<PRE>
public boolean <B>isWritableProperty</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html#isWritableProperty(java.lang.String)">PropertyAccessor</A></CODE></B></DD>
<DD>Determine whether the specified property is writable.
 <p>Returns <code>false</code> if the property doesn't exist.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html#isWritableProperty(java.lang.String)">isWritableProperty</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html" title="interface in org.springframework.beans">PropertyAccessor</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>propertyName</CODE> - the property to check
 (may be a nested path and/or an indexed/mapped property)
<DT><B>Returns:</B><DD>whether the property is writable</DL>
</DD>
</DL>
<HR>

<A NAME="convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter)"><!-- --></A><H3>
convertIfNecessary</H3>
<PRE>
public &lt;T&gt; T <B>convertIfNecessary</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType,
                                <A HREF="../../../org/springframework/core/MethodParameter.html" title="class in org.springframework.core">MethodParameter</A>&nbsp;methodParam)
                     throws <A HREF="../../../org/springframework/beans/TypeMismatchException.html" title="class in org.springframework.beans">TypeMismatchException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/TypeConverter.html#convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter)">TypeConverter</A></CODE></B></DD>
<DD>Convert the value to the required type (if necessary from a String).
 <p>Conversions from String to any type will typically use the <code>setAsText</code>
 method of the PropertyEditor class. Note that a PropertyEditor must be registered
 for the given class for this to work; this is a standard JavaBeans API.
 A number of PropertyEditors are automatically registered.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/TypeConverter.html#convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter)">convertIfNecessary</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - the value to convert<DD><CODE>requiredType</CODE> - the type we must convert to
 (or <code>null</code> if not known, for example in case of a collection element)<DD><CODE>methodParam</CODE> - the method parameter that is the target of the conversion
 (for analysis of generic types; may be <code>null</code>)
<DT><B>Returns:</B><DD>the new value, possibly the result of type conversion
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../org/springframework/beans/TypeMismatchException.html" title="class in org.springframework.beans">TypeMismatchException</A></CODE> - if type conversion failed<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true#setAsText(java.lang.String)" title="class or interface in java.beans"><CODE>PropertyEditor.setAsText(String)</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true#getValue()" title="class or interface in java.beans"><CODE>PropertyEditor.getValue()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="convertForProperty(java.lang.Object, java.lang.String)"><!-- --></A><H3>
convertForProperty</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>convertForProperty</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value,
                                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)
                          throws <A HREF="../../../org/springframework/beans/TypeMismatchException.html" title="class in org.springframework.beans">TypeMismatchException</A></PRE>
<DL>
<DD>Convert the given value for the specified property to the latter's type.
 <p>This method is only intended for optimizations in a BeanFactory.
 Use the <code>convertIfNecessary</code> methods for programmatic conversion.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - the value to convert<DD><CODE>propertyName</CODE> - the target property
 (note that nested or indexed properties are not supported here)
<DT><B>Returns:</B><DD>the new value, possibly the result of type conversion
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../org/springframework/beans/TypeMismatchException.html" title="class in org.springframework.beans">TypeMismatchException</A></CODE> - if type conversion failed</DL>
</DD>
</DL>
<HR>

<A NAME="getBeanWrapperForPropertyPath(java.lang.String)"><!-- --></A><H3>
getBeanWrapperForPropertyPath</H3>
<PRE>
protected <A HREF="../../../org/springframework/beans/BeanWrapperImpl.html" title="class in org.springframework.beans">BeanWrapperImpl</A> <B>getBeanWrapperForPropertyPath</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyPath)</PRE>
<DL>
<DD>Recursively navigate to return a BeanWrapper for the nested property path.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>propertyPath</CODE> - property property path, which may be nested
<DT><B>Returns:</B><DD>a BeanWrapper for the target bean</DL>
</DD>
</DL>
<HR>

<A NAME="newNestedBeanWrapper(java.lang.Object, java.lang.String)"><!-- --></A><H3>
newNestedBeanWrapper</H3>
<PRE>
protected <A HREF="../../../org/springframework/beans/BeanWrapperImpl.html" title="class in org.springframework.beans">BeanWrapperImpl</A> <B>newNestedBeanWrapper</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;object,
                                               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;nestedPath)</PRE>
<DL>
<DD>Create a new nested BeanWrapper instance.
 <p>Default implementation creates a BeanWrapperImpl instance.
 Can be overridden in subclasses to create a BeanWrapperImpl subclass.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>object</CODE> - object wrapped by this BeanWrapper<DD><CODE>nestedPath</CODE> - the nested path of the object
<DT><B>Returns:</B><DD>the nested BeanWrapper instance</DL>
</DD>
</DL>
<HR>

<A NAME="getPropertyValue(java.lang.String)"><!-- --></A><H3>
getPropertyValue</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>getPropertyValue</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)
                        throws <A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#getPropertyValue(java.lang.String)">AbstractPropertyAccessor</A></CODE></B></DD>
<DD>Actually get the value of a property.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html#getPropertyValue(java.lang.String)">getPropertyValue</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html" title="interface in org.springframework.beans">PropertyAccessor</A></CODE><DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#getPropertyValue(java.lang.String)">getPropertyValue</A></CODE> in class <CODE><A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html" title="class in org.springframework.beans">AbstractPropertyAccessor</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>propertyName</CODE> - name of the property to get the value of
<DT><B>Returns:</B><DD>the value of the property
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../org/springframework/beans/InvalidPropertyException.html" title="class in org.springframework.beans">InvalidPropertyException</A></CODE> - if there is no such property or
 if the property isn't readable
<DD><CODE><A HREF="../../../org/springframework/beans/PropertyAccessException.html" title="class in org.springframework.beans">PropertyAccessException</A></CODE> - if the property was valid but the
 accessor method failed
<DD><CODE><A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setPropertyValue(java.lang.String, java.lang.Object)"><!-- --></A><H3>
setPropertyValue</H3>
<PRE>
public void <B>setPropertyValue</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName,
                             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value)
                      throws <A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#setPropertyValue(java.lang.String, java.lang.Object)">AbstractPropertyAccessor</A></CODE></B></DD>
<DD>Actually set a property value.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html#setPropertyValue(java.lang.String, java.lang.Object)">setPropertyValue</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html" title="interface in org.springframework.beans">PropertyAccessor</A></CODE><DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#setPropertyValue(java.lang.String, java.lang.Object)">setPropertyValue</A></CODE> in class <CODE><A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html" title="class in org.springframework.beans">AbstractPropertyAccessor</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>propertyName</CODE> - name of the property to set value of<DD><CODE>value</CODE> - the new value
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../org/springframework/beans/InvalidPropertyException.html" title="class in org.springframework.beans">InvalidPropertyException</A></CODE> - if there is no such property or
 if the property isn't writable
<DD><CODE><A HREF="../../../org/springframework/beans/PropertyAccessException.html" title="class in org.springframework.beans">PropertyAccessException</A></CODE> - if the property was valid but the
 accessor method failed or a type mismatch occured
<DD><CODE><A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setPropertyValue(org.springframework.beans.PropertyValue)"><!-- --></A><H3>
setPropertyValue</H3>
<PRE>
public void <B>setPropertyValue</B>(<A HREF="../../../org/springframework/beans/PropertyValue.html" title="class in org.springframework.beans">PropertyValue</A>&nbsp;pv)
                      throws <A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html#setPropertyValue(org.springframework.beans.PropertyValue)">PropertyAccessor</A></CODE></B></DD>
<DD>Set the specified value as current property value.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html#setPropertyValue(org.springframework.beans.PropertyValue)">setPropertyValue</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/PropertyAccessor.html" title="interface in org.springframework.beans">PropertyAccessor</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html#setPropertyValue(org.springframework.beans.PropertyValue)">setPropertyValue</A></CODE> in class <CODE><A HREF="../../../org/springframework/beans/AbstractPropertyAccessor.html" title="class in org.springframework.beans">AbstractPropertyAccessor</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pv</CODE> - an object containing the new property value
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../org/springframework/beans/InvalidPropertyException.html" title="class in org.springframework.beans">InvalidPropertyException</A></CODE> - if there is no such property or
 if the property isn't writable
<DD><CODE><A HREF="../../../org/springframework/beans/PropertyAccessException.html" title="class in org.springframework.beans">PropertyAccessException</A></CODE> - if the property was valid but the
 accessor method failed or a type mismatch occured
<DD><CODE><A HREF="../../../org/springframework/beans/BeansException.html" title="class in org.springframework.beans">BeansException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="toString()"><!-- --></A><H3>
toString</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>toString</B>()</PRE>
<DL>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A></CODE> in class <CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/springframework/beans/BeanWrapper.html" title="interface in org.springframework.beans"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../org/springframework/beans/CachedIntrospectionResults.html" title="class in org.springframework.beans"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?org/springframework/beans/BeanWrapperImpl.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="BeanWrapperImpl.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
