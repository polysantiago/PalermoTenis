<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:23:35 BST 2010 -->
<TITLE>
JdbcTemplate
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="JdbcTemplate";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/springframework/jdbc/core/ParameterDisposer.html" title="interface in org.springframework.jdbc.core"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/jdbc/core/JdbcTemplate.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="JdbcTemplate.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_org.springframework.jdbc.support.JdbcAccessor">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.jdbc.core</FONT>
<BR>
Class JdbcTemplate</H2>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html" title="class in org.springframework.jdbc.support">org.springframework.jdbc.support.JdbcAccessor</A>
      <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>org.springframework.jdbc.core.JdbcTemplate</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../org/springframework/beans/factory/InitializingBean.html" title="interface in org.springframework.beans.factory">InitializingBean</A>, <A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>JdbcTemplate</B><DT>extends <A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html" title="class in org.springframework.jdbc.support">JdbcAccessor</A><DT>implements <A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></DL>
</PRE>

<P>
<b>This is the central class in the JDBC core package.</b>
 It simplifies the use of JDBC and helps to avoid common errors.
 It executes core JDBC workflow, leaving application code to provide SQL
 and extract results. This class executes SQL queries or updates, initiating
 iteration over ResultSets and catching JDBC exceptions and translating
 them to the generic, more informative exception hierarchy defined in the
 <code>org.springframework.dao</code> package.

 <p>Code using this class need only implement callback interfaces, giving
 them a clearly defined contract. The <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core"><CODE>PreparedStatementCreator</CODE></A> callback
 interface creates a prepared statement given a Connection, providing SQL and
 any necessary parameters. The <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core"><CODE>ResultSetExtractor</CODE></A> interface extracts
 values from a ResultSet. See also <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core"><CODE>PreparedStatementSetter</CODE></A> and
 <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core"><CODE>RowMapper</CODE></A> for two popular alternative callback interfaces.

 <p>Can be used within a service implementation via direct instantiation
 with a DataSource reference, or get prepared in an application context
 and given to services as bean reference. Note: The DataSource should
 always be configured as a bean in the application context, in the first case
 given to the service directly, in the second case to the prepared template.

 <p>Because this class is parameterizable by the callback interfaces and
 the <A HREF="../../../../org/springframework/jdbc/support/SQLExceptionTranslator.html" title="interface in org.springframework.jdbc.support"><CODE>SQLExceptionTranslator</CODE></A>
 interface, there should be no need to subclass it.

 <p>All SQL operations performed by this class are logged at debug level,
 using "org.springframework.jdbc.core.JdbcTemplate" as log category.
<P>

<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>May 3, 2001</DD>
<DT><B>Author:</B></DT>
  <DD>Rod Johnson, Juergen Hoeller, Thomas Risberg</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core"><CODE>PreparedStatementCreator</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core"><CODE>PreparedStatementSetter</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/CallableStatementCreator.html" title="interface in org.springframework.jdbc.core"><CODE>CallableStatementCreator</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCallback.html" title="interface in org.springframework.jdbc.core"><CODE>PreparedStatementCallback</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/CallableStatementCallback.html" title="interface in org.springframework.jdbc.core"><CODE>CallableStatementCallback</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core"><CODE>ResultSetExtractor</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/RowCallbackHandler.html" title="interface in org.springframework.jdbc.core"><CODE>RowCallbackHandler</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core"><CODE>RowMapper</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/support/SQLExceptionTranslator.html" title="interface in org.springframework.jdbc.support"><CODE>SQLExceptionTranslator</CODE></A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.jdbc.support.JdbcAccessor"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from class org.springframework.jdbc.support.<A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html" title="class in org.springframework.jdbc.support">JdbcAccessor</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html#logger">logger</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#JdbcTemplate()">JdbcTemplate</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Construct a new JdbcTemplate for bean usage.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#JdbcTemplate(javax.sql.DataSource)">JdbcTemplate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html?is-external=true" title="class or interface in javax.sql">DataSource</A>&nbsp;dataSource)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Construct a new JdbcTemplate, given a DataSource to obtain connections from.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#JdbcTemplate(javax.sql.DataSource, boolean)">JdbcTemplate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html?is-external=true" title="class or interface in javax.sql">DataSource</A>&nbsp;dataSource,
             boolean&nbsp;lazyInit)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Construct a new JdbcTemplate, given a DataSource to obtain connections from.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#applyStatementSettings(java.sql.Statement)">applyStatementSettings</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html?is-external=true" title="class or interface in java.sql">Statement</A>&nbsp;stmt)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prepare the given JDBC Statement (or PreparedStatement or CallableStatement),
 applying statement settings such as fetch size, max rows, and query timeout.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#batchUpdate(java.lang.String[])">batchUpdate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]&nbsp;sql)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Issue multiple SQL updates on a single JDBC Statement using batching.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#batchUpdate(java.lang.String, org.springframework.jdbc.core.BatchPreparedStatementSetter)">batchUpdate</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
            <A HREF="../../../../org/springframework/jdbc/core/BatchPreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">BatchPreparedStatementSetter</A>&nbsp;pss)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Issue multiple update statements on a single PreparedStatement,
 using batch updates and a BatchPreparedStatementSetter to set values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#call(org.springframework.jdbc.core.CallableStatementCreator, java.util.List)">call</A></B>(<A HREF="../../../../org/springframework/jdbc/core/CallableStatementCreator.html" title="interface in org.springframework.jdbc.core">CallableStatementCreator</A>&nbsp;csc,
     <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../org/springframework/jdbc/core/SqlParameter.html" title="class in org.springframework.jdbc.core">SqlParameter</A>&gt;&nbsp;declaredParameters)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a SQL call using a CallableStatementCreator to provide SQL and any
 required parameters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html?is-external=true" title="class or interface in java.sql">Connection</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#createConnectionProxy(java.sql.Connection)">createConnectionProxy</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html?is-external=true" title="class or interface in java.sql">Connection</A>&nbsp;con)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a close-suppressing proxy for the given JDBC Connection.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#createResultsMap()">createResultsMap</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a Map instance to be used as results map.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#execute(org.springframework.jdbc.core.CallableStatementCreator, org.springframework.jdbc.core.CallableStatementCallback)">execute</A></B>(<A HREF="../../../../org/springframework/jdbc/core/CallableStatementCreator.html" title="interface in org.springframework.jdbc.core">CallableStatementCreator</A>&nbsp;csc,
        <A HREF="../../../../org/springframework/jdbc/core/CallableStatementCallback.html" title="interface in org.springframework.jdbc.core">CallableStatementCallback</A>&lt;T&gt;&nbsp;action)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a JDBC data access operation, implemented as callback action
 working on a JDBC CallableStatement.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#execute(org.springframework.jdbc.core.ConnectionCallback)">execute</A></B>(<A HREF="../../../../org/springframework/jdbc/core/ConnectionCallback.html" title="interface in org.springframework.jdbc.core">ConnectionCallback</A>&lt;T&gt;&nbsp;action)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a JDBC data access operation, implemented as callback action
 working on a JDBC Connection.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#execute(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementCallback)">execute</A></B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
        <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCallback.html" title="interface in org.springframework.jdbc.core">PreparedStatementCallback</A>&lt;T&gt;&nbsp;action)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a JDBC data access operation, implemented as callback action
 working on a JDBC PreparedStatement.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#execute(org.springframework.jdbc.core.StatementCallback)">execute</A></B>(<A HREF="../../../../org/springframework/jdbc/core/StatementCallback.html" title="interface in org.springframework.jdbc.core">StatementCallback</A>&lt;T&gt;&nbsp;action)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a JDBC data access operation, implemented as callback action
 working on a JDBC Statement.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#execute(java.lang.String)">execute</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Issue a single SQL execute, typically a DDL statement.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#execute(java.lang.String, org.springframework.jdbc.core.CallableStatementCallback)">execute</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;callString,
        <A HREF="../../../../org/springframework/jdbc/core/CallableStatementCallback.html" title="interface in org.springframework.jdbc.core">CallableStatementCallback</A>&lt;T&gt;&nbsp;action)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a JDBC data access operation, implemented as callback action
 working on a JDBC CallableStatement.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#execute(java.lang.String, org.springframework.jdbc.core.PreparedStatementCallback)">execute</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
        <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCallback.html" title="interface in org.springframework.jdbc.core">PreparedStatementCallback</A>&lt;T&gt;&nbsp;action)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a JDBC data access operation, implemented as callback action
 working on a JDBC PreparedStatement.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#extractOutputParameters(java.sql.CallableStatement, java.util.List)">extractOutputParameters</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html?is-external=true" title="class or interface in java.sql">CallableStatement</A>&nbsp;cs,
                        <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../org/springframework/jdbc/core/SqlParameter.html" title="class in org.springframework.jdbc.core">SqlParameter</A>&gt;&nbsp;parameters)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Extract output parameters from the completed stored procedure.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#extractReturnedResults(java.sql.CallableStatement, java.util.List, java.util.List, int)">extractReturnedResults</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html?is-external=true" title="class or interface in java.sql">CallableStatement</A>&nbsp;cs,
                       <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&nbsp;updateCountParameters,
                       <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&nbsp;resultSetParameters,
                       int&nbsp;updateCount)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Extract returned ResultSets from the completed stored procedure.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#getColumnMapRowMapper()">getColumnMapRowMapper</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new RowMapper for reading columns as key-value pairs.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#getFetchSize()">getFetchSize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the fetch size specified for this JdbcTemplate.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#getMaxRows()">getMaxRows</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the maximum number of rows specified for this JdbcTemplate.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/springframework/jdbc/support/nativejdbc/NativeJdbcExtractor.html" title="interface in org.springframework.jdbc.support.nativejdbc">NativeJdbcExtractor</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#getNativeJdbcExtractor()">getNativeJdbcExtractor</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the current NativeJdbcExtractor implementation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#getQueryTimeout()">getQueryTimeout</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the query timeout for statements that this JdbcTemplate executes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected 
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#getSingleColumnRowMapper(java.lang.Class)">getSingleColumnRowMapper</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new RowMapper for reading result objects from a single column.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#handleWarnings(java.sql.SQLWarning)">handleWarnings</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLWarning.html?is-external=true" title="class or interface in java.sql">SQLWarning</A>&nbsp;warning)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Throw an SQLWarningException if encountering an actual warning.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#handleWarnings(java.sql.Statement)">handleWarnings</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html?is-external=true" title="class or interface in java.sql">Statement</A>&nbsp;stmt)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Throw an SQLWarningException if we're not ignoring warnings,
 else log the warnings (at debug level).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#isIgnoreWarnings()">isIgnoreWarnings</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether or not we ignore SQLWarnings.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#isResultsMapCaseInsensitive()">isResultsMapCaseInsensitive</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether execution of a CallableStatement will return the results in a Map
 that uses case insensitive names for the parameters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#isSkipResultsProcessing()">isSkipResultsProcessing</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether results processing should be skipped.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#isSkipUndeclaredResults()">isSkipUndeclaredResults</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether undeclared results should be skipped.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#newArgPreparedStatementSetter(java.lang.Object[])">newArgPreparedStatementSetter</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new ArgPreparedStatementSetter using the args passed in.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#newArgTypePreparedStatementSetter(java.lang.Object[], int[])">newArgTypePreparedStatementSetter</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                                  int[]&nbsp;argTypes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new ArgTypePreparedStatementSetter using the args and argTypes passed in.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#processResultSet(java.sql.ResultSet, org.springframework.jdbc.core.ResultSetSupportingSqlParameter)">processResultSet</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html?is-external=true" title="class or interface in java.sql">ResultSet</A>&nbsp;rs,
                 <A HREF="../../../../org/springframework/jdbc/core/ResultSetSupportingSqlParameter.html" title="class in org.springframework.jdbc.core">ResultSetSupportingSqlParameter</A>&nbsp;param)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Process the given ResultSet from a stored procedure.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.ResultSetExtractor)">query</A></B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
      <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A>&nbsp;pss,
      <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query using a prepared statement, allowing for a PreparedStatementCreator
 and a PreparedStatementSetter.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.ResultSetExtractor)">query</A></B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
      <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query using a prepared statement, reading the ResultSet with a
 ResultSetExtractor.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowCallbackHandler)">query</A></B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
      <A HREF="../../../../org/springframework/jdbc/core/RowCallbackHandler.html" title="interface in org.springframework.jdbc.core">RowCallbackHandler</A>&nbsp;rch)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query using a prepared statement, reading the ResultSet on a per-row
 basis with a RowCallbackHandler.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowMapper)">query</A></B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
      <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query using a prepared statement, mapping each row to a Java object
 via a RowMapper.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.ResultSetExtractor)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
      int[]&nbsp;argTypes,
      <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, reading the ResultSet with a
 ResultSetExtractor.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowCallbackHandler)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
      int[]&nbsp;argTypes,
      <A HREF="../../../../org/springframework/jdbc/core/RowCallbackHandler.html" title="interface in org.springframework.jdbc.core">RowCallbackHandler</A>&nbsp;rch)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a list of
 arguments to bind to the query, reading the ResultSet on a per-row basis
 with a RowCallbackHandler.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowMapper)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
      int[]&nbsp;argTypes,
      <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, mapping each row to a Java object
 via a RowMapper.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.ResultSetExtractor)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
      <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, reading the ResultSet with a
 ResultSetExtractor.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowCallbackHandler)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
      <A HREF="../../../../org/springframework/jdbc/core/RowCallbackHandler.html" title="interface in org.springframework.jdbc.core">RowCallbackHandler</A>&nbsp;rch)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a list of
 arguments to bind to the query, reading the ResultSet on a per-row basis
 with a RowCallbackHandler.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
      <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, mapping each row to a Java object
 via a RowMapper.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.ResultSetExtractor)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A>&nbsp;pss,
      <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query using a prepared statement, reading the ResultSet with a
 ResultSetExtractor.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowCallbackHandler)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A>&nbsp;pss,
      <A HREF="../../../../org/springframework/jdbc/core/RowCallbackHandler.html" title="interface in org.springframework.jdbc.core">RowCallbackHandler</A>&nbsp;rch)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 PreparedStatementSetter implementation that knows how to bind values
 to the query, reading the ResultSet on a per-row basis with a
 RowCallbackHandler.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowMapper)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A>&nbsp;pss,
      <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 PreparedStatementSetter implementation that knows how to bind values
 to the query, mapping each row to a Java object via a RowMapper.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query given static SQL, reading the ResultSet with a
 ResultSetExtractor.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor, java.lang.Object...)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse,
      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, reading the ResultSet with a
 ResultSetExtractor.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="../../../../org/springframework/jdbc/core/RowCallbackHandler.html" title="interface in org.springframework.jdbc.core">RowCallbackHandler</A>&nbsp;rch)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query given static SQL, reading the ResultSet on a per-row
 basis with a RowCallbackHandler.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler, java.lang.Object...)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="../../../../org/springframework/jdbc/core/RowCallbackHandler.html" title="interface in org.springframework.jdbc.core">RowCallbackHandler</A>&nbsp;rch,
      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a list of
 arguments to bind to the query, reading the ResultSet on a per-row basis
 with a RowCallbackHandler.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, org.springframework.jdbc.core.RowMapper)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query given static SQL, mapping each row to a Java object
 via a RowMapper.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String, org.springframework.jdbc.core.RowMapper, java.lang.Object...)">query</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
      <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper,
      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, mapping each row to a Java object
 via a RowMapper.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForInt(java.lang.String)">queryForInt</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query that results in an int value, given static SQL.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForInt(java.lang.String, java.lang.Object...)">queryForInt</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, resulting in an int value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForInt(java.lang.String, java.lang.Object[], int[])">queryForInt</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
            int[]&nbsp;argTypes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, resulting in an int value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForList(java.lang.String)">queryForList</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query for a result list, given static SQL.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForList(java.lang.String, java.lang.Class)">queryForList</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;elementType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query for a result list, given static SQL.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForList(java.lang.String, java.lang.Class, java.lang.Object...)">queryForList</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;elementType,
             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result list.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForList(java.lang.String, java.lang.Object...)">queryForList</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result list.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForList(java.lang.String, java.lang.Object[], java.lang.Class)">queryForList</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;elementType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result list.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForList(java.lang.String, java.lang.Object[], int[])">queryForList</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
             int[]&nbsp;argTypes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result list.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt;</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForList(java.lang.String, java.lang.Object[], int[], java.lang.Class)">queryForList</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
             int[]&nbsp;argTypes,
             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;elementType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result list.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForLong(java.lang.String)">queryForLong</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query that results in a long value, given static SQL.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForLong(java.lang.String, java.lang.Object...)">queryForLong</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, resulting in a long value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForLong(java.lang.String, java.lang.Object[], int[])">queryForLong</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
             int[]&nbsp;argTypes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, resulting in a long value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForMap(java.lang.String)">queryForMap</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query for a result Map, given static SQL.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForMap(java.lang.String, java.lang.Object...)">queryForMap</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result Map.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForMap(java.lang.String, java.lang.Object[], int[])">queryForMap</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
            int[]&nbsp;argTypes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result Map.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForObject(java.lang.String, java.lang.Class)">queryForObject</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query for a result object, given static SQL.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForObject(java.lang.String, java.lang.Class, java.lang.Object...)">queryForObject</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType,
               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForObject(java.lang.String, java.lang.Object[], java.lang.Class)">queryForObject</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForObject(java.lang.String, java.lang.Object[], int[], java.lang.Class)">queryForObject</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
               int[]&nbsp;argTypes,
               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForObject(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowMapper)">queryForObject</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
               int[]&nbsp;argTypes,
               <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, mapping a single result row to a
 Java object via a RowMapper.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForObject(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper)">queryForObject</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
               <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, mapping a single result row to a
 Java object via a RowMapper.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForObject(java.lang.String, org.springframework.jdbc.core.RowMapper)">queryForObject</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
               <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query given static SQL, mapping a single result row to a Java
 object via a RowMapper.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForObject(java.lang.String, org.springframework.jdbc.core.RowMapper, java.lang.Object...)">queryForObject</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
               <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper,
               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, mapping a single result row to a
 Java object via a RowMapper.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/springframework/jdbc/support/rowset/SqlRowSet.html" title="interface in org.springframework.jdbc.support.rowset">SqlRowSet</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForRowSet(java.lang.String)">queryForRowSet</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute a query for a SqlRowSet, given static SQL.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/springframework/jdbc/support/rowset/SqlRowSet.html" title="interface in org.springframework.jdbc.support.rowset">SqlRowSet</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForRowSet(java.lang.String, java.lang.Object...)">queryForRowSet</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a SqlRowSet.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/springframework/jdbc/support/rowset/SqlRowSet.html" title="interface in org.springframework.jdbc.support.rowset">SqlRowSet</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#queryForRowSet(java.lang.String, java.lang.Object[], int[])">queryForRowSet</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
               int[]&nbsp;argTypes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a SqlRowSet.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#setFetchSize(int)">setFetchSize</A></B>(int&nbsp;fetchSize)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the fetch size for this JdbcTemplate.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#setIgnoreWarnings(boolean)">setIgnoreWarnings</A></B>(boolean&nbsp;ignoreWarnings)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether or not we want to ignore SQLWarnings.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#setMaxRows(int)">setMaxRows</A></B>(int&nbsp;maxRows)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the maximum number of rows for this JdbcTemplate.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#setNativeJdbcExtractor(org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor)">setNativeJdbcExtractor</A></B>(<A HREF="../../../../org/springframework/jdbc/support/nativejdbc/NativeJdbcExtractor.html" title="interface in org.springframework.jdbc.support.nativejdbc">NativeJdbcExtractor</A>&nbsp;extractor)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set a NativeJdbcExtractor to extract native JDBC objects from wrapped handles.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#setQueryTimeout(int)">setQueryTimeout</A></B>(int&nbsp;queryTimeout)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the query timeout for statements that this JdbcTemplate executes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#setResultsMapCaseInsensitive(boolean)">setResultsMapCaseInsensitive</A></B>(boolean&nbsp;resultsMapCaseInsensitive)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether execution of a CallableStatement will return the results in a Map
 that uses case insensitive names for the parameters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#setSkipResultsProcessing(boolean)">setSkipResultsProcessing</A></B>(boolean&nbsp;skipResultsProcessing)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether results processing should be skipped.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#setSkipUndeclaredResults(boolean)">setSkipUndeclaredResults</A></B>(boolean&nbsp;skipUndeclaredResults)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether undelared results should be skipped.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#update(org.springframework.jdbc.core.PreparedStatementCreator)">update</A></B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Issue a single SQL update operation (such as an insert, update or delete statement)
 using a PreparedStatementCreator to provide SQL and any required parameters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#update(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.support.KeyHolder)">update</A></B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
       <A HREF="../../../../org/springframework/jdbc/support/KeyHolder.html" title="interface in org.springframework.jdbc.support">KeyHolder</A>&nbsp;generatedKeyHolder)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Issue an update statement using a PreparedStatementCreator to provide SQL and
 any required parameters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#update(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementSetter)">update</A></B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
       <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A>&nbsp;pss)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#update(java.lang.String)">update</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Issue a single SQL update operation (such as an insert, update or delete statement).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#update(java.lang.String, java.lang.Object...)">update</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
       <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Issue a single SQL update operation (such as an insert, update or delete statement)
 via a prepared statement, binding the given arguments.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#update(java.lang.String, java.lang.Object[], int[])">update</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
       <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
       int[]&nbsp;argTypes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Issue a single SQL update operation (such as an insert, update or delete statement)
 via a prepared statement, binding the given arguments.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#update(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter)">update</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
       <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A>&nbsp;pss)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Issue an update statement using a PreparedStatementSetter to set bind parameters,
 with given SQL.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.jdbc.support.JdbcAccessor"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class org.springframework.jdbc.support.<A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html" title="class in org.springframework.jdbc.support">JdbcAccessor</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html#afterPropertiesSet()">afterPropertiesSet</A>, <A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html#getDataSource()">getDataSource</A>, <A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html#getExceptionTranslator()">getExceptionTranslator</A>, <A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html#isLazyInit()">isLazyInit</A>, <A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html#setDatabaseProductName(java.lang.String)">setDatabaseProductName</A>, <A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html#setDataSource(javax.sql.DataSource)">setDataSource</A>, <A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html#setExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)">setExceptionTranslator</A>, <A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html#setLazyInit(boolean)">setLazyInit</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="JdbcTemplate()"><!-- --></A><H3>
JdbcTemplate</H3>
<PRE>
public <B>JdbcTemplate</B>()</PRE>
<DL>
<DD>Construct a new JdbcTemplate for bean usage.
 <p>Note: The DataSource has to be set before using the instance.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/support/JdbcAccessor.html#setDataSource(javax.sql.DataSource)"><CODE>JdbcAccessor.setDataSource(javax.sql.DataSource)</CODE></A></DL>
</DL>
<HR>

<A NAME="JdbcTemplate(javax.sql.DataSource)"><!-- --></A><H3>
JdbcTemplate</H3>
<PRE>
public <B>JdbcTemplate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html?is-external=true" title="class or interface in javax.sql">DataSource</A>&nbsp;dataSource)</PRE>
<DL>
<DD>Construct a new JdbcTemplate, given a DataSource to obtain connections from.
 <p>Note: This will not trigger initialization of the exception translator.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>dataSource</CODE> - the JDBC DataSource to obtain connections from</DL>
</DL>
<HR>

<A NAME="JdbcTemplate(javax.sql.DataSource, boolean)"><!-- --></A><H3>
JdbcTemplate</H3>
<PRE>
public <B>JdbcTemplate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html?is-external=true" title="class or interface in javax.sql">DataSource</A>&nbsp;dataSource,
                    boolean&nbsp;lazyInit)</PRE>
<DL>
<DD>Construct a new JdbcTemplate, given a DataSource to obtain connections from.
 <p>Note: Depending on the "lazyInit" flag, initialization of the exception translator
 will be triggered.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>dataSource</CODE> - the JDBC DataSource to obtain connections from<DD><CODE>lazyInit</CODE> - whether to lazily initialize the SQLExceptionTranslator</DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="setNativeJdbcExtractor(org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor)"><!-- --></A><H3>
setNativeJdbcExtractor</H3>
<PRE>
public void <B>setNativeJdbcExtractor</B>(<A HREF="../../../../org/springframework/jdbc/support/nativejdbc/NativeJdbcExtractor.html" title="interface in org.springframework.jdbc.support.nativejdbc">NativeJdbcExtractor</A>&nbsp;extractor)</PRE>
<DL>
<DD>Set a NativeJdbcExtractor to extract native JDBC objects from wrapped handles.
 Useful if native Statement and/or ResultSet handles are expected for casting
 to database-specific implementation classes, but a connection pool that wraps
 JDBC objects is used (note: <i>any</i> pool will return wrapped Connections).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getNativeJdbcExtractor()"><!-- --></A><H3>
getNativeJdbcExtractor</H3>
<PRE>
public <A HREF="../../../../org/springframework/jdbc/support/nativejdbc/NativeJdbcExtractor.html" title="interface in org.springframework.jdbc.support.nativejdbc">NativeJdbcExtractor</A> <B>getNativeJdbcExtractor</B>()</PRE>
<DL>
<DD>Return the current NativeJdbcExtractor implementation.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setIgnoreWarnings(boolean)"><!-- --></A><H3>
setIgnoreWarnings</H3>
<PRE>
public void <B>setIgnoreWarnings</B>(boolean&nbsp;ignoreWarnings)</PRE>
<DL>
<DD>Set whether or not we want to ignore SQLWarnings.
 <p>Default is "true", swallowing and logging all warnings. Switch this flag
 to "false" to make the JdbcTemplate throw a SQLWarningException instead.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLWarning.html?is-external=true" title="class or interface in java.sql"><CODE>SQLWarning</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/SQLWarningException.html" title="class in org.springframework.jdbc"><CODE>SQLWarningException</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#handleWarnings(java.sql.Statement)"><CODE>handleWarnings(java.sql.Statement)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isIgnoreWarnings()"><!-- --></A><H3>
isIgnoreWarnings</H3>
<PRE>
public boolean <B>isIgnoreWarnings</B>()</PRE>
<DL>
<DD>Return whether or not we ignore SQLWarnings.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setFetchSize(int)"><!-- --></A><H3>
setFetchSize</H3>
<PRE>
public void <B>setFetchSize</B>(int&nbsp;fetchSize)</PRE>
<DL>
<DD>Set the fetch size for this JdbcTemplate. This is important for processing
 large result sets: Setting this higher than the default value will increase
 processing speed at the cost of memory consumption; setting this lower can
 avoid transferring row data that will never be read by the application.
 <p>Default is 0, indicating to use the JDBC driver's default.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html?is-external=true#setFetchSize(int)" title="class or interface in java.sql"><CODE>Statement.setFetchSize(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getFetchSize()"><!-- --></A><H3>
getFetchSize</H3>
<PRE>
public int <B>getFetchSize</B>()</PRE>
<DL>
<DD>Return the fetch size specified for this JdbcTemplate.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setMaxRows(int)"><!-- --></A><H3>
setMaxRows</H3>
<PRE>
public void <B>setMaxRows</B>(int&nbsp;maxRows)</PRE>
<DL>
<DD>Set the maximum number of rows for this JdbcTemplate. This is important
 for processing subsets of large result sets, avoiding to read and hold
 the entire result set in the database or in the JDBC driver if we're
 never interested in the entire result in the first place (for example,
 when performing searches that might return a large number of matches).
 <p>Default is 0, indicating to use the JDBC driver's default.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html?is-external=true#setMaxRows(int)" title="class or interface in java.sql"><CODE>Statement.setMaxRows(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getMaxRows()"><!-- --></A><H3>
getMaxRows</H3>
<PRE>
public int <B>getMaxRows</B>()</PRE>
<DL>
<DD>Return the maximum number of rows specified for this JdbcTemplate.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setQueryTimeout(int)"><!-- --></A><H3>
setQueryTimeout</H3>
<PRE>
public void <B>setQueryTimeout</B>(int&nbsp;queryTimeout)</PRE>
<DL>
<DD>Set the query timeout for statements that this JdbcTemplate executes.
 <p>Default is 0, indicating to use the JDBC driver's default.
 <p>Note: Any timeout specified here will be overridden by the remaining
 transaction timeout when executing within a transaction that has a
 timeout specified at the transaction level.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html?is-external=true#setQueryTimeout(int)" title="class or interface in java.sql"><CODE>Statement.setQueryTimeout(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getQueryTimeout()"><!-- --></A><H3>
getQueryTimeout</H3>
<PRE>
public int <B>getQueryTimeout</B>()</PRE>
<DL>
<DD>Return the query timeout for statements that this JdbcTemplate executes.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setSkipResultsProcessing(boolean)"><!-- --></A><H3>
setSkipResultsProcessing</H3>
<PRE>
public void <B>setSkipResultsProcessing</B>(boolean&nbsp;skipResultsProcessing)</PRE>
<DL>
<DD>Set whether results processing should be skipped.  Can be used to optimize callable
 statement processing when we know that no results are being passed back - the processing
 of out parameter will still take place.  This can be used to avoid a bug in some older
 Oracle JDBC drivers like 10.1.0.2.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isSkipResultsProcessing()"><!-- --></A><H3>
isSkipResultsProcessing</H3>
<PRE>
public boolean <B>isSkipResultsProcessing</B>()</PRE>
<DL>
<DD>Return whether results processing should be skipped.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setSkipUndeclaredResults(boolean)"><!-- --></A><H3>
setSkipUndeclaredResults</H3>
<PRE>
public void <B>setSkipUndeclaredResults</B>(boolean&nbsp;skipUndeclaredResults)</PRE>
<DL>
<DD>Set whether undelared results should be skipped.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isSkipUndeclaredResults()"><!-- --></A><H3>
isSkipUndeclaredResults</H3>
<PRE>
public boolean <B>isSkipUndeclaredResults</B>()</PRE>
<DL>
<DD>Return whether undeclared results should be skipped.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setResultsMapCaseInsensitive(boolean)"><!-- --></A><H3>
setResultsMapCaseInsensitive</H3>
<PRE>
public void <B>setResultsMapCaseInsensitive</B>(boolean&nbsp;resultsMapCaseInsensitive)</PRE>
<DL>
<DD>Set whether execution of a CallableStatement will return the results in a Map
 that uses case insensitive names for the parameters.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isResultsMapCaseInsensitive()"><!-- --></A><H3>
isResultsMapCaseInsensitive</H3>
<PRE>
public boolean <B>isResultsMapCaseInsensitive</B>()</PRE>
<DL>
<DD>Return whether execution of a CallableStatement will return the results in a Map
 that uses case insensitive names for the parameters.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="execute(org.springframework.jdbc.core.ConnectionCallback)"><!-- --></A><H3>
execute</H3>
<PRE>
public &lt;T&gt; T <B>execute</B>(<A HREF="../../../../org/springframework/jdbc/core/ConnectionCallback.html" title="interface in org.springframework.jdbc.core">ConnectionCallback</A>&lt;T&gt;&nbsp;action)
          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(org.springframework.jdbc.core.ConnectionCallback)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a JDBC data access operation, implemented as callback action
 working on a JDBC Connection. This allows for implementing arbitrary
 data access operations, within Spring's managed JDBC environment:
 that is, participating in Spring-managed transactions and converting
 JDBC SQLExceptions into Spring's DataAccessException hierarchy.
 <p>The callback action can return a result object, for example a
 domain object or a collection of domain objects.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(org.springframework.jdbc.core.ConnectionCallback)">execute</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>action</CODE> - the callback object that specifies the action
<DT><B>Returns:</B><DD>a result object returned by the action, or <code>null</code>
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem</DL>
</DD>
</DL>
<HR>

<A NAME="createConnectionProxy(java.sql.Connection)"><!-- --></A><H3>
createConnectionProxy</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html?is-external=true" title="class or interface in java.sql">Connection</A> <B>createConnectionProxy</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html?is-external=true" title="class or interface in java.sql">Connection</A>&nbsp;con)</PRE>
<DL>
<DD>Create a close-suppressing proxy for the given JDBC Connection.
 Called by the <code>execute</code> method.
 <p>The proxy also prepares returned JDBC Statements, applying
 statement settings such as fetch size, max rows, and query timeout.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>con</CODE> - the JDBC Connection to create a proxy for
<DT><B>Returns:</B><DD>the Connection proxy<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html?is-external=true#close()" title="class or interface in java.sql"><CODE>Connection.close()</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#execute(org.springframework.jdbc.core.ConnectionCallback)"><CODE>execute(ConnectionCallback)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#applyStatementSettings(java.sql.Statement)"><CODE>applyStatementSettings(java.sql.Statement)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="execute(org.springframework.jdbc.core.StatementCallback)"><!-- --></A><H3>
execute</H3>
<PRE>
public &lt;T&gt; T <B>execute</B>(<A HREF="../../../../org/springframework/jdbc/core/StatementCallback.html" title="interface in org.springframework.jdbc.core">StatementCallback</A>&lt;T&gt;&nbsp;action)
          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(org.springframework.jdbc.core.StatementCallback)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a JDBC data access operation, implemented as callback action
 working on a JDBC Statement. This allows for implementing arbitrary data
 access operations on a single Statement, within Spring's managed JDBC
 environment: that is, participating in Spring-managed transactions and
 converting JDBC SQLExceptions into Spring's DataAccessException hierarchy.
 <p>The callback action can return a result object, for example a
 domain object or a collection of domain objects.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(org.springframework.jdbc.core.StatementCallback)">execute</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>action</CODE> - callback object that specifies the action
<DT><B>Returns:</B><DD>a result object returned by the action, or <code>null</code>
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem</DL>
</DD>
</DL>
<HR>

<A NAME="execute(java.lang.String)"><!-- --></A><H3>
execute</H3>
<PRE>
public void <B>execute</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)
             throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(java.lang.String)">JdbcOperations</A></CODE></B></DD>
<DD>Issue a single SQL execute, typically a DDL statement.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(java.lang.String)">execute</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - static SQL to execute
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem</DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor)"><!-- --></A><H3>
query</H3>
<PRE>
public &lt;T&gt; T <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                   <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse)
        throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a query given static SQL, reading the ResultSet with a
 ResultSetExtractor.
 <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 execute a static query with a PreparedStatement, use the overloaded
 <code>query</code> method with <code>null</code> as argument array.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>rse</CODE> - object that will extract all rows of results
<DT><B>Returns:</B><DD>an arbitrary result object, as returned by the ResultSetExtractor
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the query<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.ResultSetExtractor)"><CODE>JdbcOperations.query(String, Object[], ResultSetExtractor)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler)"><!-- --></A><H3>
query</H3>
<PRE>
public void <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                  <A HREF="../../../../org/springframework/jdbc/core/RowCallbackHandler.html" title="interface in org.springframework.jdbc.core">RowCallbackHandler</A>&nbsp;rch)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a query given static SQL, reading the ResultSet on a per-row
 basis with a RowCallbackHandler.
 <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 execute a static query with a PreparedStatement, use the overloaded
 <code>query</code> method with <code>null</code> as argument array.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>rch</CODE> - object that will extract results, one row at a time
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the query<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowCallbackHandler)"><CODE>JdbcOperations.query(String, Object[], RowCallbackHandler)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, org.springframework.jdbc.core.RowMapper)"><!-- --></A><H3>
query</H3>
<PRE>
public &lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt; <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                         <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)
              throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.RowMapper)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a query given static SQL, mapping each row to a Java object
 via a RowMapper.
 <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 execute a static query with a PreparedStatement, use the overloaded
 <code>query</code> method with <code>null</code> as argument array.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.RowMapper)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>rowMapper</CODE> - object that will map one object per row
<DT><B>Returns:</B><DD>the result List, containing mapped objects
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the query<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper)"><CODE>JdbcOperations.query(String, Object[], RowMapper)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForMap(java.lang.String)"><!-- --></A><H3>
queryForMap</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt; <B>queryForMap</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)
                               throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForMap(java.lang.String)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a query for a result Map, given static SQL.
 <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 execute a static query with a PreparedStatement, use the overloaded
 <code>queryForMap</code> method with <code>null</code> as argument array.
 <p>The query is expected to be a single row query; the result row will be
 mapped to a Map (one entry for each column, using the column name as the key).
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForMap(java.lang.String)">queryForMap</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute
<DT><B>Returns:</B><DD>the result Map (one entry for each column, using the
 column name as the key)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not
 return exactly one row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the query<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForMap(java.lang.String, java.lang.Object...)"><CODE>JdbcOperations.queryForMap(String, Object[])</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/ColumnMapRowMapper.html" title="class in org.springframework.jdbc.core"><CODE>ColumnMapRowMapper</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForObject(java.lang.String, org.springframework.jdbc.core.RowMapper)"><!-- --></A><H3>
queryForObject</H3>
<PRE>
public &lt;T&gt; T <B>queryForObject</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                            <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)
                 throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, org.springframework.jdbc.core.RowMapper)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a query given static SQL, mapping a single result row to a Java
 object via a RowMapper.
 <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 execute a static query with a PreparedStatement, use the overloaded
 <code>queryForObject</code> method with <code>null</code> as argument array.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, org.springframework.jdbc.core.RowMapper)">queryForObject</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>rowMapper</CODE> - object that will map one object per row
<DT><B>Returns:</B><DD>the single mapped object
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not
 return exactly one row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the query<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper)"><CODE>JdbcOperations.queryForObject(String, Object[], RowMapper)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForObject(java.lang.String, java.lang.Class)"><!-- --></A><H3>
queryForObject</H3>
<PRE>
public &lt;T&gt; T <B>queryForObject</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)
                 throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Class)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a query for a result object, given static SQL.
 <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 execute a static query with a PreparedStatement, use the overloaded
 <code>queryForObject</code> method with <code>null</code> as argument array.
 <p>This method is useful for running static SQL with a known outcome.
 The query is expected to be a single row/single column query; the returned
 result will be directly mapped to the corresponding object type.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Class)">queryForObject</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>requiredType</CODE> - the type that the result object is expected to match
<DT><B>Returns:</B><DD>the result object of the required type, or <code>null</code> in case of SQL NULL
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not return
 exactly one row, or does not return exactly one column in that row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the query<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Object[], java.lang.Class)"><CODE>JdbcOperations.queryForObject(String, Object[], Class)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForLong(java.lang.String)"><!-- --></A><H3>
queryForLong</H3>
<PRE>
public long <B>queryForLong</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)
                  throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForLong(java.lang.String)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a query that results in a long value, given static SQL.
 <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 execute a static query with a PreparedStatement, use the overloaded
 <code>queryForLong</code> method with <code>null</code> as argument array.
 <p>This method is useful for running static SQL with a known outcome.
 The query is expected to be a single row/single column query that results
 in a long value.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForLong(java.lang.String)">queryForLong</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute
<DT><B>Returns:</B><DD>the long value, or 0 in case of SQL NULL
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not return
 exactly one row, or does not return exactly one column in that row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the query<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForLong(java.lang.String, java.lang.Object...)"><CODE>JdbcOperations.queryForLong(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForInt(java.lang.String)"><!-- --></A><H3>
queryForInt</H3>
<PRE>
public int <B>queryForInt</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)
                throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForInt(java.lang.String)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a query that results in an int value, given static SQL.
 <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 execute a static query with a PreparedStatement, use the overloaded
 <code>queryForInt</code> method with <code>null</code> as argument array.
 <p>This method is useful for running static SQL with a known outcome.
 The query is expected to be a single row/single column query that results
 in an int value.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForInt(java.lang.String)">queryForInt</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute
<DT><B>Returns:</B><DD>the int value, or 0 in case of SQL NULL
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not return
 exactly one row, or does not return exactly one column in that row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the query<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForInt(java.lang.String, java.lang.Object...)"><CODE>JdbcOperations.queryForInt(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForList(java.lang.String, java.lang.Class)"><!-- --></A><H3>
queryForList</H3>
<PRE>
public &lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt; <B>queryForList</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;elementType)
                     throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Class)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a query for a result list, given static SQL.
 <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 execute a static query with a PreparedStatement, use the overloaded
 <code>queryForList</code> method with <code>null</code> as argument array.
 <p>The results will be mapped to a List (one entry for each row) of
 result objects, each of them matching the specified element type.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Class)">queryForList</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>elementType</CODE> - the required type of element in the result list
 (for example, <code>Integer.class</code>)
<DT><B>Returns:</B><DD>a List of objects that match the specified element type
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the query<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Object[], java.lang.Class)"><CODE>JdbcOperations.queryForList(String, Object[], Class)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/SingleColumnRowMapper.html" title="class in org.springframework.jdbc.core"><CODE>SingleColumnRowMapper</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForList(java.lang.String)"><!-- --></A><H3>
queryForList</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;&gt; <B>queryForList</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)
                                      throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a query for a result list, given static SQL.
 <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 execute a static query with a PreparedStatement, use the overloaded
 <code>queryForList</code> method with <code>null</code> as argument array.
 <p>The results will be mapped to a List (one entry for each row) of
 Maps (one entry for each column using the column name as the key).
 Each element in the list will be of the form returned by this interface's
 queryForMap() methods.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String)">queryForList</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute
<DT><B>Returns:</B><DD>an List that contains a Map per row
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the query<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Object...)"><CODE>JdbcOperations.queryForList(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForRowSet(java.lang.String)"><!-- --></A><H3>
queryForRowSet</H3>
<PRE>
public <A HREF="../../../../org/springframework/jdbc/support/rowset/SqlRowSet.html" title="interface in org.springframework.jdbc.support.rowset">SqlRowSet</A> <B>queryForRowSet</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)
                         throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForRowSet(java.lang.String)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a query for a SqlRowSet, given static SQL.
 <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 execute a static query with a PreparedStatement, use the overloaded
 <code>queryForRowSet</code> method with <code>null</code> as argument array.
 <p>The results will be mapped to an SqlRowSet which holds the data in a
 disconnected fashion. This wrapper will translate any SQLExceptions thrown.
 <p>Note that that, for the default implementation, JDBC RowSet support needs to
 be available at runtime: by default, Sun's <code>com.sun.rowset.CachedRowSetImpl</code>
 class is used, which is part of JDK 1.5+ and also available separately as part of
 Sun's JDBC RowSet Implementations download (rowset.jar).
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForRowSet(java.lang.String)">queryForRowSet</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute
<DT><B>Returns:</B><DD>a SqlRowSet representation (possibly a wrapper around a
 <code>javax.sql.rowset.CachedRowSet</code>)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the query<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForRowSet(java.lang.String, java.lang.Object...)"><CODE>JdbcOperations.queryForRowSet(String, Object[])</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/SqlRowSetResultSetExtractor.html" title="class in org.springframework.jdbc.core"><CODE>SqlRowSetResultSetExtractor</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/javax/sql/rowset/CachedRowSet.html?is-external=true" title="class or interface in javax.sql.rowset"><CODE>CachedRowSet</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="update(java.lang.String)"><!-- --></A><H3>
update</H3>
<PRE>
public int <B>update</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#update(java.lang.String)">JdbcOperations</A></CODE></B></DD>
<DD>Issue a single SQL update operation (such as an insert, update or delete statement).
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#update(java.lang.String)">update</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - static SQL to execute
<DT><B>Returns:</B><DD>the number of rows affected
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem.</DL>
</DD>
</DL>
<HR>

<A NAME="batchUpdate(java.lang.String[])"><!-- --></A><H3>
batchUpdate</H3>
<PRE>
public int[] <B>batchUpdate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]&nbsp;sql)
                  throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#batchUpdate(java.lang.String[])">JdbcOperations</A></CODE></B></DD>
<DD>Issue multiple SQL updates on a single JDBC Statement using batching.
 <p>Will fall back to separate updates on a single Statement if the JDBC
 driver does not support batch updates.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#batchUpdate(java.lang.String[])">batchUpdate</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - defining an array of SQL statements that will be executed.
<DT><B>Returns:</B><DD>an array of the number of rows affected by each statement
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the batch</DL>
</DD>
</DL>
<HR>

<A NAME="execute(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementCallback)"><!-- --></A><H3>
execute</H3>
<PRE>
public &lt;T&gt; T <B>execute</B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
                     <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCallback.html" title="interface in org.springframework.jdbc.core">PreparedStatementCallback</A>&lt;T&gt;&nbsp;action)
          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementCallback)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a JDBC data access operation, implemented as callback action
 working on a JDBC PreparedStatement. This allows for implementing arbitrary
 data access operations on a single Statement, within Spring's managed
 JDBC environment: that is, participating in Spring-managed transactions
 and converting JDBC SQLExceptions into Spring's DataAccessException hierarchy.
 <p>The callback action can return a result object, for example a
 domain object or a collection of domain objects.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementCallback)">execute</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>psc</CODE> - object that can create a PreparedStatement given a Connection<DD><CODE>action</CODE> - callback object that specifies the action
<DT><B>Returns:</B><DD>a result object returned by the action, or <code>null</code>
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem</DL>
</DD>
</DL>
<HR>

<A NAME="execute(java.lang.String, org.springframework.jdbc.core.PreparedStatementCallback)"><!-- --></A><H3>
execute</H3>
<PRE>
public &lt;T&gt; T <B>execute</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                     <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCallback.html" title="interface in org.springframework.jdbc.core">PreparedStatementCallback</A>&lt;T&gt;&nbsp;action)
          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(java.lang.String, org.springframework.jdbc.core.PreparedStatementCallback)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a JDBC data access operation, implemented as callback action
 working on a JDBC PreparedStatement. This allows for implementing arbitrary
 data access operations on a single Statement, within Spring's managed
 JDBC environment: that is, participating in Spring-managed transactions
 and converting JDBC SQLExceptions into Spring's DataAccessException hierarchy.
 <p>The callback action can return a result object, for example a
 domain object or a collection of domain objects.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(java.lang.String, org.springframework.jdbc.core.PreparedStatementCallback)">execute</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL to execute<DD><CODE>action</CODE> - callback object that specifies the action
<DT><B>Returns:</B><DD>a result object returned by the action, or <code>null</code>
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem</DL>
</DD>
</DL>
<HR>

<A NAME="query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.ResultSetExtractor)"><!-- --></A><H3>
query</H3>
<PRE>
public &lt;T&gt; T <B>query</B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
                   <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A>&nbsp;pss,
                   <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse)
        throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD>Query using a prepared statement, allowing for a PreparedStatementCreator
 and a PreparedStatementSetter. Most other query methods use this method,
 but application code will always work with either a creator or a setter.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>psc</CODE> - Callback handler that can create a PreparedStatement given a
 Connection<DD><CODE>pss</CODE> - object that knows how to set values on the prepared statement.
 If this is null, the SQL will be assumed to contain no bind parameters.<DD><CODE>rse</CODE> - object that will extract results.
<DT><B>Returns:</B><DD>an arbitrary result object, as returned by the ResultSetExtractor
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem</DL>
</DD>
</DL>
<HR>

<A NAME="query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.ResultSetExtractor)"><!-- --></A><H3>
query</H3>
<PRE>
public &lt;T&gt; T <B>query</B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
                   <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse)
        throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.ResultSetExtractor)">JdbcOperations</A></CODE></B></DD>
<DD>Query using a prepared statement, reading the ResultSet with a
 ResultSetExtractor.
 <p>A PreparedStatementCreator can either be implemented directly or
 configured through a PreparedStatementCreatorFactory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.ResultSetExtractor)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>psc</CODE> - object that can create a PreparedStatement given a Connection<DD><CODE>rse</CODE> - object that will extract results
<DT><B>Returns:</B><DD>an arbitrary result object, as returned by the ResultSetExtractor
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreatorFactory.html" title="class in org.springframework.jdbc.core"><CODE>PreparedStatementCreatorFactory</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.ResultSetExtractor)"><!-- --></A><H3>
query</H3>
<PRE>
public &lt;T&gt; T <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                   <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A>&nbsp;pss,
                   <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse)
        throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.ResultSetExtractor)">JdbcOperations</A></CODE></B></DD>
<DD>Query using a prepared statement, reading the ResultSet with a
 ResultSetExtractor.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.ResultSetExtractor)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>pss</CODE> - object that knows how to set values on the prepared statement.
 If this is <code>null</code>, the SQL will be assumed to contain no bind parameters.
 Even if there are no bind parameters, this object may be used to
 set fetch size and other performance options.<DD><CODE>rse</CODE> - object that will extract results
<DT><B>Returns:</B><DD>an arbitrary result object, as returned by the ResultSetExtractor
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem</DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.ResultSetExtractor)"><!-- --></A><H3>
query</H3>
<PRE>
public &lt;T&gt; T <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                   int[]&nbsp;argTypes,
                   <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse)
        throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.ResultSetExtractor)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, reading the ResultSet with a
 ResultSetExtractor.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.ResultSetExtractor)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query<DD><CODE>argTypes</CODE> - SQL types of the arguments
 (constants from <code>java.sql.Types</code>)<DD><CODE>rse</CODE> - object that will extract results
<DT><B>Returns:</B><DD>an arbitrary result object, as returned by the ResultSetExtractor
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Types.html?is-external=true" title="class or interface in java.sql"><CODE>Types</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.ResultSetExtractor)"><!-- --></A><H3>
query</H3>
<PRE>
public &lt;T&gt; T <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                   <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse)
        throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.ResultSetExtractor)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, reading the ResultSet with a
 ResultSetExtractor.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.ResultSetExtractor)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale<DD><CODE>rse</CODE> - object that will extract results
<DT><B>Returns:</B><DD>an arbitrary result object, as returned by the ResultSetExtractor
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails</DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor, java.lang.Object...)"><!-- --></A><H3>
query</H3>
<PRE>
public &lt;T&gt; T <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                   <A HREF="../../../../org/springframework/jdbc/core/ResultSetExtractor.html" title="interface in org.springframework.jdbc.core">ResultSetExtractor</A>&lt;T&gt;&nbsp;rse,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
        throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor, java.lang.Object...)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, reading the ResultSet with a
 ResultSetExtractor.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor, java.lang.Object...)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>rse</CODE> - object that will extract results<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale
<DT><B>Returns:</B><DD>an arbitrary result object, as returned by the ResultSetExtractor
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails</DL>
</DD>
</DL>
<HR>

<A NAME="query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowCallbackHandler)"><!-- --></A><H3>
query</H3>
<PRE>
public void <B>query</B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
                  <A HREF="../../../../org/springframework/jdbc/core/RowCallbackHandler.html" title="interface in org.springframework.jdbc.core">RowCallbackHandler</A>&nbsp;rch)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowCallbackHandler)">JdbcOperations</A></CODE></B></DD>
<DD>Query using a prepared statement, reading the ResultSet on a per-row
 basis with a RowCallbackHandler.
 <p>A PreparedStatementCreator can either be implemented directly or
 configured through a PreparedStatementCreatorFactory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowCallbackHandler)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>psc</CODE> - object that can create a PreparedStatement given a Connection<DD><CODE>rch</CODE> - object that will extract results, one row at a time
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreatorFactory.html" title="class in org.springframework.jdbc.core"><CODE>PreparedStatementCreatorFactory</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowCallbackHandler)"><!-- --></A><H3>
query</H3>
<PRE>
public void <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                  <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A>&nbsp;pss,
                  <A HREF="../../../../org/springframework/jdbc/core/RowCallbackHandler.html" title="interface in org.springframework.jdbc.core">RowCallbackHandler</A>&nbsp;rch)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowCallbackHandler)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 PreparedStatementSetter implementation that knows how to bind values
 to the query, reading the ResultSet on a per-row basis with a
 RowCallbackHandler.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowCallbackHandler)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>pss</CODE> - object that knows how to set values on the prepared statement.
 If this is <code>null</code>, the SQL will be assumed to contain no bind parameters.
 Even if there are no bind parameters, this object may be used to
 set fetch size and other performance options.<DD><CODE>rch</CODE> - object that will extract results, one row at a time
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails</DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowCallbackHandler)"><!-- --></A><H3>
query</H3>
<PRE>
public void <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                  <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                  int[]&nbsp;argTypes,
                  <A HREF="../../../../org/springframework/jdbc/core/RowCallbackHandler.html" title="interface in org.springframework.jdbc.core">RowCallbackHandler</A>&nbsp;rch)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowCallbackHandler)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a list of
 arguments to bind to the query, reading the ResultSet on a per-row basis
 with a RowCallbackHandler.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowCallbackHandler)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query<DD><CODE>argTypes</CODE> - SQL types of the arguments
 (constants from <code>java.sql.Types</code>)<DD><CODE>rch</CODE> - object that will extract results, one row at a time
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Types.html?is-external=true" title="class or interface in java.sql"><CODE>Types</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowCallbackHandler)"><!-- --></A><H3>
query</H3>
<PRE>
public void <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                  <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                  <A HREF="../../../../org/springframework/jdbc/core/RowCallbackHandler.html" title="interface in org.springframework.jdbc.core">RowCallbackHandler</A>&nbsp;rch)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowCallbackHandler)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a list of
 arguments to bind to the query, reading the ResultSet on a per-row basis
 with a RowCallbackHandler.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowCallbackHandler)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale<DD><CODE>rch</CODE> - object that will extract results, one row at a time
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails</DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler, java.lang.Object...)"><!-- --></A><H3>
query</H3>
<PRE>
public void <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                  <A HREF="../../../../org/springframework/jdbc/core/RowCallbackHandler.html" title="interface in org.springframework.jdbc.core">RowCallbackHandler</A>&nbsp;rch,
                  <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler, java.lang.Object...)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a list of
 arguments to bind to the query, reading the ResultSet on a per-row basis
 with a RowCallbackHandler.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler, java.lang.Object...)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>rch</CODE> - object that will extract results, one row at a time<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails</DL>
</DD>
</DL>
<HR>

<A NAME="query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowMapper)"><!-- --></A><H3>
query</H3>
<PRE>
public &lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt; <B>query</B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
                         <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)
              throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowMapper)">JdbcOperations</A></CODE></B></DD>
<DD>Query using a prepared statement, mapping each row to a Java object
 via a RowMapper.
 <p>A PreparedStatementCreator can either be implemented directly or
 configured through a PreparedStatementCreatorFactory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowMapper)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>psc</CODE> - object that can create a PreparedStatement given a Connection<DD><CODE>rowMapper</CODE> - object that will map one object per row
<DT><B>Returns:</B><DD>the result List, containing mapped objects
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreatorFactory.html" title="class in org.springframework.jdbc.core"><CODE>PreparedStatementCreatorFactory</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowMapper)"><!-- --></A><H3>
query</H3>
<PRE>
public &lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt; <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                         <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A>&nbsp;pss,
                         <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)
              throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowMapper)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 PreparedStatementSetter implementation that knows how to bind values
 to the query, mapping each row to a Java object via a RowMapper.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowMapper)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>pss</CODE> - object that knows how to set values on the prepared statement.
 If this is <code>null</code>, the SQL will be assumed to contain no bind parameters.
 Even if there are no bind parameters, this object may be used to
 set fetch size and other performance options.<DD><CODE>rowMapper</CODE> - object that will map one object per row
<DT><B>Returns:</B><DD>the result List, containing mapped objects
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails</DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowMapper)"><!-- --></A><H3>
query</H3>
<PRE>
public &lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt; <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                         int[]&nbsp;argTypes,
                         <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)
              throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowMapper)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, mapping each row to a Java object
 via a RowMapper.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowMapper)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query<DD><CODE>argTypes</CODE> - SQL types of the arguments
 (constants from <code>java.sql.Types</code>)<DD><CODE>rowMapper</CODE> - object that will map one object per row
<DT><B>Returns:</B><DD>the result List, containing mapped objects
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Types.html?is-external=true" title="class or interface in java.sql"><CODE>Types</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper)"><!-- --></A><H3>
query</H3>
<PRE>
public &lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt; <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                         <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)
              throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, mapping each row to a Java object
 via a RowMapper.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale<DD><CODE>rowMapper</CODE> - object that will map one object per row
<DT><B>Returns:</B><DD>the result List, containing mapped objects
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails</DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String, org.springframework.jdbc.core.RowMapper, java.lang.Object...)"><!-- --></A><H3>
query</H3>
<PRE>
public &lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt; <B>query</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                         <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
              throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.RowMapper, java.lang.Object...)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, mapping each row to a Java object
 via a RowMapper.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#query(java.lang.String, org.springframework.jdbc.core.RowMapper, java.lang.Object...)">query</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>rowMapper</CODE> - object that will map one object per row<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale
<DT><B>Returns:</B><DD>the result List, containing mapped objects
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails</DL>
</DD>
</DL>
<HR>

<A NAME="queryForObject(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowMapper)"><!-- --></A><H3>
queryForObject</H3>
<PRE>
public &lt;T&gt; T <B>queryForObject</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                            int[]&nbsp;argTypes,
                            <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)
                 throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowMapper)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, mapping a single result row to a
 Java object via a RowMapper.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowMapper)">queryForObject</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type)<DD><CODE>argTypes</CODE> - SQL types of the arguments
 (constants from <code>java.sql.Types</code>)<DD><CODE>rowMapper</CODE> - object that will map one object per row
<DT><B>Returns:</B><DD>the single mapped object
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not
 return exactly one row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails</DL>
</DD>
</DL>
<HR>

<A NAME="queryForObject(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper)"><!-- --></A><H3>
queryForObject</H3>
<PRE>
public &lt;T&gt; T <B>queryForObject</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                            <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper)
                 throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, mapping a single result row to a
 Java object via a RowMapper.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper)">queryForObject</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale<DD><CODE>rowMapper</CODE> - object that will map one object per row
<DT><B>Returns:</B><DD>the single mapped object
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not
 return exactly one row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails</DL>
</DD>
</DL>
<HR>

<A NAME="queryForObject(java.lang.String, org.springframework.jdbc.core.RowMapper, java.lang.Object...)"><!-- --></A><H3>
queryForObject</H3>
<PRE>
public &lt;T&gt; T <B>queryForObject</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                            <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt;&nbsp;rowMapper,
                            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
                 throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, org.springframework.jdbc.core.RowMapper, java.lang.Object...)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a list
 of arguments to bind to the query, mapping a single result row to a
 Java object via a RowMapper.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, org.springframework.jdbc.core.RowMapper, java.lang.Object...)">queryForObject</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>rowMapper</CODE> - object that will map one object per row<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale
<DT><B>Returns:</B><DD>the single mapped object
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not
 return exactly one row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails</DL>
</DD>
</DL>
<HR>

<A NAME="queryForObject(java.lang.String, java.lang.Object[], int[], java.lang.Class)"><!-- --></A><H3>
queryForObject</H3>
<PRE>
public &lt;T&gt; T <B>queryForObject</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                            int[]&nbsp;argTypes,
                            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)
                 throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Object[], int[], java.lang.Class)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result object.
 <p>The query is expected to be a single row/single column query; the returned
 result will be directly mapped to the corresponding object type.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Object[], int[], java.lang.Class)">queryForObject</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query<DD><CODE>argTypes</CODE> - SQL types of the arguments
 (constants from <code>java.sql.Types</code>)<DD><CODE>requiredType</CODE> - the type that the result object is expected to match
<DT><B>Returns:</B><DD>the result object of the required type, or <code>null</code> in case of SQL NULL
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not return
 exactly one row, or does not return exactly one column in that row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Class)"><CODE>JdbcOperations.queryForObject(String, Class)</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Types.html?is-external=true" title="class or interface in java.sql"><CODE>Types</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForObject(java.lang.String, java.lang.Object[], java.lang.Class)"><!-- --></A><H3>
queryForObject</H3>
<PRE>
public &lt;T&gt; T <B>queryForObject</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)
                 throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Object[], java.lang.Class)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result object.
 <p>The query is expected to be a single row/single column query; the returned
 result will be directly mapped to the corresponding object type.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Object[], java.lang.Class)">queryForObject</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale<DD><CODE>requiredType</CODE> - the type that the result object is expected to match
<DT><B>Returns:</B><DD>the result object of the required type, or <code>null</code> in case of SQL NULL
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not return
 exactly one row, or does not return exactly one column in that row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Class)"><CODE>JdbcOperations.queryForObject(String, Class)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForObject(java.lang.String, java.lang.Class, java.lang.Object...)"><!-- --></A><H3>
queryForObject</H3>
<PRE>
public &lt;T&gt; T <B>queryForObject</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType,
                            <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
                 throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Class, java.lang.Object...)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result object.
 <p>The query is expected to be a single row/single column query; the returned
 result will be directly mapped to the corresponding object type.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Class, java.lang.Object...)">queryForObject</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>requiredType</CODE> - the type that the result object is expected to match<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale
<DT><B>Returns:</B><DD>the result object of the required type, or <code>null</code> in case of SQL NULL
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not return
 exactly one row, or does not return exactly one column in that row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForObject(java.lang.String, java.lang.Class)"><CODE>JdbcOperations.queryForObject(String, Class)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForMap(java.lang.String, java.lang.Object[], int[])"><!-- --></A><H3>
queryForMap</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt; <B>queryForMap</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                                      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                                      int[]&nbsp;argTypes)
                               throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForMap(java.lang.String, java.lang.Object[], int[])">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result Map.
 <p>The query is expected to be a single row query; the result row will be
 mapped to a Map (one entry for each column, using the column name as the key).
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForMap(java.lang.String, java.lang.Object[], int[])">queryForMap</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query<DD><CODE>argTypes</CODE> - SQL types of the arguments
 (constants from <code>java.sql.Types</code>)
<DT><B>Returns:</B><DD>the result Map (one entry for each column, using the
 column name as the key)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not
 return exactly one row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForMap(java.lang.String)"><CODE>JdbcOperations.queryForMap(String)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/ColumnMapRowMapper.html" title="class in org.springframework.jdbc.core"><CODE>ColumnMapRowMapper</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Types.html?is-external=true" title="class or interface in java.sql"><CODE>Types</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForMap(java.lang.String, java.lang.Object...)"><!-- --></A><H3>
queryForMap</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt; <B>queryForMap</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                                      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
                               throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForMap(java.lang.String, java.lang.Object...)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result Map.
 The queryForMap() methods defined by this interface are appropriate
 when you don't have a domain model. Otherwise, consider using
 one of the queryForObject() methods.
 <p>The query is expected to be a single row query; the result row will be
 mapped to a Map (one entry for each column, using the column name as the key).
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForMap(java.lang.String, java.lang.Object...)">queryForMap</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale
<DT><B>Returns:</B><DD>the result Map (one entry for each column, using the
 column name as the key)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not
 return exactly one row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForMap(java.lang.String)"><CODE>JdbcOperations.queryForMap(String)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/ColumnMapRowMapper.html" title="class in org.springframework.jdbc.core"><CODE>ColumnMapRowMapper</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForLong(java.lang.String, java.lang.Object[], int[])"><!-- --></A><H3>
queryForLong</H3>
<PRE>
public long <B>queryForLong</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                         int[]&nbsp;argTypes)
                  throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForLong(java.lang.String, java.lang.Object[], int[])">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, resulting in a long value.
 <p>The query is expected to be a single row/single column query that
 results in a long value.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForLong(java.lang.String, java.lang.Object[], int[])">queryForLong</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query<DD><CODE>argTypes</CODE> - SQL types of the arguments
 (constants from <code>java.sql.Types</code>)
<DT><B>Returns:</B><DD>the long value, or 0 in case of SQL NULL
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not return
 exactly one row, or does not return exactly one column in that row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForLong(java.lang.String)"><CODE>JdbcOperations.queryForLong(String)</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Types.html?is-external=true" title="class or interface in java.sql"><CODE>Types</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForLong(java.lang.String, java.lang.Object...)"><!-- --></A><H3>
queryForLong</H3>
<PRE>
public long <B>queryForLong</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                         <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
                  throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForLong(java.lang.String, java.lang.Object...)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, resulting in a long value.
 <p>The query is expected to be a single row/single column query that
 results in a long value.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForLong(java.lang.String, java.lang.Object...)">queryForLong</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale
<DT><B>Returns:</B><DD>the long value, or 0 in case of SQL NULL
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not return
 exactly one row, or does not return exactly one column in that row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForLong(java.lang.String)"><CODE>JdbcOperations.queryForLong(String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForInt(java.lang.String, java.lang.Object[], int[])"><!-- --></A><H3>
queryForInt</H3>
<PRE>
public int <B>queryForInt</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                       <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                       int[]&nbsp;argTypes)
                throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForInt(java.lang.String, java.lang.Object[], int[])">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, resulting in an int value.
 <p>The query is expected to be a single row/single column query that
 results in an int value.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForInt(java.lang.String, java.lang.Object[], int[])">queryForInt</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query<DD><CODE>argTypes</CODE> - SQL types of the arguments
 (constants from <code>java.sql.Types</code>)
<DT><B>Returns:</B><DD>the int value, or 0 in case of SQL NULL
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not return
 exactly one row, or does not return exactly one column in that row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForInt(java.lang.String)"><CODE>JdbcOperations.queryForInt(String)</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Types.html?is-external=true" title="class or interface in java.sql"><CODE>Types</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForInt(java.lang.String, java.lang.Object...)"><!-- --></A><H3>
queryForInt</H3>
<PRE>
public int <B>queryForInt</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                       <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
                throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForInt(java.lang.String, java.lang.Object...)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, resulting in an int value.
 <p>The query is expected to be a single row/single column query that
 results in an int value.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForInt(java.lang.String, java.lang.Object...)">queryForInt</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale
<DT><B>Returns:</B><DD>the int value, or 0 in case of SQL NULL
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/IncorrectResultSizeDataAccessException.html" title="class in org.springframework.dao">IncorrectResultSizeDataAccessException</A></CODE> - if the query does not return
 exactly one row, or does not return exactly one column in that row
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForInt(java.lang.String)"><CODE>JdbcOperations.queryForInt(String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForList(java.lang.String, java.lang.Object[], int[], java.lang.Class)"><!-- --></A><H3>
queryForList</H3>
<PRE>
public &lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt; <B>queryForList</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                                int[]&nbsp;argTypes,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;elementType)
                     throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Object[], int[], java.lang.Class)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result list.
 <p>The results will be mapped to a List (one entry for each row) of
 result objects, each of them matching the specified element type.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Object[], int[], java.lang.Class)">queryForList</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query<DD><CODE>argTypes</CODE> - SQL types of the arguments
 (constants from <code>java.sql.Types</code>)<DD><CODE>elementType</CODE> - the required type of element in the result list
 (for example, <code>Integer.class</code>)
<DT><B>Returns:</B><DD>a List of objects that match the specified element type
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Class)"><CODE>JdbcOperations.queryForList(String, Class)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/SingleColumnRowMapper.html" title="class in org.springframework.jdbc.core"><CODE>SingleColumnRowMapper</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForList(java.lang.String, java.lang.Object[], java.lang.Class)"><!-- --></A><H3>
queryForList</H3>
<PRE>
public &lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt; <B>queryForList</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;elementType)
                     throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Object[], java.lang.Class)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result list.
 <p>The results will be mapped to a List (one entry for each row) of
 result objects, each of them matching the specified element type.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Object[], java.lang.Class)">queryForList</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale<DD><CODE>elementType</CODE> - the required type of element in the result list
 (for example, <code>Integer.class</code>)
<DT><B>Returns:</B><DD>a List of objects that match the specified element type
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Class)"><CODE>JdbcOperations.queryForList(String, Class)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/SingleColumnRowMapper.html" title="class in org.springframework.jdbc.core"><CODE>SingleColumnRowMapper</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForList(java.lang.String, java.lang.Class, java.lang.Object...)"><!-- --></A><H3>
queryForList</H3>
<PRE>
public &lt;T&gt; <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;T&gt; <B>queryForList</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;elementType,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
                     throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Class, java.lang.Object...)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result list.
 <p>The results will be mapped to a List (one entry for each row) of
 result objects, each of them matching the specified element type.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Class, java.lang.Object...)">queryForList</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>elementType</CODE> - the required type of element in the result list
 (for example, <code>Integer.class</code>)<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale
<DT><B>Returns:</B><DD>a List of objects that match the specified element type
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Class)"><CODE>JdbcOperations.queryForList(String, Class)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/SingleColumnRowMapper.html" title="class in org.springframework.jdbc.core"><CODE>SingleColumnRowMapper</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForList(java.lang.String, java.lang.Object[], int[])"><!-- --></A><H3>
queryForList</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;&gt; <B>queryForList</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                                             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                                             int[]&nbsp;argTypes)
                                      throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Object[], int[])">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result list.
 <p>The results will be mapped to a List (one entry for each row) of
 Maps (one entry for each column, using the column name as the key).
 Thus  Each element in the list will be of the form returned by this interface's
 queryForMap() methods.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Object[], int[])">queryForList</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query<DD><CODE>argTypes</CODE> - SQL types of the arguments
 (constants from <code>java.sql.Types</code>)
<DT><B>Returns:</B><DD>a List that contains a Map per row
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String)"><CODE>JdbcOperations.queryForList(String)</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Types.html?is-external=true" title="class or interface in java.sql"><CODE>Types</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForList(java.lang.String, java.lang.Object...)"><!-- --></A><H3>
queryForList</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;&gt; <B>queryForList</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                                             <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
                                      throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Object...)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a result list.
 <p>The results will be mapped to a List (one entry for each row) of
 Maps (one entry for each column, using the column name as the key).
 Each element in the list will be of the form returned by this interface's
 queryForMap() methods.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String, java.lang.Object...)">queryForList</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale
<DT><B>Returns:</B><DD>a List that contains a Map per row
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if the query fails<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForList(java.lang.String)"><CODE>JdbcOperations.queryForList(String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForRowSet(java.lang.String, java.lang.Object[], int[])"><!-- --></A><H3>
queryForRowSet</H3>
<PRE>
public <A HREF="../../../../org/springframework/jdbc/support/rowset/SqlRowSet.html" title="interface in org.springframework.jdbc.support.rowset">SqlRowSet</A> <B>queryForRowSet</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                                int[]&nbsp;argTypes)
                         throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForRowSet(java.lang.String, java.lang.Object[], int[])">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a SqlRowSet.
 <p>The results will be mapped to an SqlRowSet which holds the data in a
 disconnected fashion. This wrapper will translate any SQLExceptions thrown.
 <p>Note that that, for the default implementation, JDBC RowSet support needs to
 be available at runtime: by default, Sun's <code>com.sun.rowset.CachedRowSetImpl</code>
 class is used, which is part of JDK 1.5+ and also available separately as part of
 Sun's JDBC RowSet Implementations download (rowset.jar).
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForRowSet(java.lang.String, java.lang.Object[], int[])">queryForRowSet</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query<DD><CODE>argTypes</CODE> - SQL types of the arguments
 (constants from <code>java.sql.Types</code>)
<DT><B>Returns:</B><DD>a SqlRowSet representation (possibly a wrapper around a
 <code>javax.sql.rowset.CachedRowSet</code>)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the query<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForRowSet(java.lang.String)"><CODE>JdbcOperations.queryForRowSet(String)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/SqlRowSetResultSetExtractor.html" title="class in org.springframework.jdbc.core"><CODE>SqlRowSetResultSetExtractor</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/javax/sql/rowset/CachedRowSet.html?is-external=true" title="class or interface in javax.sql.rowset"><CODE>CachedRowSet</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Types.html?is-external=true" title="class or interface in java.sql"><CODE>Types</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="queryForRowSet(java.lang.String, java.lang.Object...)"><!-- --></A><H3>
queryForRowSet</H3>
<PRE>
public <A HREF="../../../../org/springframework/jdbc/support/rowset/SqlRowSet.html" title="interface in org.springframework.jdbc.support.rowset">SqlRowSet</A> <B>queryForRowSet</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
                         throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForRowSet(java.lang.String, java.lang.Object...)">JdbcOperations</A></CODE></B></DD>
<DD>Query given SQL to create a prepared statement from SQL and a
 list of arguments to bind to the query, expecting a SqlRowSet.
 <p>The results will be mapped to an SqlRowSet which holds the data in a
 disconnected fashion. This wrapper will translate any SQLExceptions thrown.
 <p>Note that that, for the default implementation, JDBC RowSet support needs to
 be available at runtime: by default, Sun's <code>com.sun.rowset.CachedRowSetImpl</code>
 class is used, which is part of JDK 1.5+ and also available separately as part of
 Sun's JDBC RowSet Implementations download (rowset.jar).
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForRowSet(java.lang.String, java.lang.Object...)">queryForRowSet</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL query to execute<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale
<DT><B>Returns:</B><DD>a SqlRowSet representation (possibly a wrapper around a
 <code>javax.sql.rowset.CachedRowSet</code>)
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem executing the query<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#queryForRowSet(java.lang.String)"><CODE>JdbcOperations.queryForRowSet(String)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/SqlRowSetResultSetExtractor.html" title="class in org.springframework.jdbc.core"><CODE>SqlRowSetResultSetExtractor</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/javax/sql/rowset/CachedRowSet.html?is-external=true" title="class or interface in javax.sql.rowset"><CODE>CachedRowSet</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="update(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementSetter)"><!-- --></A><H3>
update</H3>
<PRE>
protected int <B>update</B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
                     <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A>&nbsp;pss)
              throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="update(org.springframework.jdbc.core.PreparedStatementCreator)"><!-- --></A><H3>
update</H3>
<PRE>
public int <B>update</B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#update(org.springframework.jdbc.core.PreparedStatementCreator)">JdbcOperations</A></CODE></B></DD>
<DD>Issue a single SQL update operation (such as an insert, update or delete statement)
 using a PreparedStatementCreator to provide SQL and any required parameters.
 <p>A PreparedStatementCreator can either be implemented directly or
 configured through a PreparedStatementCreatorFactory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#update(org.springframework.jdbc.core.PreparedStatementCreator)">update</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>psc</CODE> - object that provides SQL and any necessary parameters
<DT><B>Returns:</B><DD>the number of rows affected
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem issuing the update<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreatorFactory.html" title="class in org.springframework.jdbc.core"><CODE>PreparedStatementCreatorFactory</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="update(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.support.KeyHolder)"><!-- --></A><H3>
update</H3>
<PRE>
public int <B>update</B>(<A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreator.html" title="interface in org.springframework.jdbc.core">PreparedStatementCreator</A>&nbsp;psc,
                  <A HREF="../../../../org/springframework/jdbc/support/KeyHolder.html" title="interface in org.springframework.jdbc.support">KeyHolder</A>&nbsp;generatedKeyHolder)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#update(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.support.KeyHolder)">JdbcOperations</A></CODE></B></DD>
<DD>Issue an update statement using a PreparedStatementCreator to provide SQL and
 any required parameters. Generated keys will be put into the given KeyHolder.
 <p>Note that the given PreparedStatementCreator has to create a statement
 with activated extraction of generated keys (a JDBC 3.0 feature). This can
 either be done directly or through using a PreparedStatementCreatorFactory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#update(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.support.KeyHolder)">update</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>psc</CODE> - object that provides SQL and any necessary parameters<DD><CODE>generatedKeyHolder</CODE> - KeyHolder that will hold the generated keys
<DT><B>Returns:</B><DD>the number of rows affected
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem issuing the update<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/PreparedStatementCreatorFactory.html" title="class in org.springframework.jdbc.core"><CODE>PreparedStatementCreatorFactory</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/support/GeneratedKeyHolder.html" title="class in org.springframework.jdbc.support"><CODE>GeneratedKeyHolder</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="update(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter)"><!-- --></A><H3>
update</H3>
<PRE>
public int <B>update</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                  <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A>&nbsp;pss)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#update(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter)">JdbcOperations</A></CODE></B></DD>
<DD>Issue an update statement using a PreparedStatementSetter to set bind parameters,
 with given SQL. Simpler than using a PreparedStatementCreator as this method
 will create the PreparedStatement: The PreparedStatementSetter just needs to
 set parameters.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#update(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter)">update</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL containing bind parameters<DD><CODE>pss</CODE> - helper that sets bind parameters. If this is <code>null</code>
 we run an update with static SQL.
<DT><B>Returns:</B><DD>the number of rows affected
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem issuing the update</DL>
</DD>
</DL>
<HR>

<A NAME="update(java.lang.String, java.lang.Object[], int[])"><!-- --></A><H3>
update</H3>
<PRE>
public int <B>update</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                  <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                  int[]&nbsp;argTypes)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#update(java.lang.String, java.lang.Object[], int[])">JdbcOperations</A></CODE></B></DD>
<DD>Issue a single SQL update operation (such as an insert, update or delete statement)
 via a prepared statement, binding the given arguments.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#update(java.lang.String, java.lang.Object[], int[])">update</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL containing bind parameters<DD><CODE>args</CODE> - arguments to bind to the query<DD><CODE>argTypes</CODE> - SQL types of the arguments
 (constants from <code>java.sql.Types</code>)
<DT><B>Returns:</B><DD>the number of rows affected
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem issuing the update<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Types.html?is-external=true" title="class or interface in java.sql"><CODE>Types</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="update(java.lang.String, java.lang.Object...)"><!-- --></A><H3>
update</H3>
<PRE>
public int <B>update</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                  <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>...&nbsp;args)
           throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#update(java.lang.String, java.lang.Object...)">JdbcOperations</A></CODE></B></DD>
<DD>Issue a single SQL update operation (such as an insert, update or delete statement)
 via a prepared statement, binding the given arguments.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#update(java.lang.String, java.lang.Object...)">update</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - SQL containing bind parameters<DD><CODE>args</CODE> - arguments to bind to the query
 (leaving it to the PreparedStatement to guess the corresponding SQL type);
 may also contain <A HREF="../../../../org/springframework/jdbc/core/SqlParameterValue.html" title="class in org.springframework.jdbc.core"><CODE>SqlParameterValue</CODE></A> objects which indicate not
 only the argument value but also the SQL type and optionally the scale
<DT><B>Returns:</B><DD>the number of rows affected
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem issuing the update</DL>
</DD>
</DL>
<HR>

<A NAME="batchUpdate(java.lang.String, org.springframework.jdbc.core.BatchPreparedStatementSetter)"><!-- --></A><H3>
batchUpdate</H3>
<PRE>
public int[] <B>batchUpdate</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;sql,
                         <A HREF="../../../../org/springframework/jdbc/core/BatchPreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">BatchPreparedStatementSetter</A>&nbsp;pss)
                  throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#batchUpdate(java.lang.String, org.springframework.jdbc.core.BatchPreparedStatementSetter)">JdbcOperations</A></CODE></B></DD>
<DD>Issue multiple update statements on a single PreparedStatement,
 using batch updates and a BatchPreparedStatementSetter to set values.
 <p>Will fall back to separate updates on a single PreparedStatement
 if the JDBC driver does not support batch updates.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#batchUpdate(java.lang.String, org.springframework.jdbc.core.BatchPreparedStatementSetter)">batchUpdate</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sql</CODE> - defining PreparedStatement that will be reused.
 All statements in the batch will use the same SQL.<DD><CODE>pss</CODE> - object to set parameters on the PreparedStatement
 created by this method
<DT><B>Returns:</B><DD>an array of the number of rows affected by each statement
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem issuing the update</DL>
</DD>
</DL>
<HR>

<A NAME="execute(org.springframework.jdbc.core.CallableStatementCreator, org.springframework.jdbc.core.CallableStatementCallback)"><!-- --></A><H3>
execute</H3>
<PRE>
public &lt;T&gt; T <B>execute</B>(<A HREF="../../../../org/springframework/jdbc/core/CallableStatementCreator.html" title="interface in org.springframework.jdbc.core">CallableStatementCreator</A>&nbsp;csc,
                     <A HREF="../../../../org/springframework/jdbc/core/CallableStatementCallback.html" title="interface in org.springframework.jdbc.core">CallableStatementCallback</A>&lt;T&gt;&nbsp;action)
          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(org.springframework.jdbc.core.CallableStatementCreator, org.springframework.jdbc.core.CallableStatementCallback)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a JDBC data access operation, implemented as callback action
 working on a JDBC CallableStatement. This allows for implementing arbitrary
 data access operations on a single Statement, within Spring's managed
 JDBC environment: that is, participating in Spring-managed transactions
 and converting JDBC SQLExceptions into Spring's DataAccessException hierarchy.
 <p>The callback action can return a result object, for example a
 domain object or a collection of domain objects.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(org.springframework.jdbc.core.CallableStatementCreator, org.springframework.jdbc.core.CallableStatementCallback)">execute</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>csc</CODE> - object that can create a CallableStatement given a Connection<DD><CODE>action</CODE> - callback object that specifies the action
<DT><B>Returns:</B><DD>a result object returned by the action, or <code>null</code>
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem</DL>
</DD>
</DL>
<HR>

<A NAME="execute(java.lang.String, org.springframework.jdbc.core.CallableStatementCallback)"><!-- --></A><H3>
execute</H3>
<PRE>
public &lt;T&gt; T <B>execute</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;callString,
                     <A HREF="../../../../org/springframework/jdbc/core/CallableStatementCallback.html" title="interface in org.springframework.jdbc.core">CallableStatementCallback</A>&lt;T&gt;&nbsp;action)
          throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(java.lang.String, org.springframework.jdbc.core.CallableStatementCallback)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a JDBC data access operation, implemented as callback action
 working on a JDBC CallableStatement. This allows for implementing arbitrary
 data access operations on a single Statement, within Spring's managed
 JDBC environment: that is, participating in Spring-managed transactions
 and converting JDBC SQLExceptions into Spring's DataAccessException hierarchy.
 <p>The callback action can return a result object, for example a
 domain object or a collection of domain objects.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#execute(java.lang.String, org.springframework.jdbc.core.CallableStatementCallback)">execute</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>callString</CODE> - the SQL call string to execute<DD><CODE>action</CODE> - callback object that specifies the action
<DT><B>Returns:</B><DD>a result object returned by the action, or <code>null</code>
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem</DL>
</DD>
</DL>
<HR>

<A NAME="call(org.springframework.jdbc.core.CallableStatementCreator, java.util.List)"><!-- --></A><H3>
call</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt; <B>call</B>(<A HREF="../../../../org/springframework/jdbc/core/CallableStatementCreator.html" title="interface in org.springframework.jdbc.core">CallableStatementCreator</A>&nbsp;csc,
                               <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../org/springframework/jdbc/core/SqlParameter.html" title="class in org.springframework.jdbc.core">SqlParameter</A>&gt;&nbsp;declaredParameters)
                        throws <A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#call(org.springframework.jdbc.core.CallableStatementCreator, java.util.List)">JdbcOperations</A></CODE></B></DD>
<DD>Execute a SQL call using a CallableStatementCreator to provide SQL and any
 required parameters.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html#call(org.springframework.jdbc.core.CallableStatementCreator, java.util.List)">call</A></CODE> in interface <CODE><A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core">JdbcOperations</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>csc</CODE> - object that provides SQL and any necessary parameters<DD><CODE>declaredParameters</CODE> - list of declared SqlParameter objects
<DT><B>Returns:</B><DD>Map of extracted out parameters
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/dao/DataAccessException.html" title="class in org.springframework.dao">DataAccessException</A></CODE> - if there is any problem issuing the update</DL>
</DD>
</DL>
<HR>

<A NAME="extractReturnedResults(java.sql.CallableStatement, java.util.List, java.util.List, int)"><!-- --></A><H3>
extractReturnedResults</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt; <B>extractReturnedResults</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html?is-external=true" title="class or interface in java.sql">CallableStatement</A>&nbsp;cs,
                                                    <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&nbsp;updateCountParameters,
                                                    <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&nbsp;resultSetParameters,
                                                    int&nbsp;updateCount)
                                             throws <A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></PRE>
<DL>
<DD>Extract returned ResultSets from the completed stored procedure.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cs</CODE> - JDBC wrapper for the stored procedure<DD><CODE>updateCountParameters</CODE> - Parameter list of declared update count parameters for the stored procedure<DD><CODE>resultSetParameters</CODE> - Parameter list of declared resturn resultSet parameters for the stored procedure
<DT><B>Returns:</B><DD>Map that contains returned results
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="extractOutputParameters(java.sql.CallableStatement, java.util.List)"><!-- --></A><H3>
extractOutputParameters</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt; <B>extractOutputParameters</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html?is-external=true" title="class or interface in java.sql">CallableStatement</A>&nbsp;cs,
                                                     <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../org/springframework/jdbc/core/SqlParameter.html" title="class in org.springframework.jdbc.core">SqlParameter</A>&gt;&nbsp;parameters)
                                              throws <A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></PRE>
<DL>
<DD>Extract output parameters from the completed stored procedure.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cs</CODE> - JDBC wrapper for the stored procedure<DD><CODE>parameters</CODE> - parameter list for the stored procedure
<DT><B>Returns:</B><DD>Map that contains returned results
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="processResultSet(java.sql.ResultSet, org.springframework.jdbc.core.ResultSetSupportingSqlParameter)"><!-- --></A><H3>
processResultSet</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt; <B>processResultSet</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html?is-external=true" title="class or interface in java.sql">ResultSet</A>&nbsp;rs,
                                              <A HREF="../../../../org/springframework/jdbc/core/ResultSetSupportingSqlParameter.html" title="class in org.springframework.jdbc.core">ResultSetSupportingSqlParameter</A>&nbsp;param)
                                       throws <A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></PRE>
<DL>
<DD>Process the given ResultSet from a stored procedure.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>rs</CODE> - the ResultSet to process<DD><CODE>param</CODE> - the corresponding stored procedure parameter
<DT><B>Returns:</B><DD>Map that contains returned results
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getColumnMapRowMapper()"><!-- --></A><H3>
getColumnMapRowMapper</H3>
<PRE>
protected <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt;&gt; <B>getColumnMapRowMapper</B>()</PRE>
<DL>
<DD>Create a new RowMapper for reading columns as key-value pairs.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the RowMapper to use<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/ColumnMapRowMapper.html" title="class in org.springframework.jdbc.core"><CODE>ColumnMapRowMapper</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getSingleColumnRowMapper(java.lang.Class)"><!-- --></A><H3>
getSingleColumnRowMapper</H3>
<PRE>
protected &lt;T&gt; <A HREF="../../../../org/springframework/jdbc/core/RowMapper.html" title="interface in org.springframework.jdbc.core">RowMapper</A>&lt;T&gt; <B>getSingleColumnRowMapper</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)</PRE>
<DL>
<DD>Create a new RowMapper for reading result objects from a single column.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>requiredType</CODE> - the type that each result object is expected to match
<DT><B>Returns:</B><DD>the RowMapper to use<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/SingleColumnRowMapper.html" title="class in org.springframework.jdbc.core"><CODE>SingleColumnRowMapper</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="createResultsMap()"><!-- --></A><H3>
createResultsMap</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&gt; <B>createResultsMap</B>()</PRE>
<DL>
<DD>Create a Map instance to be used as results map.
 <p>If "isResultsMapCaseInsensitive" has been set to true,
 a linked case-insensitive Map will be created.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the results Map instance<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#setResultsMapCaseInsensitive(boolean)"><CODE>setResultsMapCaseInsensitive(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="applyStatementSettings(java.sql.Statement)"><!-- --></A><H3>
applyStatementSettings</H3>
<PRE>
protected void <B>applyStatementSettings</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html?is-external=true" title="class or interface in java.sql">Statement</A>&nbsp;stmt)
                               throws <A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></PRE>
<DL>
<DD>Prepare the given JDBC Statement (or PreparedStatement or CallableStatement),
 applying statement settings such as fetch size, max rows, and query timeout.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>stmt</CODE> - the JDBC Statement to prepare
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></CODE> - if thrown by JDBC API<DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#setFetchSize(int)"><CODE>setFetchSize(int)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#setMaxRows(int)"><CODE>setMaxRows(int)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/core/JdbcTemplate.html#setQueryTimeout(int)"><CODE>setQueryTimeout(int)</CODE></A>, 
<A HREF="../../../../org/springframework/jdbc/datasource/DataSourceUtils.html#applyTransactionTimeout(java.sql.Statement, javax.sql.DataSource)"><CODE>DataSourceUtils.applyTransactionTimeout(java.sql.Statement, javax.sql.DataSource)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="newArgPreparedStatementSetter(java.lang.Object[])"><!-- --></A><H3>
newArgPreparedStatementSetter</H3>
<PRE>
protected <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A> <B>newArgPreparedStatementSetter</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args)</PRE>
<DL>
<DD>Create a new ArgPreparedStatementSetter using the args passed in. This method allows the
 creation to be overridden by sub-classes.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>args</CODE> - object array woth arguments
<DT><B>Returns:</B><DD>the new PreparedStatementSetter</DL>
</DD>
</DL>
<HR>

<A NAME="newArgTypePreparedStatementSetter(java.lang.Object[], int[])"><!-- --></A><H3>
newArgTypePreparedStatementSetter</H3>
<PRE>
protected <A HREF="../../../../org/springframework/jdbc/core/PreparedStatementSetter.html" title="interface in org.springframework.jdbc.core">PreparedStatementSetter</A> <B>newArgTypePreparedStatementSetter</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>[]&nbsp;args,
                                                                    int[]&nbsp;argTypes)</PRE>
<DL>
<DD>Create a new ArgTypePreparedStatementSetter using the args and argTypes passed in.
 This method allows the creation to be overridden by sub-classes.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>args</CODE> - object array woth arguments<DD><CODE>argTypes</CODE> - int array of SQLTypes for arguments
<DT><B>Returns:</B><DD>the new PreparedStatementSetter</DL>
</DD>
</DL>
<HR>

<A NAME="handleWarnings(java.sql.Statement)"><!-- --></A><H3>
handleWarnings</H3>
<PRE>
protected void <B>handleWarnings</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html?is-external=true" title="class or interface in java.sql">Statement</A>&nbsp;stmt)
                       throws <A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></PRE>
<DL>
<DD>Throw an SQLWarningException if we're not ignoring warnings,
 else log the warnings (at debug level).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>stmt</CODE> - the current JDBC statement
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/jdbc/SQLWarningException.html" title="class in org.springframework.jdbc">SQLWarningException</A></CODE> - if not ignoring warnings
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html?is-external=true" title="class or interface in java.sql">SQLException</A></CODE><DT><B>See Also:</B><DD><A HREF="../../../../org/springframework/jdbc/SQLWarningException.html" title="class in org.springframework.jdbc"><CODE>SQLWarningException</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="handleWarnings(java.sql.SQLWarning)"><!-- --></A><H3>
handleWarnings</H3>
<PRE>
protected void <B>handleWarnings</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/sql/SQLWarning.html?is-external=true" title="class or interface in java.sql">SQLWarning</A>&nbsp;warning)
                       throws <A HREF="../../../../org/springframework/jdbc/SQLWarningException.html" title="class in org.springframework.jdbc">SQLWarningException</A></PRE>
<DL>
<DD>Throw an SQLWarningException if encountering an actual warning.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>warning</CODE> - the warnings object from the current statement.
 May be <code>null</code>, in which case this method does nothing.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/springframework/jdbc/SQLWarningException.html" title="class in org.springframework.jdbc">SQLWarningException</A></CODE> - in case of an actual warning to be raised</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/springframework/jdbc/core/JdbcOperations.html" title="interface in org.springframework.jdbc.core"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/springframework/jdbc/core/ParameterDisposer.html" title="interface in org.springframework.jdbc.core"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/springframework/jdbc/core/JdbcTemplate.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="JdbcTemplate.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_org.springframework.jdbc.support.JdbcAccessor">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
