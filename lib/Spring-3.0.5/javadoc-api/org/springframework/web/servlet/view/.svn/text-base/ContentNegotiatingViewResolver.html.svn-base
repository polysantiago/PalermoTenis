<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:25:28 BST 2010 -->
<TITLE>
ContentNegotiatingViewResolver
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="ContentNegotiatingViewResolver";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../../org/springframework/web/servlet/view/BeanNameViewResolver.html" title="class in org.springframework.web.servlet.view"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../../org/springframework/web/servlet/view/DefaultRequestToViewNameTranslator.html" title="class in org.springframework.web.servlet.view"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../../index.html?org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="ContentNegotiatingViewResolver.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.web.servlet.view</FONT>
<BR>
Class ContentNegotiatingViewResolver</H2>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../../../org/springframework/context/support/ApplicationObjectSupport.html" title="class in org.springframework.context.support">org.springframework.context.support.ApplicationObjectSupport</A>
      <IMG SRC="../../../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html" title="class in org.springframework.web.context.support">org.springframework.web.context.support.WebApplicationObjectSupport</A>
          <IMG SRC="../../../../../resources/inherit.gif" ALT="extended by "><B>org.springframework.web.servlet.view.ContentNegotiatingViewResolver</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../../org/springframework/context/ApplicationContextAware.html" title="interface in org.springframework.context">ApplicationContextAware</A>, <A HREF="../../../../../org/springframework/core/Ordered.html" title="interface in org.springframework.core">Ordered</A>, <A HREF="../../../../../org/springframework/web/context/ServletContextAware.html" title="interface in org.springframework.web.context">ServletContextAware</A>, <A HREF="../../../../../org/springframework/web/servlet/ViewResolver.html" title="interface in org.springframework.web.servlet">ViewResolver</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>ContentNegotiatingViewResolver</B><DT>extends <A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html" title="class in org.springframework.web.context.support">WebApplicationObjectSupport</A><DT>implements <A HREF="../../../../../org/springframework/web/servlet/ViewResolver.html" title="interface in org.springframework.web.servlet">ViewResolver</A>, <A HREF="../../../../../org/springframework/core/Ordered.html" title="interface in org.springframework.core">Ordered</A></DL>
</PRE>

<P>
Implementation of <A HREF="../../../../../org/springframework/web/servlet/ViewResolver.html" title="interface in org.springframework.web.servlet"><CODE>ViewResolver</CODE></A> that resolves a view based on the request file name or <code>Accept</code> header.

 <p>The <code>ContentNegotiatingViewResolver</code> does not resolve views itself, but delegates to other <A HREF="../../../../../org/springframework/web/servlet/ViewResolver.html" title="interface in org.springframework.web.servlet"><CODE>ViewResolver</CODE></A>s. By default, these other view resolvers are picked up automatically from the application context,
 though they can also be set explicitly by using the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setViewResolvers(java.util.List)"><CODE>viewResolvers</CODE></A> property.
 <strong>Note</strong> that in order for this view resolver to work properly, the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setOrder(int)"><CODE>order</CODE></A>
 property needs to be set to a higher precedence than the others (the default is <A HREF="../../../../../org/springframework/core/Ordered.html#HIGHEST_PRECEDENCE"><CODE>Ordered.HIGHEST_PRECEDENCE</CODE></A>.)

 <p>This view resolver uses the requested <A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http">media type</A> to select a suitable <A HREF="../../../../../org/springframework/web/servlet/View.html" title="interface in org.springframework.web.servlet"><CODE>View</CODE></A> for a
 request. This media type is determined by using the following criteria:
 <ol>
 <li>If the requested path has a file extension and if the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setFavorPathExtension(boolean)"><CODE>setFavorPathExtension(boolean)</CODE></A> property is
 <code>true</code>, the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setMediaTypes(java.util.Map)"><CODE>mediaTypes</CODE></A> property is inspected for a matching media type.</li>
 <li>If the request contains a parameter defining the extension and if the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setFavorParameter(boolean)"><CODE>setFavorParameter(boolean)</CODE></A>
 property is <code>true</code>, the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setMediaTypes(java.util.Map)"><CODE>mediaTypes</CODE></A> property is inspected for a matching
 media type. The default name of the parameter is <code>format</code> and it can be configured using the
 <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setParameterName(java.lang.String)"><CODE>parameterName</CODE></A> property.</li>
 <li>If there is no match in the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setMediaTypes(java.util.Map)"><CODE>mediaTypes</CODE></A> property and if the Java Activation
 Framework (JAF) is both <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setUseJaf(boolean)">enabled</A> and present on the class path,
 <A HREF="http://java.sun.com/javase/6/docs/api/javax/activation/FileTypeMap.html?is-external=true#getContentType(java.lang.String)" title="class or interface in javax.activation"><CODE>FileTypeMap.getContentType(String)</CODE></A> is used instead.</li>
 <li>If the previous steps did not result in a media type, and
 <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setIgnoreAcceptHeader(boolean)"><CODE>ignoreAcceptHeader</CODE></A> is <code>false</code>, the request <code>Accept</code> header is
 used.</li>
 </ol>

 Once the requested media type has been determined, this resolver queries each delegate view resolver for a
 <A HREF="../../../../../org/springframework/web/servlet/View.html" title="interface in org.springframework.web.servlet"><CODE>View</CODE></A> and determines if the requested media type is <A HREF="../../../../../org/springframework/http/MediaType.html#includes(org.springframework.http.MediaType)">compatible</A>
 with the view's <A HREF="../../../../../org/springframework/web/servlet/View.html#getContentType()">content type</A>). The most compatible view is returned.

 <p>Additionally, this view resolver exposes the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setDefaultViews(java.util.List)"><CODE>defaultViews</CODE></A> property, allowing you to
 override the views provided by the view resolvers. Note that these default views are offered as candicates, and
 still need have the content type requested (via file extension, parameter, or <code>Accept</code> header, described above).
 You can also set the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setDefaultContentType(org.springframework.http.MediaType)">default content type</A> directly, which will be
 returned when the other mechanisms (<code>Accept</code> header, file extension or parameter) do not result in a match.

 <p>For example, if the request path is <code>/view.html</code>, this view resolver will look for a view that has the
 <code>text/html</code> content type (based on the <code>html</code> file extension). A request for <code>/view</code> with a <code>text/html</code> request <code>Accept</code> header has the same result.
<P>

<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>3.0</DD>
<DT><B>Author:</B></DT>
  <DD>Arjen Poutsma, Juergen Hoeller</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/web/servlet/ViewResolver.html" title="interface in org.springframework.web.servlet"><CODE>ViewResolver</CODE></A>, 
<A HREF="../../../../../org/springframework/web/servlet/view/InternalResourceViewResolver.html" title="class in org.springframework.web.servlet.view"><CODE>InternalResourceViewResolver</CODE></A>, 
<A HREF="../../../../../org/springframework/web/servlet/view/BeanNameViewResolver.html" title="class in org.springframework.web.servlet.view"><CODE>BeanNameViewResolver</CODE></A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.core.Ordered"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface org.springframework.core.<A HREF="../../../../../org/springframework/core/Ordered.html" title="interface in org.springframework.core">Ordered</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/core/Ordered.html#HIGHEST_PRECEDENCE">HIGHEST_PRECEDENCE</A>, <A HREF="../../../../../org/springframework/core/Ordered.html#LOWEST_PRECEDENCE">LOWEST_PRECEDENCE</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#ContentNegotiatingViewResolver()">ContentNegotiatingViewResolver</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http">MediaType</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#getMediaTypeFromFilename(java.lang.String)">getMediaTypeFromFilename</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;filename)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines the <A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http"><CODE>MediaType</CODE></A> for the given filename.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http">MediaType</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#getMediaTypeFromParameter(java.lang.String)">getMediaTypeFromParameter</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;parameterValue)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines the <A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http"><CODE>MediaType</CODE></A> for the given parameter value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http">MediaType</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#getMediaTypes(javax.servlet.http.HttpServletRequest)">getMediaTypes</A></B>(<A HREF="http://java.sun.com/j2ee/1.4/docs/api/javax/servlet/http/HttpServletRequest.html?is-external=true" title="class or interface in javax.servlet.http">HttpServletRequest</A>&nbsp;request)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines the list of <A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http"><CODE>MediaType</CODE></A> for the given <A HREF="http://java.sun.com/j2ee/1.4/docs/api/javax/servlet/http/HttpServletRequest.html?is-external=true" title="class or interface in javax.servlet.http"><CODE>HttpServletRequest</CODE></A>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#getOrder()">getOrder</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the order value of this object, with a
 higher value meaning greater in terms of sorting.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#initServletContext(javax.servlet.ServletContext)">initServletContext</A></B>(<A HREF="http://java.sun.com/j2ee/1.4/docs/api/javax/servlet/ServletContext.html?is-external=true" title="class or interface in javax.servlet">ServletContext</A>&nbsp;servletContext)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subclasses may override this for custom initialization based
 on the ServletContext that this application object runs in.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/web/servlet/View.html" title="interface in org.springframework.web.servlet">View</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#resolveViewName(java.lang.String, java.util.Locale)">resolveViewName</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;viewName,
                <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Locale.html?is-external=true" title="class or interface in java.util">Locale</A>&nbsp;locale)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resolve the given view by name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setDefaultContentType(org.springframework.http.MediaType)">setDefaultContentType</A></B>(<A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http">MediaType</A>&nbsp;defaultContentType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the default content type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setDefaultViews(java.util.List)">setDefaultViews</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../../org/springframework/web/servlet/View.html" title="interface in org.springframework.web.servlet">View</A>&gt;&nbsp;defaultViews)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the default views to use when a more specific view can not be obtained
 from the <A HREF="../../../../../org/springframework/web/servlet/ViewResolver.html" title="interface in org.springframework.web.servlet"><CODE>ViewResolver</CODE></A> chain.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setFavorParameter(boolean)">setFavorParameter</A></B>(boolean&nbsp;favorParameter)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Indicates whether a request parameter should be used to determine the requested media type,
 in favor of looking at the <code>Accept</code> header.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setFavorPathExtension(boolean)">setFavorPathExtension</A></B>(boolean&nbsp;favorPathExtension)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Indicates whether the extension of the request path should be used to determine the requested media type,
 in favor of looking at the <code>Accept</code> header.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setIgnoreAcceptHeader(boolean)">setIgnoreAcceptHeader</A></B>(boolean&nbsp;ignoreAcceptHeader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Indicates whether the HTTP <code>Accept</code> header should be ignored.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setMediaTypes(java.util.Map)">setMediaTypes</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&gt;&nbsp;mediaTypes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the mapping from file extensions to media types.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setOrder(int)">setOrder</A></B>(int&nbsp;order)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setParameterName(java.lang.String)">setParameterName</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;parameterName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the parameter name that can be used to determine the requested media type if the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setFavorParameter(boolean)"><CODE>setFavorParameter(boolean)</CODE></A> property is <code>true</code>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setUseJaf(boolean)">setUseJaf</A></B>(boolean&nbsp;useJaf)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Indicates whether to use the Java Activation Framework to map from file extensions to media types.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setUseNotAcceptableStatusCode(boolean)">setUseNotAcceptableStatusCode</A></B>(boolean&nbsp;useNotAcceptableStatusCode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Indicates whether a <A HREF="http://java.sun.com/j2ee/1.4/docs/api/javax/servlet/http/HttpServletResponse.html?is-external=true#SC_NOT_ACCEPTABLE" title="class or interface in javax.servlet.http"><CODE>406 Not Acceptable</CODE></A> status code should be
 returned if no suitable view can be found.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setViewResolvers(java.util.List)">setViewResolvers</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../../org/springframework/web/servlet/ViewResolver.html" title="interface in org.springframework.web.servlet">ViewResolver</A>&gt;&nbsp;viewResolvers)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the view resolvers to be wrapped by this view resolver.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.web.context.support.WebApplicationObjectSupport"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class org.springframework.web.context.support.<A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html" title="class in org.springframework.web.context.support">WebApplicationObjectSupport</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html#getServletContext()">getServletContext</A>, <A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html#getTempDir()">getTempDir</A>, <A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html#getWebApplicationContext()">getWebApplicationContext</A>, <A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html#initApplicationContext(org.springframework.context.ApplicationContext)">initApplicationContext</A>, <A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html#isContextRequired()">isContextRequired</A>, <A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html#setServletContext(javax.servlet.ServletContext)">setServletContext</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.springframework.context.support.ApplicationObjectSupport"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class org.springframework.context.support.<A HREF="../../../../../org/springframework/context/support/ApplicationObjectSupport.html" title="class in org.springframework.context.support">ApplicationObjectSupport</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/context/support/ApplicationObjectSupport.html#getApplicationContext()">getApplicationContext</A>, <A HREF="../../../../../org/springframework/context/support/ApplicationObjectSupport.html#getMessageSourceAccessor()">getMessageSourceAccessor</A>, <A HREF="../../../../../org/springframework/context/support/ApplicationObjectSupport.html#initApplicationContext()">initApplicationContext</A>, <A HREF="../../../../../org/springframework/context/support/ApplicationObjectSupport.html#requiredContextClass()">requiredContextClass</A>, <A HREF="../../../../../org/springframework/context/support/ApplicationObjectSupport.html#setApplicationContext(org.springframework.context.ApplicationContext)">setApplicationContext</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="ContentNegotiatingViewResolver()"><!-- --></A><H3>
ContentNegotiatingViewResolver</H3>
<PRE>
public <B>ContentNegotiatingViewResolver</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="setOrder(int)"><!-- --></A><H3>
setOrder</H3>
<PRE>
public void <B>setOrder</B>(int&nbsp;order)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getOrder()"><!-- --></A><H3>
getOrder</H3>
<PRE>
public int <B>getOrder</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/core/Ordered.html#getOrder()">Ordered</A></CODE></B></DD>
<DD>Return the order value of this object, with a
 higher value meaning greater in terms of sorting.
 <p>Normally starting with 0, with <code>Integer.MAX_VALUE</code>
 indicating the greatest value. Same order values will result
 in arbitrary positions for the affected objects.
 <p>Higher values can be interpreted as lower priority. As a
 consequence, the object with the lowest value has highest priority
 (somewhat analogous to Servlet "load-on-startup" values).
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/core/Ordered.html#getOrder()">getOrder</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/core/Ordered.html" title="interface in org.springframework.core">Ordered</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the order value</DL>
</DD>
</DL>
<HR>

<A NAME="setFavorPathExtension(boolean)"><!-- --></A><H3>
setFavorPathExtension</H3>
<PRE>
public void <B>setFavorPathExtension</B>(boolean&nbsp;favorPathExtension)</PRE>
<DL>
<DD>Indicates whether the extension of the request path should be used to determine the requested media type,
 in favor of looking at the <code>Accept</code> header. The default value is <code>true</code>.
 <p>For instance, when this flag is <code>true</code> (the default), a request for <code>/hotels.pdf</code>
 will result in an <code>AbstractPdfView</code> being resolved, while the <code>Accept</code> header can be the
 browser-defined <code>text/html,application/xhtml+xml</code>.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setFavorParameter(boolean)"><!-- --></A><H3>
setFavorParameter</H3>
<PRE>
public void <B>setFavorParameter</B>(boolean&nbsp;favorParameter)</PRE>
<DL>
<DD>Indicates whether a request parameter should be used to determine the requested media type,
 in favor of looking at the <code>Accept</code> header. The default value is <code>false</code>.
 <p>For instance, when this flag is <code>true</code>, a request for <code>/hotels?format=pdf</code> will result
 in an <code>AbstractPdfView</code> being resolved, while the <code>Accept</code> header can be the browser-defined
 <code>text/html,application/xhtml+xml</code>.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setParameterName(java.lang.String)"><!-- --></A><H3>
setParameterName</H3>
<PRE>
public void <B>setParameterName</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;parameterName)</PRE>
<DL>
<DD>Sets the parameter name that can be used to determine the requested media type if the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setFavorParameter(boolean)"><CODE>setFavorParameter(boolean)</CODE></A> property is <code>true</code>. The default parameter name is <code>format</code>.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setIgnoreAcceptHeader(boolean)"><!-- --></A><H3>
setIgnoreAcceptHeader</H3>
<PRE>
public void <B>setIgnoreAcceptHeader</B>(boolean&nbsp;ignoreAcceptHeader)</PRE>
<DL>
<DD>Indicates whether the HTTP <code>Accept</code> header should be ignored. Default is <code>false</code>.
 If set to <code>true</code>, this view resolver will only refer to the file extension and/or paramter,
 as indicated by the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setFavorPathExtension(boolean)"><CODE>favorPathExtension</CODE></A> and
 <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setFavorParameter(boolean)"><CODE>favorParameter</CODE></A> properties.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setUseNotAcceptableStatusCode(boolean)"><!-- --></A><H3>
setUseNotAcceptableStatusCode</H3>
<PRE>
public void <B>setUseNotAcceptableStatusCode</B>(boolean&nbsp;useNotAcceptableStatusCode)</PRE>
<DL>
<DD>Indicates whether a <A HREF="http://java.sun.com/j2ee/1.4/docs/api/javax/servlet/http/HttpServletResponse.html?is-external=true#SC_NOT_ACCEPTABLE" title="class or interface in javax.servlet.http"><CODE>406 Not Acceptable</CODE></A> status code should be
 returned if no suitable view can be found.

 <p>Default is <code>false</code>, meaning that this view resolver returns <code>null</code> for
 <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#resolveViewName(java.lang.String, java.util.Locale)"><CODE>resolveViewName(String, Locale)</CODE></A> when an acceptable view cannot be found. This will allow for view
 resolvers chaining. When this property is set to <code>true</code>,
 <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#resolveViewName(java.lang.String, java.util.Locale)"><CODE>resolveViewName(String, Locale)</CODE></A> will respond with a view that sets the response status to
 <code>406 Not Acceptable</code> instead.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setMediaTypes(java.util.Map)"><!-- --></A><H3>
setMediaTypes</H3>
<PRE>
public void <B>setMediaTypes</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>,<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&gt;&nbsp;mediaTypes)</PRE>
<DL>
<DD>Sets the mapping from file extensions to media types.
 <p>When this mapping is not set or when an extension is not present, this view resolver
 will fall back to using a <A HREF="http://java.sun.com/javase/6/docs/api/javax/activation/FileTypeMap.html?is-external=true" title="class or interface in javax.activation"><CODE>FileTypeMap</CODE></A> when the Java Action Framework is available.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setDefaultViews(java.util.List)"><!-- --></A><H3>
setDefaultViews</H3>
<PRE>
public void <B>setDefaultViews</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../../org/springframework/web/servlet/View.html" title="interface in org.springframework.web.servlet">View</A>&gt;&nbsp;defaultViews)</PRE>
<DL>
<DD>Sets the default views to use when a more specific view can not be obtained
 from the <A HREF="../../../../../org/springframework/web/servlet/ViewResolver.html" title="interface in org.springframework.web.servlet"><CODE>ViewResolver</CODE></A> chain.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setDefaultContentType(org.springframework.http.MediaType)"><!-- --></A><H3>
setDefaultContentType</H3>
<PRE>
public void <B>setDefaultContentType</B>(<A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http">MediaType</A>&nbsp;defaultContentType)</PRE>
<DL>
<DD>Sets the default content type.
 <p>This content type will be used when file extension, parameter, nor <code>Accept</code>
 header define a content-type, either through being disabled or empty.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setUseJaf(boolean)"><!-- --></A><H3>
setUseJaf</H3>
<PRE>
public void <B>setUseJaf</B>(boolean&nbsp;useJaf)</PRE>
<DL>
<DD>Indicates whether to use the Java Activation Framework to map from file extensions to media types.
 <p>Default is <code>true</code>, i.e. the Java Activation Framework is used (if available).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setViewResolvers(java.util.List)"><!-- --></A><H3>
setViewResolvers</H3>
<PRE>
public void <B>setViewResolvers</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../../org/springframework/web/servlet/ViewResolver.html" title="interface in org.springframework.web.servlet">ViewResolver</A>&gt;&nbsp;viewResolvers)</PRE>
<DL>
<DD>Sets the view resolvers to be wrapped by this view resolver.
 <p>If this property is not set, view resolvers will be detected automatically.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="initServletContext(javax.servlet.ServletContext)"><!-- --></A><H3>
initServletContext</H3>
<PRE>
protected void <B>initServletContext</B>(<A HREF="http://java.sun.com/j2ee/1.4/docs/api/javax/servlet/ServletContext.html?is-external=true" title="class or interface in javax.servlet">ServletContext</A>&nbsp;servletContext)</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html#initServletContext(javax.servlet.ServletContext)">WebApplicationObjectSupport</A></CODE></B></DD>
<DD>Subclasses may override this for custom initialization based
 on the ServletContext that this application object runs in.
 <p>The default implementation is empty. Called by
 <A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html#initApplicationContext(org.springframework.context.ApplicationContext)"><CODE>WebApplicationObjectSupport.initApplicationContext(org.springframework.context.ApplicationContext)</CODE></A>
 as well as <A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html#setServletContext(javax.servlet.ServletContext)"><CODE>WebApplicationObjectSupport.setServletContext(javax.servlet.ServletContext)</CODE></A>.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html#initServletContext(javax.servlet.ServletContext)">initServletContext</A></CODE> in class <CODE><A HREF="../../../../../org/springframework/web/context/support/WebApplicationObjectSupport.html" title="class in org.springframework.web.context.support">WebApplicationObjectSupport</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>servletContext</CODE> - the ServletContext that this application object runs in
 (never <code>null</code>)</DL>
</DD>
</DL>
<HR>

<A NAME="getMediaTypes(javax.servlet.http.HttpServletRequest)"><!-- --></A><H3>
getMediaTypes</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http">MediaType</A>&gt; <B>getMediaTypes</B>(<A HREF="http://java.sun.com/j2ee/1.4/docs/api/javax/servlet/http/HttpServletRequest.html?is-external=true" title="class or interface in javax.servlet.http">HttpServletRequest</A>&nbsp;request)</PRE>
<DL>
<DD>Determines the list of <A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http"><CODE>MediaType</CODE></A> for the given <A HREF="http://java.sun.com/j2ee/1.4/docs/api/javax/servlet/http/HttpServletRequest.html?is-external=true" title="class or interface in javax.servlet.http"><CODE>HttpServletRequest</CODE></A>.
 <p>The default implementation invokes <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#getMediaTypeFromFilename(java.lang.String)"><CODE>getMediaTypeFromFilename(String)</CODE></A> if <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setFavorPathExtension(boolean)">favorPathExtension</A> property is <code>true</code>. If the property is
 <code>false</code>, or when a media type cannot be determined from the request path, this method will
 inspect the <code>Accept</code> header of the request.
 <p>This method can be overriden to provide a different algorithm.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>request</CODE> - the current servlet request
<DT><B>Returns:</B><DD>the list of media types requested, if any</DL>
</DD>
</DL>
<HR>

<A NAME="getMediaTypeFromFilename(java.lang.String)"><!-- --></A><H3>
getMediaTypeFromFilename</H3>
<PRE>
protected <A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http">MediaType</A> <B>getMediaTypeFromFilename</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;filename)</PRE>
<DL>
<DD>Determines the <A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http"><CODE>MediaType</CODE></A> for the given filename.
 <p>The default implementation will check the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setMediaTypes(java.util.Map)">media types</A>
 property first for a defined mapping. If not present, and if the Java Activation Framework
 can be found on the classpath, it will call <A HREF="http://java.sun.com/javase/6/docs/api/javax/activation/FileTypeMap.html?is-external=true#getContentType(java.lang.String)" title="class or interface in javax.activation"><CODE>FileTypeMap.getContentType(String)</CODE></A>
 <p>This method can be overriden to provide a different algorithm.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>filename</CODE> - the current request file name (i.e. <code>hotels.html</code>)
<DT><B>Returns:</B><DD>the media type, if any</DL>
</DD>
</DL>
<HR>

<A NAME="getMediaTypeFromParameter(java.lang.String)"><!-- --></A><H3>
getMediaTypeFromParameter</H3>
<PRE>
protected <A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http">MediaType</A> <B>getMediaTypeFromParameter</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;parameterValue)</PRE>
<DL>
<DD>Determines the <A HREF="../../../../../org/springframework/http/MediaType.html" title="class in org.springframework.http"><CODE>MediaType</CODE></A> for the given parameter value.
 <p>The default implementation will check the <A HREF="../../../../../org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html#setMediaTypes(java.util.Map)">media types</A>
 property for a defined mapping.
 <p>This method can be overriden to provide a different algorithm.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>parameterValue</CODE> - the parameter value (i.e. <code>pdf</code>).
<DT><B>Returns:</B><DD>the media type, if any</DL>
</DD>
</DL>
<HR>

<A NAME="resolveViewName(java.lang.String, java.util.Locale)"><!-- --></A><H3>
resolveViewName</H3>
<PRE>
public <A HREF="../../../../../org/springframework/web/servlet/View.html" title="interface in org.springframework.web.servlet">View</A> <B>resolveViewName</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;viewName,
                            <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Locale.html?is-external=true" title="class or interface in java.util">Locale</A>&nbsp;locale)
                     throws <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang">Exception</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/web/servlet/ViewResolver.html#resolveViewName(java.lang.String, java.util.Locale)">ViewResolver</A></CODE></B></DD>
<DD>Resolve the given view by name.
 <p>Note: To allow for ViewResolver chaining, a ViewResolver should
 return <code>null</code> if a view with the given name is not defined in it.
 However, this is not required: Some ViewResolvers will always attempt
 to build View objects with the given name, unable to return <code>null</code> 
 (rather throwing an exception when View creation failed).
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/web/servlet/ViewResolver.html#resolveViewName(java.lang.String, java.util.Locale)">resolveViewName</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/web/servlet/ViewResolver.html" title="interface in org.springframework.web.servlet">ViewResolver</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>viewName</CODE> - name of the view to resolve<DD><CODE>locale</CODE> - Locale in which to resolve the view.
 ViewResolvers that support internationalization should respect this.
<DT><B>Returns:</B><DD>the View object, or <code>null</code> if not found
 (optional, to allow for ViewResolver chaining)
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang">Exception</A></CODE> - if the view cannot be resolved
 (typically in case of problems creating an actual View object)</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../../org/springframework/web/servlet/view/BeanNameViewResolver.html" title="class in org.springframework.web.servlet.view"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../../org/springframework/web/servlet/view/DefaultRequestToViewNameTranslator.html" title="class in org.springframework.web.servlet.view"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../../index.html?org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="ContentNegotiatingViewResolver.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
