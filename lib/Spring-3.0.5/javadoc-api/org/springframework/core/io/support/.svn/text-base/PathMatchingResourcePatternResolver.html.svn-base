<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:23:19 BST 2010 -->
<TITLE>
PathMatchingResourcePatternResolver
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="PathMatchingResourcePatternResolver";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../../org/springframework/core/io/support/LocalizedResourceHelper.html" title="class in org.springframework.core.io.support"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../../org/springframework/core/io/support/PropertiesLoaderSupport.html" title="class in org.springframework.core.io.support"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../../index.html?org/springframework/core/io/support/PathMatchingResourcePatternResolver.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="PathMatchingResourcePatternResolver.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.core.io.support</FONT>
<BR>
Class PathMatchingResourcePatternResolver</H2>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../../../resources/inherit.gif" ALT="extended by "><B>org.springframework.core.io.support.PathMatchingResourcePatternResolver</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../../org/springframework/core/io/ResourceLoader.html" title="interface in org.springframework.core.io">ResourceLoader</A>, <A HREF="../../../../../org/springframework/core/io/support/ResourcePatternResolver.html" title="interface in org.springframework.core.io.support">ResourcePatternResolver</A></DD>
</DL>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../../org/springframework/web/portlet/context/PortletContextResourcePatternResolver.html" title="class in org.springframework.web.portlet.context">PortletContextResourcePatternResolver</A>, <A HREF="../../../../../org/springframework/web/context/support/ServletContextResourcePatternResolver.html" title="class in org.springframework.web.context.support">ServletContextResourcePatternResolver</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>PathMatchingResourcePatternResolver</B><DT>extends <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A><DT>implements <A HREF="../../../../../org/springframework/core/io/support/ResourcePatternResolver.html" title="interface in org.springframework.core.io.support">ResourcePatternResolver</A></DL>
</PRE>

<P>
A <A HREF="../../../../../org/springframework/core/io/support/ResourcePatternResolver.html" title="interface in org.springframework.core.io.support"><CODE>ResourcePatternResolver</CODE></A> implementation that is able to resolve a
 specified resource location path into one or more matching Resources.
 The source path may be a simple path which has a one-to-one mapping to a
 target <A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io"><CODE>Resource</CODE></A>, or alternatively
 may contain the special "<code>classpath*:</code>" prefix and/or
 internal Ant-style regular expressions (matched using Spring's
 <A HREF="../../../../../org/springframework/util/AntPathMatcher.html" title="class in org.springframework.util"><CODE>AntPathMatcher</CODE></A> utility).
 Both of the latter are effectively wildcards.

 <p><b>No Wildcards:</b>

 <p>In the simple case, if the specified location path does not start with the
 <code>"classpath*:</code>" prefix, and does not contain a PathMatcher pattern,
 this resolver will simply return a single resource via a
 <code>getResource()</code> call on the underlying <code>ResourceLoader</code>.
 Examples are real URLs such as "<code>file:C:/context.xml</code>", pseudo-URLs
 such as "<code>classpath:/context.xml</code>", and simple unprefixed paths
 such as "<code>/WEB-INF/context.xml</code>". The latter will resolve in a
 fashion specific to the underlying <code>ResourceLoader</code> (e.g. 
 <code>ServletContextResource</code> for a <code>WebApplicationContext</code>).

 <p><b>Ant-style Patterns:</b>

 <p>When the path location contains an Ant-style pattern, e.g.:
 <pre>
 /WEB-INF/*-context.xml
 com/mycompany/**&#47;applicationContext.xml
 file:C:/some/path/*-context.xml
 classpath:com/mycompany/**&#47;applicationContext.xml</pre>
 the resolver follows a more complex but defined procedure to try to resolve
 the wildcard. It produces a <code>Resource</code> for the path up to the last
 non-wildcard segment and obtains a <code>URL</code> from it. If this URL is
 not a "<code>jar:</code>" URL or container-specific variant (e.g.
 "<code>zip:</code>" in WebLogic, "<code>wsjar</code>" in WebSphere", etc.),
 then a <code>java.io.File</code> is obtained from it, and used to resolve the
 wildcard by walking the filesystem. In the case of a jar URL, the resolver
 either gets a <code>java.net.JarURLConnection</code> from it, or manually parse
 the jar URL, and then traverse the contents of the jar file, to resolve the
 wildcards.

 <p><b>Implications on portability:</b>

 <p>If the specified path is already a file URL (either explicitly, or
 implicitly because the base <code>ResourceLoader</code> is a filesystem one,
 then wildcarding is guaranteed to work in a completely portable fashion.

 <p>If the specified path is a classpath location, then the resolver must
 obtain the last non-wildcard path segment URL via a
 <code>Classloader.getResource()</code> call. Since this is just a
 node of the path (not the file at the end) it is actually undefined
 (in the ClassLoader Javadocs) exactly what sort of a URL is returned in
 this case. In practice, it is usually a <code>java.io.File</code> representing
 the directory, where the classpath resource resolves to a filesystem
 location, or a jar URL of some sort, where the classpath resource resolves
 to a jar location. Still, there is a portability concern on this operation.

 <p>If a jar URL is obtained for the last non-wildcard segment, the resolver
 must be able to get a <code>java.net.JarURLConnection</code> from it, or
 manually parse the jar URL, to be able to walk the contents of the jar,
 and resolve the wildcard. This will work in most environments, but will
 fail in others, and it is strongly recommended that the wildcard
 resolution of resources coming from jars be thoroughly tested in your
 specific environment before you rely on it.

 <p><b><code>classpath*:</code> Prefix:</b>

 <p>There is special support for retrieving multiple class path resources with
 the same name, via the "<code>classpath*:</code>" prefix. For example,
 "<code>classpath*:META-INF/beans.xml</code>" will find all "beans.xml"
 files in the class path, be it in "classes" directories or in JAR files.
 This is particularly useful for autodetecting config files of the same name
 at the same location within each jar file. Internally, this happens via a
 <code>ClassLoader.getResources()</code> call, and is completely portable.

 <p>The "classpath*:" prefix can also be combined with a PathMatcher pattern in
 the rest of the location path, for example "classpath*:META-INF/*-beans.xml".
 In this case, the resolution strategy is fairly simple: a
 <code>ClassLoader.getResources()</code> call is used on the last non-wildcard
 path segment to get all the matching resources in the class loader hierarchy,
 and then off each resource the same PathMatcher resolution strategy described
 above is used for the wildcard subpath.

 <p><b>Other notes:</b>

 <p><b>WARNING:</b> Note that "<code>classpath*:</code>" when combined with
 Ant-style patterns will only work reliably with at least one root directory
 before the pattern starts, unless the actual target files reside in the file
 system. This means that a pattern like "<code>classpath*:*.xml</code>" will
 <i>not</i> retrieve files from the root of jar files but rather only from the
 root of expanded directories. This originates from a limitation in the JDK's
 <code>ClassLoader.getResources()</code> method which only returns file system
 locations for a passed-in empty String (indicating potential roots to search).

 <p><b>WARNING:</b> Ant-style patterns with "classpath:" resources are not
 guaranteed to find matching resources if the root package to search is available
 in multiple class path locations. This is because a resource such as<pre>
     com/mycompany/package1/service-context.xml
 </pre>may be in only one location, but when a path such as<pre>
     classpath:com/mycompany/**&#47;service-context.xml
 </pre>is used to try to resolve it, the resolver will work off the (first) URL 
 returned by <code>getResource("com/mycompany");</code>. If this base package
 node exists in multiple classloader locations, the actual end resource may
 not be underneath. Therefore, preferably, use "<code>classpath*:<code>" with the same
 Ant-style pattern in such a case, which will search <i>all</i> class path
 locations that contain the root package.
<P>

<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>1.0.2</DD>
<DT><B>Author:</B></DT>
  <DD>Juergen Hoeller, Colin Sampaleanu, Marius Bogoevici, Costin Leau</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/core/io/support/ResourcePatternResolver.html#CLASSPATH_ALL_URL_PREFIX"><CODE>ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX</CODE></A>, 
<A HREF="../../../../../org/springframework/util/AntPathMatcher.html" title="class in org.springframework.util"><CODE>AntPathMatcher</CODE></A>, 
<A HREF="../../../../../org/springframework/core/io/ResourceLoader.html#getResource(java.lang.String)"><CODE>ResourceLoader.getResource(String)</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true#getResources(java.lang.String)" title="class or interface in java.lang"><CODE>ClassLoader.getResources(String)</CODE></A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.core.io.support.ResourcePatternResolver"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface org.springframework.core.io.support.<A HREF="../../../../../org/springframework/core/io/support/ResourcePatternResolver.html" title="interface in org.springframework.core.io.support">ResourcePatternResolver</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/core/io/support/ResourcePatternResolver.html#CLASSPATH_ALL_URL_PREFIX">CLASSPATH_ALL_URL_PREFIX</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.springframework.core.io.ResourceLoader"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface org.springframework.core.io.<A HREF="../../../../../org/springframework/core/io/ResourceLoader.html" title="interface in org.springframework.core.io">ResourceLoader</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../../org/springframework/core/io/ResourceLoader.html#CLASSPATH_URL_PREFIX">CLASSPATH_URL_PREFIX</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#PathMatchingResourcePatternResolver()">PathMatchingResourcePatternResolver</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#PathMatchingResourcePatternResolver(java.lang.ClassLoader)">PathMatchingResourcePatternResolver</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A>&nbsp;classLoader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#PathMatchingResourcePatternResolver(org.springframework.core.io.ResourceLoader)">PathMatchingResourcePatternResolver</A></B>(<A HREF="../../../../../org/springframework/core/io/ResourceLoader.html" title="interface in org.springframework.core.io">ResourceLoader</A>&nbsp;resourceLoader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new PathMatchingResourcePatternResolver.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#convertClassLoaderURL(java.net.URL)">convertClassLoaderURL</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/net/URL.html?is-external=true" title="class or interface in java.net">URL</A>&nbsp;url)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convert the given URL as returned from the ClassLoader into a Resource object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#determineRootDir(java.lang.String)">determineRootDir</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;location)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine the root directory for the given location.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true" title="class or interface in java.util">Set</A>&lt;<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#doFindMatchingFileSystemResources(java.io.File, java.lang.String)">doFindMatchingFileSystemResources</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/io/File.html?is-external=true" title="class or interface in java.io">File</A>&nbsp;rootDir,
                                  <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;subPattern)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Find all resources in the file system that match the given location pattern
 via the Ant-style PathMatcher.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true" title="class or interface in java.util">Set</A>&lt;<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#doFindPathMatchingFileResources(org.springframework.core.io.Resource, java.lang.String)">doFindPathMatchingFileResources</A></B>(<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&nbsp;rootDirResource,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;subPattern)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Find all resources in the file system that match the given location pattern
 via the Ant-style PathMatcher.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true" title="class or interface in java.util">Set</A>&lt;<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#doFindPathMatchingJarResources(org.springframework.core.io.Resource, java.lang.String)">doFindPathMatchingJarResources</A></B>(<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&nbsp;rootDirResource,
                               <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;subPattern)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Find all resources in jar files that match the given location pattern
 via the Ant-style PathMatcher.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#doRetrieveMatchingFiles(java.lang.String, java.io.File, java.util.Set)">doRetrieveMatchingFiles</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;fullPattern,
                        <A HREF="http://java.sun.com/javase/6/docs/api/java/io/File.html?is-external=true" title="class or interface in java.io">File</A>&nbsp;dir,
                        <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true" title="class or interface in java.util">Set</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/io/File.html?is-external=true" title="class or interface in java.io">File</A>&gt;&nbsp;result)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Recursively retrieve files that match the given pattern,
 adding them to the given result list.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#findAllClassPathResources(java.lang.String)">findAllClassPathResources</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;location)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Find all class location resources with the given location via the ClassLoader.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#findPathMatchingResources(java.lang.String)">findPathMatchingResources</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;locationPattern)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Find all resources that match the given location pattern via the
 Ant-style PathMatcher.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#getClassLoader()">getClassLoader</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the ClassLoader that this pattern resolver works with
 (never <code>null</code>).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/jar/JarFile.html?is-external=true" title="class or interface in java.util.jar">JarFile</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#getJarFile(java.lang.String)">getJarFile</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;jarFileUrl)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resolve the given jar file URL into a JarFile object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/util/PathMatcher.html" title="interface in org.springframework.util">PathMatcher</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#getPathMatcher()">getPathMatcher</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the PathMatcher that this resource pattern resolver uses.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#getResource(java.lang.String)">getResource</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;location)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a Resource handle for the specified resource.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/core/io/ResourceLoader.html" title="interface in org.springframework.core.io">ResourceLoader</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#getResourceLoader()">getResourceLoader</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the ResourceLoader that this pattern resolver works with.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#getResources(java.lang.String)">getResources</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;locationPattern)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resolve the given location pattern into Resource objects.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#isJarResource(org.springframework.core.io.Resource)">isJarResource</A></B>(<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&nbsp;resource)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether the given resource handle indicates a jar resource
 that the <code>doFindPathMatchingJarResources</code> method can handle.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#resolveRootDirResource(org.springframework.core.io.Resource)">resolveRootDirResource</A></B>(<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&nbsp;original)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resolve the specified resource for path matching.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true" title="class or interface in java.util">Set</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/io/File.html?is-external=true" title="class or interface in java.io">File</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#retrieveMatchingFiles(java.io.File, java.lang.String)">retrieveMatchingFiles</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/io/File.html?is-external=true" title="class or interface in java.io">File</A>&nbsp;rootDir,
                      <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;pattern)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieve files that match the given path pattern,
 checking the given directory and its subdirectories.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#setPathMatcher(org.springframework.util.PathMatcher)">setPathMatcher</A></B>(<A HREF="../../../../../org/springframework/util/PathMatcher.html" title="interface in org.springframework.util">PathMatcher</A>&nbsp;pathMatcher)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the PathMatcher implementation to use for this
 resource pattern resolver.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="PathMatchingResourcePatternResolver()"><!-- --></A><H3>
PathMatchingResourcePatternResolver</H3>
<PRE>
public <B>PathMatchingResourcePatternResolver</B>()</PRE>
<DL>
<DD>Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader.
 <p>ClassLoader access will happen via the thread context class loader.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/core/io/DefaultResourceLoader.html" title="class in org.springframework.core.io"><CODE>DefaultResourceLoader</CODE></A></DL>
</DL>
<HR>

<A NAME="PathMatchingResourcePatternResolver(java.lang.ClassLoader)"><!-- --></A><H3>
PathMatchingResourcePatternResolver</H3>
<PRE>
public <B>PathMatchingResourcePatternResolver</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A>&nbsp;classLoader)</PRE>
<DL>
<DD>Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>classLoader</CODE> - the ClassLoader to load classpath resources with,
 or <code>null</code> for using the thread context class loader
 at the time of actual resource access<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/core/io/DefaultResourceLoader.html" title="class in org.springframework.core.io"><CODE>DefaultResourceLoader</CODE></A></DL>
</DL>
<HR>

<A NAME="PathMatchingResourcePatternResolver(org.springframework.core.io.ResourceLoader)"><!-- --></A><H3>
PathMatchingResourcePatternResolver</H3>
<PRE>
public <B>PathMatchingResourcePatternResolver</B>(<A HREF="../../../../../org/springframework/core/io/ResourceLoader.html" title="interface in org.springframework.core.io">ResourceLoader</A>&nbsp;resourceLoader)</PRE>
<DL>
<DD>Create a new PathMatchingResourcePatternResolver.
 <p>ClassLoader access will happen via the thread context class loader.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>resourceLoader</CODE> - the ResourceLoader to load root directories and
 actual resources with</DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getResourceLoader()"><!-- --></A><H3>
getResourceLoader</H3>
<PRE>
public <A HREF="../../../../../org/springframework/core/io/ResourceLoader.html" title="interface in org.springframework.core.io">ResourceLoader</A> <B>getResourceLoader</B>()</PRE>
<DL>
<DD>Return the ResourceLoader that this pattern resolver works with.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getClassLoader()"><!-- --></A><H3>
getClassLoader</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true" title="class or interface in java.lang">ClassLoader</A> <B>getClassLoader</B>()</PRE>
<DL>
<DD>Return the ClassLoader that this pattern resolver works with
 (never <code>null</code>).
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/core/io/ResourceLoader.html#getClassLoader()">getClassLoader</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/core/io/ResourceLoader.html" title="interface in org.springframework.core.io">ResourceLoader</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the ClassLoader (never <code>null</code>)</DL>
</DD>
</DL>
<HR>

<A NAME="setPathMatcher(org.springframework.util.PathMatcher)"><!-- --></A><H3>
setPathMatcher</H3>
<PRE>
public void <B>setPathMatcher</B>(<A HREF="../../../../../org/springframework/util/PathMatcher.html" title="interface in org.springframework.util">PathMatcher</A>&nbsp;pathMatcher)</PRE>
<DL>
<DD>Set the PathMatcher implementation to use for this
 resource pattern resolver. Default is AntPathMatcher.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/util/AntPathMatcher.html" title="class in org.springframework.util"><CODE>AntPathMatcher</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getPathMatcher()"><!-- --></A><H3>
getPathMatcher</H3>
<PRE>
public <A HREF="../../../../../org/springframework/util/PathMatcher.html" title="interface in org.springframework.util">PathMatcher</A> <B>getPathMatcher</B>()</PRE>
<DL>
<DD>Return the PathMatcher that this resource pattern resolver uses.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getResource(java.lang.String)"><!-- --></A><H3>
getResource</H3>
<PRE>
public <A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A> <B>getResource</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;location)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/core/io/ResourceLoader.html#getResource(java.lang.String)">ResourceLoader</A></CODE></B></DD>
<DD>Return a Resource handle for the specified resource.
 The handle should always be a reusable resource descriptor,
 allowing for multiple <A HREF="../../../../../org/springframework/core/io/InputStreamSource.html#getInputStream()"><CODE>InputStreamSource.getInputStream()</CODE></A> calls.
 <p><ul>
 <li>Must support fully qualified URLs, e.g. "file:C:/test.dat".
 <li>Must support classpath pseudo-URLs, e.g. "classpath:test.dat".
 <li>Should support relative file paths, e.g. "WEB-INF/test.dat".
 (This will be implementation-specific, typically provided by an
 ApplicationContext implementation.)
 </ul>
 <p>Note that a Resource handle does not imply an existing resource;
 you need to invoke <A HREF="../../../../../org/springframework/core/io/Resource.html#exists()"><CODE>Resource.exists()</CODE></A> to check for existence.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/core/io/ResourceLoader.html#getResource(java.lang.String)">getResource</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/core/io/ResourceLoader.html" title="interface in org.springframework.core.io">ResourceLoader</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>location</CODE> - the resource location
<DT><B>Returns:</B><DD>a corresponding Resource handle<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/core/io/ResourceLoader.html#CLASSPATH_URL_PREFIX"><CODE>ResourceLoader.CLASSPATH_URL_PREFIX</CODE></A>, 
<A HREF="../../../../../org/springframework/core/io/Resource.html#exists()"><CODE>Resource.exists()</CODE></A>, 
<A HREF="../../../../../org/springframework/core/io/InputStreamSource.html#getInputStream()"><CODE>InputStreamSource.getInputStream()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getResources(java.lang.String)"><!-- --></A><H3>
getResources</H3>
<PRE>
public <A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[] <B>getResources</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;locationPattern)
                        throws <A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../../../org/springframework/core/io/support/ResourcePatternResolver.html#getResources(java.lang.String)">ResourcePatternResolver</A></CODE></B></DD>
<DD>Resolve the given location pattern into Resource objects.
 <p>Overlapping resource entries that point to the same physical
 resource should be avoided, as far as possible. The result should
 have set semantics.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../../org/springframework/core/io/support/ResourcePatternResolver.html#getResources(java.lang.String)">getResources</A></CODE> in interface <CODE><A HREF="../../../../../org/springframework/core/io/support/ResourcePatternResolver.html" title="interface in org.springframework.core.io.support">ResourcePatternResolver</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>locationPattern</CODE> - the location pattern to resolve
<DT><B>Returns:</B><DD>the corresponding Resource objects
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></CODE> - in case of I/O errors</DL>
</DD>
</DL>
<HR>

<A NAME="findAllClassPathResources(java.lang.String)"><!-- --></A><H3>
findAllClassPathResources</H3>
<PRE>
protected <A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[] <B>findAllClassPathResources</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;location)
                                        throws <A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
<DL>
<DD>Find all class location resources with the given location via the ClassLoader.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>location</CODE> - the absolute path within the classpath
<DT><B>Returns:</B><DD>the result as Resource array
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></CODE> - in case of I/O errors<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true#getResources(java.lang.String)" title="class or interface in java.lang"><CODE>ClassLoader.getResources(java.lang.String)</CODE></A>, 
<A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#convertClassLoaderURL(java.net.URL)"><CODE>convertClassLoaderURL(java.net.URL)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="convertClassLoaderURL(java.net.URL)"><!-- --></A><H3>
convertClassLoaderURL</H3>
<PRE>
protected <A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A> <B>convertClassLoaderURL</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/net/URL.html?is-external=true" title="class or interface in java.net">URL</A>&nbsp;url)</PRE>
<DL>
<DD>Convert the given URL as returned from the ClassLoader into a Resource object.
 <p>The default implementation simply creates a UrlResource instance.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>url</CODE> - a URL as returned from the ClassLoader
<DT><B>Returns:</B><DD>the corresponding Resource object<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true#getResources(java.lang.String)" title="class or interface in java.lang"><CODE>ClassLoader.getResources(java.lang.String)</CODE></A>, 
<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io"><CODE>Resource</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="findPathMatchingResources(java.lang.String)"><!-- --></A><H3>
findPathMatchingResources</H3>
<PRE>
protected <A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>[] <B>findPathMatchingResources</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;locationPattern)
                                        throws <A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
<DL>
<DD>Find all resources that match the given location pattern via the
 Ant-style PathMatcher. Supports resources in jar files and zip files
 and in the file system.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>locationPattern</CODE> - the location pattern to match
<DT><B>Returns:</B><DD>the result as Resource array
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></CODE> - in case of I/O errors<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#doFindPathMatchingJarResources(org.springframework.core.io.Resource, java.lang.String)"><CODE>doFindPathMatchingJarResources(org.springframework.core.io.Resource, java.lang.String)</CODE></A>, 
<A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#doFindPathMatchingFileResources(org.springframework.core.io.Resource, java.lang.String)"><CODE>doFindPathMatchingFileResources(org.springframework.core.io.Resource, java.lang.String)</CODE></A>, 
<A HREF="../../../../../org/springframework/util/PathMatcher.html" title="interface in org.springframework.util"><CODE>PathMatcher</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="determineRootDir(java.lang.String)"><!-- --></A><H3>
determineRootDir</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>determineRootDir</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;location)</PRE>
<DL>
<DD>Determine the root directory for the given location.
 <p>Used for determining the starting point for file matching,
 resolving the root directory location to a <code>java.io.File</code>
 and passing it into <code>retrieveMatchingFiles</code>, with the
 remainder of the location as pattern.
 <p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",
 for example.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>location</CODE> - the location to check
<DT><B>Returns:</B><DD>the part of the location that denotes the root directory<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#retrieveMatchingFiles(java.io.File, java.lang.String)"><CODE>retrieveMatchingFiles(java.io.File, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="resolveRootDirResource(org.springframework.core.io.Resource)"><!-- --></A><H3>
resolveRootDirResource</H3>
<PRE>
protected <A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A> <B>resolveRootDirResource</B>(<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&nbsp;original)
                                   throws <A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
<DL>
<DD>Resolve the specified resource for path matching.
 <p>The default implementation detects an Equinox OSGi "bundleresource:"
 / "bundleentry:" URL and resolves it into a standard jar file URL that
 can be traversed using Spring's standard jar file traversal algorithm.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>original</CODE> - the resource to resolfe
<DT><B>Returns:</B><DD>the resolved resource (may be identical to the passed-in resource)
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></CODE> - in case of resolution failure</DL>
</DD>
</DL>
<HR>

<A NAME="isJarResource(org.springframework.core.io.Resource)"><!-- --></A><H3>
isJarResource</H3>
<PRE>
protected boolean <B>isJarResource</B>(<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&nbsp;resource)
                         throws <A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
<DL>
<DD>Return whether the given resource handle indicates a jar resource
 that the <code>doFindPathMatchingJarResources</code> method can handle.
 <p>The default implementation checks against the URL protocols
 "jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server
 and IBM WebSphere, respectively, but can be treated like jar files).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>resource</CODE> - the resource handle to check
 (usually the root directory to start path matching from)
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></CODE><DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#doFindPathMatchingJarResources(org.springframework.core.io.Resource, java.lang.String)"><CODE>doFindPathMatchingJarResources(org.springframework.core.io.Resource, java.lang.String)</CODE></A>, 
<A HREF="../../../../../org/springframework/util/ResourceUtils.html#isJarURL(java.net.URL)"><CODE>ResourceUtils.isJarURL(java.net.URL)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="doFindPathMatchingJarResources(org.springframework.core.io.Resource, java.lang.String)"><!-- --></A><H3>
doFindPathMatchingJarResources</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true" title="class or interface in java.util">Set</A>&lt;<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&gt; <B>doFindPathMatchingJarResources</B>(<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&nbsp;rootDirResource,
                                                       <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;subPattern)
                                                throws <A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
<DL>
<DD>Find all resources in jar files that match the given location pattern
 via the Ant-style PathMatcher.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>rootDirResource</CODE> - the root directory as Resource<DD><CODE>subPattern</CODE> - the sub pattern to match (below the root directory)
<DT><B>Returns:</B><DD>the Set of matching Resource instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></CODE> - in case of I/O errors<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/net/JarURLConnection.html?is-external=true" title="class or interface in java.net"><CODE>JarURLConnection</CODE></A>, 
<A HREF="../../../../../org/springframework/util/PathMatcher.html" title="interface in org.springframework.util"><CODE>PathMatcher</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getJarFile(java.lang.String)"><!-- --></A><H3>
getJarFile</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/util/jar/JarFile.html?is-external=true" title="class or interface in java.util.jar">JarFile</A> <B>getJarFile</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;jarFileUrl)
                      throws <A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
<DL>
<DD>Resolve the given jar file URL into a JarFile object.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="doFindPathMatchingFileResources(org.springframework.core.io.Resource, java.lang.String)"><!-- --></A><H3>
doFindPathMatchingFileResources</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true" title="class or interface in java.util">Set</A>&lt;<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&gt; <B>doFindPathMatchingFileResources</B>(<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&nbsp;rootDirResource,
                                                        <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;subPattern)
                                                 throws <A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
<DL>
<DD>Find all resources in the file system that match the given location pattern
 via the Ant-style PathMatcher.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>rootDirResource</CODE> - the root directory as Resource<DD><CODE>subPattern</CODE> - the sub pattern to match (below the root directory)
<DT><B>Returns:</B><DD>the Set of matching Resource instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></CODE> - in case of I/O errors<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#retrieveMatchingFiles(java.io.File, java.lang.String)"><CODE>retrieveMatchingFiles(java.io.File, java.lang.String)</CODE></A>, 
<A HREF="../../../../../org/springframework/util/PathMatcher.html" title="interface in org.springframework.util"><CODE>PathMatcher</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="doFindMatchingFileSystemResources(java.io.File, java.lang.String)"><!-- --></A><H3>
doFindMatchingFileSystemResources</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true" title="class or interface in java.util">Set</A>&lt;<A HREF="../../../../../org/springframework/core/io/Resource.html" title="interface in org.springframework.core.io">Resource</A>&gt; <B>doFindMatchingFileSystemResources</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/io/File.html?is-external=true" title="class or interface in java.io">File</A>&nbsp;rootDir,
                                                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;subPattern)
                                                   throws <A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
<DL>
<DD>Find all resources in the file system that match the given location pattern
 via the Ant-style PathMatcher.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>rootDir</CODE> - the root directory in the file system<DD><CODE>subPattern</CODE> - the sub pattern to match (below the root directory)
<DT><B>Returns:</B><DD>the Set of matching Resource instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></CODE> - in case of I/O errors<DT><B>See Also:</B><DD><A HREF="../../../../../org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#retrieveMatchingFiles(java.io.File, java.lang.String)"><CODE>retrieveMatchingFiles(java.io.File, java.lang.String)</CODE></A>, 
<A HREF="../../../../../org/springframework/util/PathMatcher.html" title="interface in org.springframework.util"><CODE>PathMatcher</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="retrieveMatchingFiles(java.io.File, java.lang.String)"><!-- --></A><H3>
retrieveMatchingFiles</H3>
<PRE>
protected <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true" title="class or interface in java.util">Set</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/io/File.html?is-external=true" title="class or interface in java.io">File</A>&gt; <B>retrieveMatchingFiles</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/io/File.html?is-external=true" title="class or interface in java.io">File</A>&nbsp;rootDir,
                                          <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;pattern)
                                   throws <A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
<DL>
<DD>Retrieve files that match the given path pattern,
 checking the given directory and its subdirectories.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>rootDir</CODE> - the directory to start from<DD><CODE>pattern</CODE> - the pattern to match against,
 relative to the root directory
<DT><B>Returns:</B><DD>the Set of matching File instances
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></CODE> - if directory contents could not be retrieved</DL>
</DD>
</DL>
<HR>

<A NAME="doRetrieveMatchingFiles(java.lang.String, java.io.File, java.util.Set)"><!-- --></A><H3>
doRetrieveMatchingFiles</H3>
<PRE>
protected void <B>doRetrieveMatchingFiles</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;fullPattern,
                                       <A HREF="http://java.sun.com/javase/6/docs/api/java/io/File.html?is-external=true" title="class or interface in java.io">File</A>&nbsp;dir,
                                       <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true" title="class or interface in java.util">Set</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/io/File.html?is-external=true" title="class or interface in java.io">File</A>&gt;&nbsp;result)
                                throws <A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
<DL>
<DD>Recursively retrieve files that match the given pattern,
 adding them to the given result list.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>fullPattern</CODE> - the pattern to match against,
 with preprended root directory path<DD><CODE>dir</CODE> - the current directory<DD><CODE>result</CODE> - the Set of matching File instances to add to
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></CODE> - if directory contents could not be retrieved</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../../org/springframework/core/io/support/LocalizedResourceHelper.html" title="class in org.springframework.core.io.support"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../../org/springframework/core/io/support/PropertiesLoaderSupport.html" title="class in org.springframework.core.io.support"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../../index.html?org/springframework/core/io/support/PathMatchingResourcePatternResolver.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="PathMatchingResourcePatternResolver.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
