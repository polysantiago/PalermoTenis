<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_21) on Wed Oct 20 16:24:44 BST 2010 -->
<TITLE>
DataBinder
</TITLE>

<META NAME="date" CONTENT="2010-10-20">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../spring-javadoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="DataBinder";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/springframework/validation/BindingResultUtils.html" title="class in org.springframework.validation"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../org/springframework/validation/DefaultBindingErrorProcessor.html" title="class in org.springframework.validation"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?org/springframework/validation/DataBinder.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="DataBinder.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.springframework.validation</FONT>
<BR>
Class DataBinder</H2>
<PRE>
<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>org.springframework.validation.DataBinder</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A>, <A HREF="../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A></DD>
</DL>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../org/springframework/web/bind/WebDataBinder.html" title="class in org.springframework.web.bind">WebDataBinder</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>DataBinder</B><DT>extends <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A><DT>implements <A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A>, <A HREF="../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A></DL>
</PRE>

<P>
Binder that allows for setting property values onto a target object,
 including support for validation and binding result analysis.
 The binding process can be customized through specifying allowed fields,
 required fields, custom editors, etc.

 <p>Note that there are potential security implications in failing to set an array
 of allowed fields. In the case of HTTP form POST data for example, malicious clients
 can attempt to subvert an application by supplying values for fields or properties
 that do not exist on the form. In some cases this could lead to illegal data being
 set on command objects <i>or their nested objects</i>. For this reason, it is
 <b>highly recommended to specify the <A HREF="../../../org/springframework/validation/DataBinder.html#setAllowedFields(java.lang.String...)"><CODE>allowedFields</CODE></A> property</b>
 on the DataBinder.

 <p>The binding results can be examined via the <A HREF="../../../org/springframework/validation/BindingResult.html" title="interface in org.springframework.validation"><CODE>BindingResult</CODE></A> interface,
 extending the <A HREF="../../../org/springframework/validation/Errors.html" title="interface in org.springframework.validation"><CODE>Errors</CODE></A> interface: see the <A HREF="../../../org/springframework/validation/DataBinder.html#getBindingResult()"><CODE>getBindingResult()</CODE></A> method.
 Missing fields and property access exceptions will be converted to <A HREF="../../../org/springframework/validation/FieldError.html" title="class in org.springframework.validation"><CODE>FieldErrors</CODE></A>,
 collected in the Errors instance, using the following error codes:

 <ul>
 <li>Missing field error: "required"
 <li>Type mismatch error: "typeMismatch"
 <li>Method invocation error: "methodInvocation"
 </ul>

 <p>By default, binding errors get resolved through the <A HREF="../../../org/springframework/validation/BindingErrorProcessor.html" title="interface in org.springframework.validation"><CODE>BindingErrorProcessor</CODE></A>
 strategy, processing for missing fields and property access exceptions: see the
 <A HREF="../../../org/springframework/validation/DataBinder.html#setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor)"><CODE>setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor)</CODE></A> method. You can override the default strategy
 if needed, for example to generate different error codes.

 <p>Custom validation errors can be added afterwards. You will typically want to resolve
 such error codes into proper user-visible error messages; this can be achieved through
 resolving each error via a <A HREF="../../../org/springframework/context/MessageSource.html" title="interface in org.springframework.context"><CODE>MessageSource</CODE></A>, which is
 able to resolve an <A HREF="../../../org/springframework/validation/ObjectError.html" title="class in org.springframework.validation"><CODE>ObjectError</CODE></A>/<A HREF="../../../org/springframework/validation/FieldError.html" title="class in org.springframework.validation"><CODE>FieldError</CODE></A> through its
 <A HREF="../../../org/springframework/context/MessageSource.html#getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale)"><CODE>MessageSource.getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale)</CODE></A>
 method. The list of message codes can be customized through the <A HREF="../../../org/springframework/validation/MessageCodesResolver.html" title="interface in org.springframework.validation"><CODE>MessageCodesResolver</CODE></A>
 strategy: see the <A HREF="../../../org/springframework/validation/DataBinder.html#setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)"><CODE>setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)</CODE></A> method. <A HREF="../../../org/springframework/validation/DefaultMessageCodesResolver.html" title="class in org.springframework.validation"><CODE>DefaultMessageCodesResolver</CODE></A>'s
 javadoc states details on the default resolution rules.

 <p>This generic data binder can be used in any kind of environment.
 It is typically used by Spring web MVC controllers, via the web-specific
 subclasses <A HREF="../../../org/springframework/web/bind/ServletRequestDataBinder.html" title="class in org.springframework.web.bind"><CODE>ServletRequestDataBinder</CODE></A>
 and <A HREF="../../../org/springframework/web/portlet/bind/PortletRequestDataBinder.html" title="class in org.springframework.web.portlet.bind"><CODE>PortletRequestDataBinder</CODE></A>.
<P>

<P>
<DL>
<DT><B>Author:</B></DT>
  <DD>Rod Johnson, Juergen Hoeller, Rob Harrop</DD>
<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#setAllowedFields(java.lang.String...)"><CODE>setAllowedFields(java.lang.String...)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#setRequiredFields(java.lang.String...)"><CODE>setRequiredFields(java.lang.String...)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#registerCustomEditor(java.lang.Class, java.beans.PropertyEditor)"><CODE>registerCustomEditor(java.lang.Class, java.beans.PropertyEditor)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)"><CODE>setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor)"><CODE>setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#bind(org.springframework.beans.PropertyValues)"><CODE>bind(org.springframework.beans.PropertyValues)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#getBindingResult()"><CODE>getBindingResult()</CODE></A>, 
<A HREF="../../../org/springframework/validation/DefaultMessageCodesResolver.html" title="class in org.springframework.validation"><CODE>DefaultMessageCodesResolver</CODE></A>, 
<A HREF="../../../org/springframework/validation/DefaultBindingErrorProcessor.html" title="class in org.springframework.validation"><CODE>DefaultBindingErrorProcessor</CODE></A>, 
<A HREF="../../../org/springframework/context/MessageSource.html" title="interface in org.springframework.context"><CODE>MessageSource</CODE></A>, 
<A HREF="../../../org/springframework/web/bind/ServletRequestDataBinder.html" title="class in org.springframework.web.bind"><CODE>ServletRequestDataBinder</CODE></A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#DEFAULT_OBJECT_NAME">DEFAULT_OBJECT_NAME</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Default object name used for binding: "target"</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected static&nbsp;<A HREF="http://jakarta.apache.org/commons/logging/apidocs/org/apache/commons/logging/Log.html?is-external=true" title="class or interface in org.apache.commons.logging">Log</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#logger">logger</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We'll create a lot of DataBinder instances: Let's use a static logger.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#DataBinder(java.lang.Object)">DataBinder</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;target)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new DataBinder instance, with default object name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#DataBinder(java.lang.Object, java.lang.String)">DataBinder</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;target,
           <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;objectName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new DataBinder instance.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#applyPropertyValues(org.springframework.beans.MutablePropertyValues)">applyPropertyValues</A></B>(<A HREF="../../../org/springframework/beans/MutablePropertyValues.html" title="class in org.springframework.beans">MutablePropertyValues</A>&nbsp;mpvs)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Apply given property values to the target object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#bind(org.springframework.beans.PropertyValues)">bind</A></B>(<A HREF="../../../org/springframework/beans/PropertyValues.html" title="interface in org.springframework.beans">PropertyValues</A>&nbsp;pvs)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bind the given property values to this binder's target.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#checkAllowedFields(org.springframework.beans.MutablePropertyValues)">checkAllowedFields</A></B>(<A HREF="../../../org/springframework/beans/MutablePropertyValues.html" title="class in org.springframework.beans">MutablePropertyValues</A>&nbsp;mpvs)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check the given property values against the allowed fields,
 removing values for fields that are not allowed.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#checkRequiredFields(org.springframework.beans.MutablePropertyValues)">checkRequiredFields</A></B>(<A HREF="../../../org/springframework/beans/MutablePropertyValues.html" title="class in org.springframework.beans">MutablePropertyValues</A>&nbsp;mpvs)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check the given property values against the required fields,
 generating missing field errors where appropriate.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#close()">close</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Close this DataBinder, which may result in throwing
 a BindException if it encountered any errors.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#convertIfNecessary(java.lang.Object, java.lang.Class)">convertIfNecessary</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convert the value to the required type (if necessary from a String).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
<TR ALIGN="right" VALIGN="">
<TD NOWRAP><FONT SIZE="-1">
<CODE>&lt;T&gt; T</CODE></FONT></TD>
</TR>
</TABLE>
</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter)">convertIfNecessary</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value,
                   <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType,
                   <A HREF="../../../org/springframework/core/MethodParameter.html" title="class in org.springframework.core">MethodParameter</A>&nbsp;methodParam)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convert the value to the required type (if necessary from a String).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#doBind(org.springframework.beans.MutablePropertyValues)">doBind</A></B>(<A HREF="../../../org/springframework/beans/MutablePropertyValues.html" title="class in org.springframework.beans">MutablePropertyValues</A>&nbsp;mpvs)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Actual implementation of the binding process, working with the
 passed-in MutablePropertyValues instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans">PropertyEditor</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#findCustomEditor(java.lang.Class, java.lang.String)">findCustomEditor</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;requiredType,
                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyPath)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Find a custom property editor for the given type and property.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getAllowedFields()">getAllowedFields</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the fields that should be allowed for binding.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../org/springframework/validation/BindingErrorProcessor.html" title="interface in org.springframework.validation">BindingErrorProcessor</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getBindingErrorProcessor()">getBindingErrorProcessor</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the strategy for processing binding errors.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../org/springframework/validation/BindingResult.html" title="interface in org.springframework.validation">BindingResult</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getBindingResult()">getBindingResult</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the BindingResult instance created by this DataBinder.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../org/springframework/core/convert/ConversionService.html" title="interface in org.springframework.core.convert">ConversionService</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getConversionService()">getConversionService</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the associated ConversionService, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getDisallowedFields()">getDisallowedFields</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the fields that should <i>not</i> be allowed for binding.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../org/springframework/validation/BindException.html" title="class in org.springframework.validation">BindException</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getErrors()">getErrors</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>in favor of <A HREF="../../../org/springframework/validation/DataBinder.html#getBindingResult()"><CODE>getBindingResult()</CODE></A>.
 Use the <A HREF="../../../org/springframework/validation/BindException.html#BindException(org.springframework.validation.BindingResult)"><CODE>BindException.BindException(BindingResult)</CODE></A> constructor
 to create a BindException instance if still needed.</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../org/springframework/validation/AbstractPropertyBindingResult.html" title="class in org.springframework.validation">AbstractPropertyBindingResult</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getInternalBindingResult()">getInternalBindingResult</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the internal BindingResult held by this DataBinder,
 as AbstractPropertyBindingResult.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getObjectName()">getObjectName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the name of the bound object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../org/springframework/beans/ConfigurablePropertyAccessor.html" title="interface in org.springframework.beans">ConfigurablePropertyAccessor</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getPropertyAccessor()">getPropertyAccessor</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the underlying PropertyAccessor of this binder's BindingResult.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getPropertyEditorRegistry()">getPropertyEditorRegistry</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the underlying TypeConverter of this binder's BindingResult.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getRequiredFields()">getRequiredFields</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the fields that are required for each binding process.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../org/springframework/beans/SimpleTypeConverter.html" title="class in org.springframework.beans">SimpleTypeConverter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getSimpleTypeConverter()">getSimpleTypeConverter</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return this binder's underlying SimpleTypeConverter.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getTarget()">getTarget</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the wrapped target object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getTypeConverter()">getTypeConverter</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the underlying TypeConverter of this binder's BindingResult.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../org/springframework/validation/Validator.html" title="interface in org.springframework.validation">Validator</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#getValidator()">getValidator</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the Validator to apply after each binding step, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#initBeanPropertyAccess()">initBeanPropertyAccess</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize standard JavaBean property access for this DataBinder.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#initDirectFieldAccess()">initDirectFieldAccess</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize direct field access for this DataBinder,
 as alternative to the default bean property access.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#isAllowed(java.lang.String)">isAllowed</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;field)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return if the given field is allowed for binding.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#isAutoGrowNestedPaths()">isAutoGrowNestedPaths</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether "auto-growing" of nested paths has been activated.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#isIgnoreInvalidFields()">isIgnoreInvalidFields</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether to ignore invalid fields when binding.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#isIgnoreUnknownFields()">isIgnoreUnknownFields</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return whether to ignore unknown fields when binding.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#registerCustomEditor(java.lang.Class, java.beans.PropertyEditor)">registerCustomEditor</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;requiredType,
                     <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans">PropertyEditor</A>&nbsp;propertyEditor)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register the given custom property editor for all properties of the given type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#registerCustomEditor(java.lang.Class, java.lang.String, java.beans.PropertyEditor)">registerCustomEditor</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;requiredType,
                     <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;field,
                     <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans">PropertyEditor</A>&nbsp;propertyEditor)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register the given custom property editor for the given type and
 property, or for all properties of the given type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#setAllowedFields(java.lang.String...)">setAllowedFields</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>...&nbsp;allowedFields)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register fields that should be allowed for binding.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#setAutoGrowNestedPaths(boolean)">setAutoGrowNestedPaths</A></B>(boolean&nbsp;autoGrowNestedPaths)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether this binder should attempt to "auto-grow" a nested path that contains a null value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor)">setBindingErrorProcessor</A></B>(<A HREF="../../../org/springframework/validation/BindingErrorProcessor.html" title="interface in org.springframework.validation">BindingErrorProcessor</A>&nbsp;bindingErrorProcessor)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the strategy to use for processing binding errors, that is,
 required field errors and <code>PropertyAccessException</code>s.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#setConversionService(org.springframework.core.convert.ConversionService)">setConversionService</A></B>(<A HREF="../../../org/springframework/core/convert/ConversionService.html" title="interface in org.springframework.core.convert">ConversionService</A>&nbsp;conversionService)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify a Spring 3.0 ConversionService to use for converting
 property values, as an alternative to JavaBeans PropertyEditors.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#setDisallowedFields(java.lang.String...)">setDisallowedFields</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>...&nbsp;disallowedFields)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register fields that should <i>not</i> be allowed for binding.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#setExtractOldValueForEditor(boolean)">setExtractOldValueForEditor</A></B>(boolean&nbsp;extractOldValueForEditor)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether to extract the old field value when applying a
 property editor to a new value for a field.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#setIgnoreInvalidFields(boolean)">setIgnoreInvalidFields</A></B>(boolean&nbsp;ignoreInvalidFields)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether to ignore invalid fields, that is, whether to ignore bind
 parameters that have corresponding fields in the target object which are
 not accessible (for example because of null values in the nested path).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#setIgnoreUnknownFields(boolean)">setIgnoreUnknownFields</A></B>(boolean&nbsp;ignoreUnknownFields)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether to ignore unknown fields, that is, whether to ignore bind
 parameters that do not have corresponding fields in the target object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)">setMessageCodesResolver</A></B>(<A HREF="../../../org/springframework/validation/MessageCodesResolver.html" title="interface in org.springframework.validation">MessageCodesResolver</A>&nbsp;messageCodesResolver)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the strategy to use for resolving errors into message codes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#setRequiredFields(java.lang.String...)">setRequiredFields</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>...&nbsp;requiredFields)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register fields that are required for each binding process.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#setValidator(org.springframework.validation.Validator)">setValidator</A></B>(<A HREF="../../../org/springframework/validation/Validator.html" title="interface in org.springframework.validation">Validator</A>&nbsp;validator)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the Validator to apply after each binding step.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/springframework/validation/DataBinder.html#validate()">validate</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoke the specified Validator, if any.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="DEFAULT_OBJECT_NAME"><!-- --></A><H3>
DEFAULT_OBJECT_NAME</H3>
<PRE>
public static final <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>DEFAULT_OBJECT_NAME</B></PRE>
<DL>
<DD>Default object name used for binding: "target"
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#org.springframework.validation.DataBinder.DEFAULT_OBJECT_NAME">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="logger"><!-- --></A><H3>
logger</H3>
<PRE>
protected static final <A HREF="http://jakarta.apache.org/commons/logging/apidocs/org/apache/commons/logging/Log.html?is-external=true" title="class or interface in org.apache.commons.logging">Log</A> <B>logger</B></PRE>
<DL>
<DD>We'll create a lot of DataBinder instances: Let's use a static logger.
<P>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="DataBinder(java.lang.Object)"><!-- --></A><H3>
DataBinder</H3>
<PRE>
public <B>DataBinder</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;target)</PRE>
<DL>
<DD>Create a new DataBinder instance, with default object name.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>target</CODE> - the target object to bind onto (or <code>null</code>
 if the binder is just used to convert a plain parameter value)<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#DEFAULT_OBJECT_NAME"><CODE>DEFAULT_OBJECT_NAME</CODE></A></DL>
</DL>
<HR>

<A NAME="DataBinder(java.lang.Object, java.lang.String)"><!-- --></A><H3>
DataBinder</H3>
<PRE>
public <B>DataBinder</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;target,
                  <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;objectName)</PRE>
<DL>
<DD>Create a new DataBinder instance.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>target</CODE> - the target object to bind onto (or <code>null</code>
 if the binder is just used to convert a plain parameter value)<DD><CODE>objectName</CODE> - the name of the target object</DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getTarget()"><!-- --></A><H3>
getTarget</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A> <B>getTarget</B>()</PRE>
<DL>
<DD>Return the wrapped target object.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getObjectName()"><!-- --></A><H3>
getObjectName</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>getObjectName</B>()</PRE>
<DL>
<DD>Return the name of the bound object.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setAutoGrowNestedPaths(boolean)"><!-- --></A><H3>
setAutoGrowNestedPaths</H3>
<PRE>
public void <B>setAutoGrowNestedPaths</B>(boolean&nbsp;autoGrowNestedPaths)</PRE>
<DL>
<DD>Set whether this binder should attempt to "auto-grow" a nested path that contains a null value.
 <p>If "true", a null path location will be populated with a default object value and traversed
 instead of resulting in an exception. This flag also enables auto-growth of collection elements
 when accessing an out-of-bounds index.
 <p>Default is "true" on a standard DataBinder. Note that this feature is only supported
 for bean property access (DataBinder's default mode), not for field access.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#initBeanPropertyAccess()"><CODE>initBeanPropertyAccess()</CODE></A>, 
<A HREF="../../../org/springframework/beans/BeanWrapper.html#setAutoGrowNestedPaths(boolean)"><CODE>BeanWrapper.setAutoGrowNestedPaths(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isAutoGrowNestedPaths()"><!-- --></A><H3>
isAutoGrowNestedPaths</H3>
<PRE>
public boolean <B>isAutoGrowNestedPaths</B>()</PRE>
<DL>
<DD>Return whether "auto-growing" of nested paths has been activated.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="initBeanPropertyAccess()"><!-- --></A><H3>
initBeanPropertyAccess</H3>
<PRE>
public void <B>initBeanPropertyAccess</B>()</PRE>
<DL>
<DD>Initialize standard JavaBean property access for this DataBinder.
 <p>This is the default; an explicit call just leads to eager initialization.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#initDirectFieldAccess()"><CODE>initDirectFieldAccess()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="initDirectFieldAccess()"><!-- --></A><H3>
initDirectFieldAccess</H3>
<PRE>
public void <B>initDirectFieldAccess</B>()</PRE>
<DL>
<DD>Initialize direct field access for this DataBinder,
 as alternative to the default bean property access.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#initBeanPropertyAccess()"><CODE>initBeanPropertyAccess()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getInternalBindingResult()"><!-- --></A><H3>
getInternalBindingResult</H3>
<PRE>
protected <A HREF="../../../org/springframework/validation/AbstractPropertyBindingResult.html" title="class in org.springframework.validation">AbstractPropertyBindingResult</A> <B>getInternalBindingResult</B>()</PRE>
<DL>
<DD>Return the internal BindingResult held by this DataBinder,
 as AbstractPropertyBindingResult.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getPropertyAccessor()"><!-- --></A><H3>
getPropertyAccessor</H3>
<PRE>
protected <A HREF="../../../org/springframework/beans/ConfigurablePropertyAccessor.html" title="interface in org.springframework.beans">ConfigurablePropertyAccessor</A> <B>getPropertyAccessor</B>()</PRE>
<DL>
<DD>Return the underlying PropertyAccessor of this binder's BindingResult.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getSimpleTypeConverter()"><!-- --></A><H3>
getSimpleTypeConverter</H3>
<PRE>
protected <A HREF="../../../org/springframework/beans/SimpleTypeConverter.html" title="class in org.springframework.beans">SimpleTypeConverter</A> <B>getSimpleTypeConverter</B>()</PRE>
<DL>
<DD>Return this binder's underlying SimpleTypeConverter.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getPropertyEditorRegistry()"><!-- --></A><H3>
getPropertyEditorRegistry</H3>
<PRE>
protected <A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A> <B>getPropertyEditorRegistry</B>()</PRE>
<DL>
<DD>Return the underlying TypeConverter of this binder's BindingResult.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getTypeConverter()"><!-- --></A><H3>
getTypeConverter</H3>
<PRE>
protected <A HREF="../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A> <B>getTypeConverter</B>()</PRE>
<DL>
<DD>Return the underlying TypeConverter of this binder's BindingResult.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getBindingResult()"><!-- --></A><H3>
getBindingResult</H3>
<PRE>
public <A HREF="../../../org/springframework/validation/BindingResult.html" title="interface in org.springframework.validation">BindingResult</A> <B>getBindingResult</B>()</PRE>
<DL>
<DD>Return the BindingResult instance created by this DataBinder.
 This allows for convenient access to the binding results after
 a bind operation.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the BindingResult instance, to be treated as BindingResult
 or as Errors instance (Errors is a super-interface of BindingResult)<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/Errors.html" title="interface in org.springframework.validation"><CODE>Errors</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#bind(org.springframework.beans.PropertyValues)"><CODE>bind(org.springframework.beans.PropertyValues)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getErrors()"><!-- --></A><H3>
getErrors</H3>
<PRE>
<FONT SIZE="-1"><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Deprecated.html?is-external=true" title="class or interface in java.lang">@Deprecated</A>
</FONT>public <A HREF="../../../org/springframework/validation/BindException.html" title="class in org.springframework.validation">BindException</A> <B>getErrors</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>in favor of <A HREF="../../../org/springframework/validation/DataBinder.html#getBindingResult()"><CODE>getBindingResult()</CODE></A>.
 Use the <A HREF="../../../org/springframework/validation/BindException.html#BindException(org.springframework.validation.BindingResult)"><CODE>BindException.BindException(BindingResult)</CODE></A> constructor
 to create a BindException instance if still needed.</I>
<P>
<DD>Return the Errors instance for this data binder.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the Errors instance, to be treated as Errors or as BindException<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#getBindingResult()"><CODE>getBindingResult()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setIgnoreUnknownFields(boolean)"><!-- --></A><H3>
setIgnoreUnknownFields</H3>
<PRE>
public void <B>setIgnoreUnknownFields</B>(boolean&nbsp;ignoreUnknownFields)</PRE>
<DL>
<DD>Set whether to ignore unknown fields, that is, whether to ignore bind
 parameters that do not have corresponding fields in the target object.
 <p>Default is "true". Turn this off to enforce that all bind parameters
 must have a matching field in the target object.
 <p>Note that this setting only applies to <i>binding</i> operations
 on this DataBinder, not to <i>retrieving</i> values via its
 <A HREF="../../../org/springframework/validation/DataBinder.html#getBindingResult()"><CODE>BindingResult</CODE></A>.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#bind(org.springframework.beans.PropertyValues)"><CODE>bind(org.springframework.beans.PropertyValues)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isIgnoreUnknownFields()"><!-- --></A><H3>
isIgnoreUnknownFields</H3>
<PRE>
public boolean <B>isIgnoreUnknownFields</B>()</PRE>
<DL>
<DD>Return whether to ignore unknown fields when binding.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setIgnoreInvalidFields(boolean)"><!-- --></A><H3>
setIgnoreInvalidFields</H3>
<PRE>
public void <B>setIgnoreInvalidFields</B>(boolean&nbsp;ignoreInvalidFields)</PRE>
<DL>
<DD>Set whether to ignore invalid fields, that is, whether to ignore bind
 parameters that have corresponding fields in the target object which are
 not accessible (for example because of null values in the nested path).
 <p>Default is "false". Turn this on to ignore bind parameters for
 nested objects in non-existing parts of the target object graph.
 <p>Note that this setting only applies to <i>binding</i> operations
 on this DataBinder, not to <i>retrieving</i> values via its
 <A HREF="../../../org/springframework/validation/DataBinder.html#getBindingResult()"><CODE>BindingResult</CODE></A>.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#bind(org.springframework.beans.PropertyValues)"><CODE>bind(org.springframework.beans.PropertyValues)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isIgnoreInvalidFields()"><!-- --></A><H3>
isIgnoreInvalidFields</H3>
<PRE>
public boolean <B>isIgnoreInvalidFields</B>()</PRE>
<DL>
<DD>Return whether to ignore invalid fields when binding.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setAllowedFields(java.lang.String...)"><!-- --></A><H3>
setAllowedFields</H3>
<PRE>
public void <B>setAllowedFields</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>...&nbsp;allowedFields)</PRE>
<DL>
<DD>Register fields that should be allowed for binding. Default is all
 fields. Restrict this for example to avoid unwanted modifications
 by malicious users when binding HTTP request parameters.
 <p>Supports "xxx*", "*xxx" and "*xxx*" patterns. More sophisticated matching
 can be implemented by overriding the <code>isAllowed</code> method.
 <p>Alternatively, specify a list of <i>disallowed</i> fields.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>allowedFields</CODE> - array of field names<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#setDisallowedFields(java.lang.String...)"><CODE>setDisallowedFields(java.lang.String...)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#isAllowed(java.lang.String)"><CODE>isAllowed(String)</CODE></A>, 
<A HREF="../../../org/springframework/web/bind/ServletRequestDataBinder.html" title="class in org.springframework.web.bind"><CODE>ServletRequestDataBinder</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getAllowedFields()"><!-- --></A><H3>
getAllowedFields</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getAllowedFields</B>()</PRE>
<DL>
<DD>Return the fields that should be allowed for binding.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>array of field names</DL>
</DD>
</DL>
<HR>

<A NAME="setDisallowedFields(java.lang.String...)"><!-- --></A><H3>
setDisallowedFields</H3>
<PRE>
public void <B>setDisallowedFields</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>...&nbsp;disallowedFields)</PRE>
<DL>
<DD>Register fields that should <i>not</i> be allowed for binding. Default is none.
 Mark fields as disallowed for example to avoid unwanted modifications
 by malicious users when binding HTTP request parameters.
 <p>Supports "xxx*", "*xxx" and "*xxx*" patterns. More sophisticated matching
 can be implemented by overriding the <code>isAllowed</code> method.
 <p>Alternatively, specify a list of <i>allowed</i> fields.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>disallowedFields</CODE> - array of field names<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#setAllowedFields(java.lang.String...)"><CODE>setAllowedFields(java.lang.String...)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#isAllowed(java.lang.String)"><CODE>isAllowed(String)</CODE></A>, 
<A HREF="../../../org/springframework/web/bind/ServletRequestDataBinder.html" title="class in org.springframework.web.bind"><CODE>ServletRequestDataBinder</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getDisallowedFields()"><!-- --></A><H3>
getDisallowedFields</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getDisallowedFields</B>()</PRE>
<DL>
<DD>Return the fields that should <i>not</i> be allowed for binding.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>array of field names</DL>
</DD>
</DL>
<HR>

<A NAME="setRequiredFields(java.lang.String...)"><!-- --></A><H3>
setRequiredFields</H3>
<PRE>
public void <B>setRequiredFields</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>...&nbsp;requiredFields)</PRE>
<DL>
<DD>Register fields that are required for each binding process.
 <p>If one of the specified fields is not contained in the list of
 incoming property values, a corresponding "missing field" error
 will be created, with error code "required" (by the default
 binding error processor).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>requiredFields</CODE> - array of field names<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor)"><CODE>setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DefaultBindingErrorProcessor.html#MISSING_FIELD_ERROR_CODE"><CODE>DefaultBindingErrorProcessor.MISSING_FIELD_ERROR_CODE</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getRequiredFields()"><!-- --></A><H3>
getRequiredFields</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>[] <B>getRequiredFields</B>()</PRE>
<DL>
<DD>Return the fields that are required for each binding process.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>array of field names</DL>
</DD>
</DL>
<HR>

<A NAME="setExtractOldValueForEditor(boolean)"><!-- --></A><H3>
setExtractOldValueForEditor</H3>
<PRE>
public void <B>setExtractOldValueForEditor</B>(boolean&nbsp;extractOldValueForEditor)</PRE>
<DL>
<DD>Set whether to extract the old field value when applying a
 property editor to a new value for a field.
 <p>Default is "true", exposing previous field values to custom editors.
 Turn this to "false" to avoid side effects caused by getters.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)"><!-- --></A><H3>
setMessageCodesResolver</H3>
<PRE>
public void <B>setMessageCodesResolver</B>(<A HREF="../../../org/springframework/validation/MessageCodesResolver.html" title="interface in org.springframework.validation">MessageCodesResolver</A>&nbsp;messageCodesResolver)</PRE>
<DL>
<DD>Set the strategy to use for resolving errors into message codes.
 Applies the given strategy to the underlying errors holder.
 <p>Default is a DefaultMessageCodesResolver.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/AbstractBindingResult.html#setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)"><CODE>AbstractBindingResult.setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DefaultMessageCodesResolver.html" title="class in org.springframework.validation"><CODE>DefaultMessageCodesResolver</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor)"><!-- --></A><H3>
setBindingErrorProcessor</H3>
<PRE>
public void <B>setBindingErrorProcessor</B>(<A HREF="../../../org/springframework/validation/BindingErrorProcessor.html" title="interface in org.springframework.validation">BindingErrorProcessor</A>&nbsp;bindingErrorProcessor)</PRE>
<DL>
<DD>Set the strategy to use for processing binding errors, that is,
 required field errors and <code>PropertyAccessException</code>s.
 <p>Default is a DefaultBindingErrorProcessor.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DefaultBindingErrorProcessor.html" title="class in org.springframework.validation"><CODE>DefaultBindingErrorProcessor</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getBindingErrorProcessor()"><!-- --></A><H3>
getBindingErrorProcessor</H3>
<PRE>
public <A HREF="../../../org/springframework/validation/BindingErrorProcessor.html" title="interface in org.springframework.validation">BindingErrorProcessor</A> <B>getBindingErrorProcessor</B>()</PRE>
<DL>
<DD>Return the strategy for processing binding errors.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setValidator(org.springframework.validation.Validator)"><!-- --></A><H3>
setValidator</H3>
<PRE>
public void <B>setValidator</B>(<A HREF="../../../org/springframework/validation/Validator.html" title="interface in org.springframework.validation">Validator</A>&nbsp;validator)</PRE>
<DL>
<DD>Set the Validator to apply after each binding step.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getValidator()"><!-- --></A><H3>
getValidator</H3>
<PRE>
public <A HREF="../../../org/springframework/validation/Validator.html" title="interface in org.springframework.validation">Validator</A> <B>getValidator</B>()</PRE>
<DL>
<DD>Return the Validator to apply after each binding step, if any.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setConversionService(org.springframework.core.convert.ConversionService)"><!-- --></A><H3>
setConversionService</H3>
<PRE>
public void <B>setConversionService</B>(<A HREF="../../../org/springframework/core/convert/ConversionService.html" title="interface in org.springframework.core.convert">ConversionService</A>&nbsp;conversionService)</PRE>
<DL>
<DD>Specify a Spring 3.0 ConversionService to use for converting
 property values, as an alternative to JavaBeans PropertyEditors.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getConversionService()"><!-- --></A><H3>
getConversionService</H3>
<PRE>
public <A HREF="../../../org/springframework/core/convert/ConversionService.html" title="interface in org.springframework.core.convert">ConversionService</A> <B>getConversionService</B>()</PRE>
<DL>
<DD>Return the associated ConversionService, if any.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="registerCustomEditor(java.lang.Class, java.beans.PropertyEditor)"><!-- --></A><H3>
registerCustomEditor</H3>
<PRE>
public void <B>registerCustomEditor</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;requiredType,
                                 <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans">PropertyEditor</A>&nbsp;propertyEditor)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html#registerCustomEditor(java.lang.Class, java.beans.PropertyEditor)">PropertyEditorRegistry</A></CODE></B></DD>
<DD>Register the given custom property editor for all properties of the given type.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html#registerCustomEditor(java.lang.Class, java.beans.PropertyEditor)">registerCustomEditor</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>requiredType</CODE> - the type of the property<DD><CODE>propertyEditor</CODE> - the editor to register</DL>
</DD>
</DL>
<HR>

<A NAME="registerCustomEditor(java.lang.Class, java.lang.String, java.beans.PropertyEditor)"><!-- --></A><H3>
registerCustomEditor</H3>
<PRE>
public void <B>registerCustomEditor</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;requiredType,
                                 <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;field,
                                 <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans">PropertyEditor</A>&nbsp;propertyEditor)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html#registerCustomEditor(java.lang.Class, java.lang.String, java.beans.PropertyEditor)">PropertyEditorRegistry</A></CODE></B></DD>
<DD>Register the given custom property editor for the given type and
 property, or for all properties of the given type.
 <p>If the property path denotes an array or Collection property,
 the editor will get applied either to the array/Collection itself
 (the <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans"><CODE>PropertyEditor</CODE></A> has to create an array or Collection value) or
 to each element (the <code>PropertyEditor</code> has to create the element type),
 depending on the specified required type.
 <p>Note: Only one single registered custom editor per property path
 is supported. In the case of a Collection/array, do not register an editor
 for both the Collection/array and each element on the same property.
 <p>For example, if you wanted to register an editor for "items[n].quantity"
 (for all values n), you would use "items.quantity" as the value of the
 'propertyPath' argument to this method.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html#registerCustomEditor(java.lang.Class, java.lang.String, java.beans.PropertyEditor)">registerCustomEditor</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>requiredType</CODE> - the type of the property. This may be <code>null</code>
 if a property is given but should be specified in any case, in particular in
 case of a Collection - making clear whether the editor is supposed to apply
 to the entire Collection itself or to each of its entries. So as a general rule:
 <b>Do not specify <code>null</code> here in case of a Collection/array!</b><DD><CODE>field</CODE> - the path of the property (name or nested path), or
 <code>null</code> if registering an editor for all properties of the given type<DD><CODE>propertyEditor</CODE> - editor to register</DL>
</DD>
</DL>
<HR>

<A NAME="findCustomEditor(java.lang.Class, java.lang.String)"><!-- --></A><H3>
findCustomEditor</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true" title="class or interface in java.beans">PropertyEditor</A> <B>findCustomEditor</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&nbsp;requiredType,
                                       <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyPath)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html#findCustomEditor(java.lang.Class, java.lang.String)">PropertyEditorRegistry</A></CODE></B></DD>
<DD>Find a custom property editor for the given type and property.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html#findCustomEditor(java.lang.Class, java.lang.String)">findCustomEditor</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/PropertyEditorRegistry.html" title="interface in org.springframework.beans">PropertyEditorRegistry</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>requiredType</CODE> - the type of the property (can be <code>null</code> if a property
 is given but should be specified in any case for consistency checking)<DD><CODE>propertyPath</CODE> - the path of the property (name or nested path), or
 <code>null</code> if looking for an editor for all properties of the given type
<DT><B>Returns:</B><DD>the registered editor, or <code>null</code> if none</DL>
</DD>
</DL>
<HR>

<A NAME="convertIfNecessary(java.lang.Object, java.lang.Class)"><!-- --></A><H3>
convertIfNecessary</H3>
<PRE>
public &lt;T&gt; T <B>convertIfNecessary</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType)
                     throws <A HREF="../../../org/springframework/beans/TypeMismatchException.html" title="class in org.springframework.beans">TypeMismatchException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/TypeConverter.html#convertIfNecessary(java.lang.Object, java.lang.Class)">TypeConverter</A></CODE></B></DD>
<DD>Convert the value to the required type (if necessary from a String).
 <p>Conversions from String to any type will typically use the <code>setAsText</code>
 method of the PropertyEditor class. Note that a PropertyEditor must be registered
 for the given class for this to work; this is a standard JavaBeans API.
 A number of PropertyEditors are automatically registered.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/TypeConverter.html#convertIfNecessary(java.lang.Object, java.lang.Class)">convertIfNecessary</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - the value to convert<DD><CODE>requiredType</CODE> - the type we must convert to
 (or <code>null</code> if not known, for example in case of a collection element)
<DT><B>Returns:</B><DD>the new value, possibly the result of type conversion
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../org/springframework/beans/TypeMismatchException.html" title="class in org.springframework.beans">TypeMismatchException</A></CODE> - if type conversion failed<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true#setAsText(java.lang.String)" title="class or interface in java.beans"><CODE>PropertyEditor.setAsText(String)</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true#getValue()" title="class or interface in java.beans"><CODE>PropertyEditor.getValue()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter)"><!-- --></A><H3>
convertIfNecessary</H3>
<PRE>
public &lt;T&gt; T <B>convertIfNecessary</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;value,
                                <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;requiredType,
                                <A HREF="../../../org/springframework/core/MethodParameter.html" title="class in org.springframework.core">MethodParameter</A>&nbsp;methodParam)
                     throws <A HREF="../../../org/springframework/beans/TypeMismatchException.html" title="class in org.springframework.beans">TypeMismatchException</A></PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/springframework/beans/TypeConverter.html#convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter)">TypeConverter</A></CODE></B></DD>
<DD>Convert the value to the required type (if necessary from a String).
 <p>Conversions from String to any type will typically use the <code>setAsText</code>
 method of the PropertyEditor class. Note that a PropertyEditor must be registered
 for the given class for this to work; this is a standard JavaBeans API.
 A number of PropertyEditors are automatically registered.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../org/springframework/beans/TypeConverter.html#convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter)">convertIfNecessary</A></CODE> in interface <CODE><A HREF="../../../org/springframework/beans/TypeConverter.html" title="interface in org.springframework.beans">TypeConverter</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - the value to convert<DD><CODE>requiredType</CODE> - the type we must convert to
 (or <code>null</code> if not known, for example in case of a collection element)<DD><CODE>methodParam</CODE> - the method parameter that is the target of the conversion
 (for analysis of generic types; may be <code>null</code>)
<DT><B>Returns:</B><DD>the new value, possibly the result of type conversion
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../org/springframework/beans/TypeMismatchException.html" title="class in org.springframework.beans">TypeMismatchException</A></CODE> - if type conversion failed<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true#setAsText(java.lang.String)" title="class or interface in java.beans"><CODE>PropertyEditor.setAsText(String)</CODE></A>, 
<A HREF="http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true#getValue()" title="class or interface in java.beans"><CODE>PropertyEditor.getValue()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="bind(org.springframework.beans.PropertyValues)"><!-- --></A><H3>
bind</H3>
<PRE>
public void <B>bind</B>(<A HREF="../../../org/springframework/beans/PropertyValues.html" title="interface in org.springframework.beans">PropertyValues</A>&nbsp;pvs)</PRE>
<DL>
<DD>Bind the given property values to this binder's target.
 <p>This call can create field errors, representing basic binding
 errors like a required field (code "required"), or type mismatch
 between value and bean property (code "typeMismatch").
 <p>Note that the given PropertyValues should be a throwaway instance:
 For efficiency, it will be modified to just contain allowed fields if it
 implements the MutablePropertyValues interface; else, an internal mutable
 copy will be created for this purpose. Pass in a copy of the PropertyValues
 if you want your original instance to stay unmodified in any case.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pvs</CODE> - property values to bind<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#doBind(org.springframework.beans.MutablePropertyValues)"><CODE>doBind(org.springframework.beans.MutablePropertyValues)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="doBind(org.springframework.beans.MutablePropertyValues)"><!-- --></A><H3>
doBind</H3>
<PRE>
protected void <B>doBind</B>(<A HREF="../../../org/springframework/beans/MutablePropertyValues.html" title="class in org.springframework.beans">MutablePropertyValues</A>&nbsp;mpvs)</PRE>
<DL>
<DD>Actual implementation of the binding process, working with the
 passed-in MutablePropertyValues instance.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>mpvs</CODE> - the property values to bind,
 as MutablePropertyValues instance<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#checkAllowedFields(org.springframework.beans.MutablePropertyValues)"><CODE>checkAllowedFields(org.springframework.beans.MutablePropertyValues)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#checkRequiredFields(org.springframework.beans.MutablePropertyValues)"><CODE>checkRequiredFields(org.springframework.beans.MutablePropertyValues)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#applyPropertyValues(org.springframework.beans.MutablePropertyValues)"><CODE>applyPropertyValues(org.springframework.beans.MutablePropertyValues)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="checkAllowedFields(org.springframework.beans.MutablePropertyValues)"><!-- --></A><H3>
checkAllowedFields</H3>
<PRE>
protected void <B>checkAllowedFields</B>(<A HREF="../../../org/springframework/beans/MutablePropertyValues.html" title="class in org.springframework.beans">MutablePropertyValues</A>&nbsp;mpvs)</PRE>
<DL>
<DD>Check the given property values against the allowed fields,
 removing values for fields that are not allowed.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>mpvs</CODE> - the property values to be bound (can be modified)<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#getAllowedFields()"><CODE>getAllowedFields()</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#isAllowed(java.lang.String)"><CODE>isAllowed(String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isAllowed(java.lang.String)"><!-- --></A><H3>
isAllowed</H3>
<PRE>
protected boolean <B>isAllowed</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;field)</PRE>
<DL>
<DD>Return if the given field is allowed for binding.
 Invoked for each passed-in property value.
 <p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,
 as well as direct equality, in the specified lists of allowed fields and
 disallowed fields. A field matching a disallowed pattern will not be accepted
 even if it also happens to match a pattern in the allowed list.
 <p>Can be overridden in subclasses.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>field</CODE> - the field to check
<DT><B>Returns:</B><DD>if the field is allowed<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#setAllowedFields(java.lang.String...)"><CODE>setAllowedFields(java.lang.String...)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#setDisallowedFields(java.lang.String...)"><CODE>setDisallowedFields(java.lang.String...)</CODE></A>, 
<A HREF="../../../org/springframework/util/PatternMatchUtils.html#simpleMatch(java.lang.String, java.lang.String)"><CODE>PatternMatchUtils.simpleMatch(String, String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="checkRequiredFields(org.springframework.beans.MutablePropertyValues)"><!-- --></A><H3>
checkRequiredFields</H3>
<PRE>
protected void <B>checkRequiredFields</B>(<A HREF="../../../org/springframework/beans/MutablePropertyValues.html" title="class in org.springframework.beans">MutablePropertyValues</A>&nbsp;mpvs)</PRE>
<DL>
<DD>Check the given property values against the required fields,
 generating missing field errors where appropriate.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>mpvs</CODE> - the property values to be bound (can be modified)<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#getRequiredFields()"><CODE>getRequiredFields()</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#getBindingErrorProcessor()"><CODE>getBindingErrorProcessor()</CODE></A>, 
<A HREF="../../../org/springframework/validation/BindingErrorProcessor.html#processMissingFieldError(java.lang.String, org.springframework.validation.BindingResult)"><CODE>BindingErrorProcessor.processMissingFieldError(java.lang.String, org.springframework.validation.BindingResult)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="applyPropertyValues(org.springframework.beans.MutablePropertyValues)"><!-- --></A><H3>
applyPropertyValues</H3>
<PRE>
protected void <B>applyPropertyValues</B>(<A HREF="../../../org/springframework/beans/MutablePropertyValues.html" title="class in org.springframework.beans">MutablePropertyValues</A>&nbsp;mpvs)</PRE>
<DL>
<DD>Apply given property values to the target object.
 <p>Default implementation applies all of the supplied property
 values as bean property values. By default, unknown fields will
 be ignored.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>mpvs</CODE> - the property values to be bound (can be modified)<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#getTarget()"><CODE>getTarget()</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#getPropertyAccessor()"><CODE>getPropertyAccessor()</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#isIgnoreUnknownFields()"><CODE>isIgnoreUnknownFields()</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#getBindingErrorProcessor()"><CODE>getBindingErrorProcessor()</CODE></A>, 
<A HREF="../../../org/springframework/validation/BindingErrorProcessor.html#processPropertyAccessException(org.springframework.beans.PropertyAccessException, org.springframework.validation.BindingResult)"><CODE>BindingErrorProcessor.processPropertyAccessException(org.springframework.beans.PropertyAccessException, org.springframework.validation.BindingResult)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="validate()"><!-- --></A><H3>
validate</H3>
<PRE>
public void <B>validate</B>()</PRE>
<DL>
<DD>Invoke the specified Validator, if any.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/DataBinder.html#setValidator(org.springframework.validation.Validator)"><CODE>setValidator(Validator)</CODE></A>, 
<A HREF="../../../org/springframework/validation/DataBinder.html#getBindingResult()"><CODE>getBindingResult()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="close()"><!-- --></A><H3>
close</H3>
<PRE>
public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util">Map</A> <B>close</B>()
          throws <A HREF="../../../org/springframework/validation/BindException.html" title="class in org.springframework.validation">BindException</A></PRE>
<DL>
<DD>Close this DataBinder, which may result in throwing
 a BindException if it encountered any errors.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the model Map, containing target object and Errors instance
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../org/springframework/validation/BindException.html" title="class in org.springframework.validation">BindException</A></CODE> - if there were any errors in the bind operation<DT><B>See Also:</B><DD><A HREF="../../../org/springframework/validation/BindingResult.html#getModel()"><CODE>BindingResult.getModel()</CODE></A></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<!-- Begin Google Analytics code --> <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> var pageTracker = _gat._getTracker("UA-2728886-3"); pageTracker._setDomainName("none"); pageTracker._setAllowLinker(true); pageTracker._trackPageview(); </script> <!-- End Google Analytics code --></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/springframework/validation/BindingResultUtils.html" title="class in org.springframework.validation"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../org/springframework/validation/DefaultBindingErrorProcessor.html" title="class in org.springframework.validation"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?org/springframework/validation/DataBinder.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="DataBinder.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
